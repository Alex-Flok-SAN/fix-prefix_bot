#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ tv_ingest_hybrid.py
–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_tv_ingest_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å tv_ingest_hybrid –±–µ–∑ GUI"""
    
    print("üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è tv_ingest_hybrid.py")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        from tools.tv_ingest_hybrid import HybridTVIngest
        
        print("üì¶ –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞
        app = HybridTVIngest()
        app.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test_image = "test_tv_screenshot.png"
        if not Path(test_image).exists():
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {test_image} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
        print(f"üì∏ –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {test_image}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ (–≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –Ω–∞–ø—Ä—è–º—É—é)
        app._load_image_file(test_image)
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        app.update()
        time.sleep(1)
        
        print("üìä –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR")
        if hasattr(app, 'ocr_result') and app.ocr_result:
            print(f"   Symbol: {app.ocr_result.get('symbol', 'N/A')}")
            print(f"   Timeframe: {app.ocr_result.get('timeframe', 'N/A')}")
            print(f"   DateTime: {app.ocr_result.get('datetime', 'N/A')}")
            print("‚úÖ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω")
        else:
            print("‚ö†Ô∏è OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
        
        print("üîç –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        if hasattr(app, 'symbol_var'):
            print(f"   UI Symbol: {app.symbol_var.get()}")
            print(f"   UI Timeframe: {app.timeframe_var.get()}")
            print(f"   UI DateTime: {app.datetime_var.get()}")
            print(f"   Pattern Status: {app.pattern_status.get()}")
            
        print("üé® –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Canvas")
        canvas_width = app.canvas.winfo_width()
        canvas_height = app.canvas.winfo_height()
        print(f"   Canvas —Ä–∞–∑–º–µ—Ä—ã: {canvas_width}x{canvas_height}")
        
        if canvas_width > 1 and canvas_height > 1:
            print("‚úÖ Canvas –≥–æ—Ç–æ–≤ –∫ —Ä–∏—Å–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ö†Ô∏è Canvas –Ω–µ –≥–æ—Ç–æ–≤")
            
        print("üìà –≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞")
        if hasattr(app, 'current_data') and app.current_data is not None:
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(app.current_data)}")
            print("‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            print("‚ùå –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        if hasattr(app, 'current_pattern'):
            if app.current_pattern:
                print(f"   FPF Pattern –Ω–∞–π–¥–µ–Ω —Å confidence: {app.current_pattern.confidence:.1%}")
                print("‚úÖ FPF –ø–∞—Ç—Ç–µ—Ä–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
            else:
                print("   FPF Pattern –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
                
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        print("üóëÔ∏è –≠—Ç–∞–ø 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏")
        app._clear_all()
        app.update()
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app.quit()
        app.destroy()
        
        print("\nüéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ tv_ingest_hybrid.py —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_individual_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
    
    print("\nüîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: OCR Engine
    print("üîç –¢–µ—Å—Ç OCR Engine:")
    try:
        from ai.ocr_engine_new import SimpleOCREngine
        ocr = SimpleOCREngine()
        result = ocr.extract_chart_info("test_tv_screenshot.png")
        print(f"   ‚úÖ OCR —Ä–∞–±–æ—Ç–∞–µ—Ç: {type(result)}")
    except Exception as e:
        print(f"   ‚ùå OCR –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: FPF Detector
    print("üéØ –¢–µ—Å—Ç FPF Detector:")
    try:
        from core.ai_search_pattern.fpf_detector_new import FpfPatternDetector
        detector = FpfPatternDetector()
        test_candles = [(i, 100, 101, 99, 100.5, 1000) for i in range(50)]
        result = detector.detect_pattern(test_candles, 25)
        print(f"   ‚úÖ FPF Detector —Ä–∞–±–æ—Ç–∞–µ—Ç: {type(result)}")
    except Exception as e:
        print(f"   ‚ùå FPF Detector –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: Data Loader  
    print("üìä –¢–µ—Å—Ç Data Loader:")
    try:
        from sync.simple_data_loader import load_data_for_analysis
        data = load_data_for_analysis('BTCUSDT', '1m', '2024-08-29T10:00:00')
        print(f"   ‚úÖ Data Loader —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(data) if data is not None else 0} —Å–≤–µ—á–µ–π")
    except Exception as e:
        print(f"   ‚ùå Data Loader –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    success = test_tv_ingest_functionality()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_individual_components()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! tv_ingest_hybrid.py –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        exit(0)
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
        exit(1)