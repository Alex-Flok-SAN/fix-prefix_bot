#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ LOY-FIX - –∏—â–µ–º –≤ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
"""

import sys
import pandas as pd
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from core.ai_search_pattern.fpf_detector_new import FpfPatternDetector, CandleData

def extended_loy_analysis():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ LOY-FIX –≤ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_file = Path("data_dl/BNBUSDT_M15_2025-05.csv")
    df = pd.read_csv(data_file)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CandleData
    candlesticks = []
    for _, row in df.iterrows():
        candle = CandleData(
            timestamp=row['ts_open_ms'],
            open=row['open'],
            high=row['high'], 
            low=row['low'],
            close=row['close'],
            volume=row['volume']
        )
        candlesticks.append(candle)
    
    # OCR —Å–≤–µ—á–∞
    ocr_idx = 462
    
    print("üîç –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó LOY-FIX")
    print("=" * 50)
    
    # –î–µ—Ç–µ–∫—Ç–æ—Ä
    detector = FpfPatternDetector()
    pattern = detector.detect_pattern(candlesticks, ocr_candle_idx=ocr_idx)
    
    if not pattern:
        print("‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"‚úÖ FIX –æ–±–ª–∞—Å—Ç—å: {pattern.fix_start_idx}-{pattern.fix_end_idx}")
    print(f"   FIX —Ü–µ–Ω—ã: {pattern.fix_low:.2f} - {pattern.fix_high:.2f}")
    print(f"‚úÖ HI-PATTERN: –∏–Ω–¥–µ–∫—Å {pattern.hi_pattern_idx}, —Ü–µ–Ω–∞ {pattern.hi_pattern_price:.2f}")
    
    # 1. –ü–û–ò–°–ö LOY-FIX –í –†–ê–ó–ù–´–• –û–ë–õ–ê–°–¢–Ø–•
    print(f"\nüîç –ü–û–ò–°–ö LOY-FIX –í –†–ê–ó–ù–´–• –û–ë–õ–ê–°–¢–Ø–•:")
    
    # –ê) –ú–µ–∂–¥—É FIX –∏ HI-PATTERN
    print(f"\nüìç –û–ë–õ–ê–°–¢–¨ A: –ú–ï–ñ–î–£ FIX –∏ HI-PATTERN ({pattern.fix_end_idx+1} - {pattern.hi_pattern_idx})")
    loy_candidates_a = []
    for i in range(pattern.fix_end_idx + 1, pattern.hi_pattern_idx):
        if i < len(candlesticks):
            candle = candlesticks[i]
            below_fix = candle.low < pattern.fix_low
            loy_candidates_a.append((i, candle.low, below_fix))
    
    if loy_candidates_a:
        loy_candidates_a.sort(key=lambda x: x[1])  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
        print(f"   –¢–æ–ø-5 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:")
        for rank, (idx, low, below_fix) in enumerate(loy_candidates_a[:5], 1):
            marker = "‚úÖ" if below_fix else "‚ùå"
            print(f"   {rank}. –°–≤–µ—á–∞ #{idx}: {low:.2f} {marker} (–Ω–∏–∂–µ FIX: {below_fix})")
    else:
        print(f"   –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ë) –ü–æ—Å–ª–µ HI-PATTERN 
    print(f"\nüìç –û–ë–õ–ê–°–¢–¨ B: –ü–û–°–õ–ï HI-PATTERN ({pattern.hi_pattern_idx+1} - {pattern.hi_pattern_idx+30})")
    search_end_b = min(len(candlesticks), pattern.hi_pattern_idx + 30)
    loy_candidates_b = []
    for i in range(pattern.hi_pattern_idx + 1, search_end_b):
        candle = candlesticks[i]
        below_fix = candle.low < pattern.fix_low
        loy_candidates_b.append((i, candle.low, below_fix))
    
    if loy_candidates_b:
        loy_candidates_b.sort(key=lambda x: x[1])  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
        print(f"   –¢–æ–ø-5 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:")
        for rank, (idx, low, below_fix) in enumerate(loy_candidates_b[:5], 1):
            marker = "‚úÖ" if below_fix else "‚ùå"
            print(f"   {rank}. –°–≤–µ—á–∞ #{idx}: {low:.2f} {marker} (–Ω–∏–∂–µ FIX: {below_fix})")
    else:
        print(f"   –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –í) –ü–µ—Ä–µ–¥ FIX –æ–±–ª–∞—Å—Ç—å—é
    print(f"\nüìç –û–ë–õ–ê–°–¢–¨ C: –ü–ï–†–ï–î FIX ({pattern.fix_start_idx-30} - {pattern.fix_start_idx-1})")
    search_start_c = max(0, pattern.fix_start_idx - 30)
    loy_candidates_c = []
    for i in range(search_start_c, pattern.fix_start_idx):
        candle = candlesticks[i]
        below_fix = candle.low < pattern.fix_low
        loy_candidates_c.append((i, candle.low, below_fix))
    
    if loy_candidates_c:
        loy_candidates_c.sort(key=lambda x: x[1])  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
        print(f"   –¢–æ–ø-5 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:")
        for rank, (idx, low, below_fix) in enumerate(loy_candidates_c[:5], 1):
            marker = "‚úÖ" if below_fix else "‚ùå"
            print(f"   {rank}. –°–≤–µ—á–∞ #{idx}: {low:.2f} {marker} (–Ω–∏–∂–µ FIX: {below_fix})")
    else:
        print(f"   –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # 2. –ê–ù–ê–õ–ò–ó –í–°–ï–• –í–ê–õ–ò–î–ù–´–• LOY-FIX
    print(f"\n‚úÖ –°–í–û–î–ö–ê –í–ê–õ–ò–î–ù–´–• LOY-FIX (–Ω–∏–∂–µ FIX {pattern.fix_low:.2f}):")
    
    all_valid = []
    for area_name, candidates in [("A (FIX‚ÜíHI)", loy_candidates_a), 
                                  ("B (–ø–æ—Å–ª–µ HI)", loy_candidates_b),
                                  ("C (–ø–µ—Ä–µ–¥ FIX)", loy_candidates_c)]:
        valid_in_area = [(idx, low) for idx, low, below_fix in candidates if below_fix]
        if valid_in_area:
            best_idx, best_low = min(valid_in_area, key=lambda x: x[1])
            all_valid.append((area_name, best_idx, best_low))
            print(f"   {area_name}: —Å–≤–µ—á–∞ #{best_idx}, —Ü–µ–Ω–∞ {best_low:.2f}")
        else:
            print(f"   {area_name}: –ù–ï–¢ –≤–∞–ª–∏–¥–Ω—ã—Ö")
    
    if all_valid:
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π LOY-FIX –∏–∑ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç–µ–π
        best_area, best_idx, best_low = min(all_valid, key=lambda x: x[2])
        print(f"\nüèÜ –õ–£–ß–®–ò–ô LOY-FIX: –æ–±–ª–∞—Å—Ç—å {best_area}, —Å–≤–µ—á–∞ #{best_idx}, —Ü–µ–Ω–∞ {best_low:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        print(f"\n‚è∞ –í–†–ï–ú–ï–ù–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   FIX: {pattern.fix_start_idx}-{pattern.fix_end_idx}")
        print(f"   LOY-FIX: {best_idx}")
        print(f"   HI-PATTERN: {pattern.hi_pattern_idx}")
        
        # –õ–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–∑–µ
        if best_idx < pattern.fix_start_idx:
            print(f"   ‚ùå LOY-FIX –î–û FIX - –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–µ")
        elif pattern.fix_start_idx <= best_idx <= pattern.fix_end_idx:
            print(f"   ‚ùå LOY-FIX –í–ù–£–¢–†–ò FIX - –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–µ")
        elif pattern.fix_end_idx < best_idx < pattern.hi_pattern_idx:
            print(f"   ‚úÖ LOY-FIX –ú–ï–ñ–î–£ FIX –∏ HI-PATTERN - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–µ")
        elif best_idx > pattern.hi_pattern_idx:
            print(f"   ‚ùì LOY-FIX –ü–û–°–õ–ï HI-PATTERN - –≤–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω")
        
    else:
        print(f"\n‚ùå –ù–ï–¢ –í–ê–õ–ò–î–ù–´–• LOY-FIX –≤–æ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç—è—Ö")
        print(f"   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print(f"   1. FIX –æ–±–ª–∞—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–æ")
        print(f"   2. –ü–∞—Ç—Ç–µ—Ä–Ω –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        print(f"   3. –≠—Ç–æ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞")

if __name__ == "__main__":
    extended_loy_analysis()