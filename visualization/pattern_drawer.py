"""
FPF Pattern Drawer - >B@8A>2:0 M;5<5=B>2 ?0BB5@=0 =0 canvas
72;5G5= 87 tv_ingest_hybrid.py 4;O <>4C;L=>AB8
"""
import tkinter as tk
import sys
import pathlib

# >102;O5< ?CBL : ?@>5:BC
_here = pathlib.Path(__file__).resolve()
_proj_root = _here.parent.parent
if str(_proj_root) not in sys.path:
    sys.path.insert(0, str(_proj_root))


class FPFPatternDrawer:
    """B@8A>2:0 FPF ?0BB5@=>2 =0 canvas"""
    
    def __init__(self, canvas):
        self.canvas = canvas
        
        # -;5<5=BK 287C0;870F88 
        self._fix_items = []
        self._ray_items = []
        self._hi_pattern_items = []
        self._loy_fix_items = []
        self._take_profit_items = []
        
        # 0@0<5B@K >B@8A>2:8
        self.margin_left = 60
        self.margin_right = 20
        self.margin_top = 20
        self.margin_bottom = 60
        
    def clear_pattern(self):
        """G8AB:0 FPF ?0BB5@=0 A 3@0D8:0"""
        for items in [self._fix_items, self._ray_items, 
                     self._hi_pattern_items, self._loy_fix_items, self._take_profit_items]:
            for item in items:
                self.canvas.delete(item)
            items.clear()
            
    def draw_fix_area(self, fix_area, candle_data):
        """ 8AC5B FIX >1;0ABL (?;0B> :>=A>;840F88)"""
        if not fix_area or not candle_data:
            return
            
        # >;CG05< :>>@48=0BK
        start_idx, end_idx, low_price, high_price = fix_area[:4]
        
        # KG8A;O5< ?>78F88
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        data_len = len(candle_data)
        
        # –î–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∫–∞–∫ –≤ ChartRenderer)
        chart_width = canvas_width - self.margin_left - self.margin_right
        chart_height = canvas_height - self.margin_top - self.margin_bottom
        
        # –¢–û–ß–ù–û –¢–ê–ö–ò–ï –ñ–ï –§–£–ù–ö–¶–ò–ò –ö–ê–ö –í ChartRenderer
        def idx_to_x(idx):
            # –î–æ–±–∞–≤–ª—è–µ–º 0.5 –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–∏ (–∫–∞–∫ –≤ ChartRenderer)
            return self.margin_left + ((idx + 0.5) * chart_width / data_len)
            
        def price_to_y(price):
            # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º min/max –æ—Ç candle_data —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ ChartRenderer
            if hasattr(candle_data[0], 'high'):
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã —Å–≤–µ—á–µ–π
                highs = [c.high for c in candle_data]
                lows = [c.low for c in candle_data]
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ DataFrame
                highs = candle_data['high'].values if hasattr(candle_data, 'high') else [c.high for c in candle_data]
                lows = candle_data['low'].values if hasattr(candle_data, 'low') else [c.low for c in candle_data]
                
            min_price = float(min(lows))
            max_price = float(max(highs))
            price_range = max_price - min_price
            if price_range == 0:
                price_range = max_price * 0.01
            return self.margin_top + (max_price - price) * chart_height / price_range
        
        # >>@48=0BK ?@O<>C3>;L=8:0
        # –ö–û–û–†–î–ò–ù–ê–¢–´ –ü–†–Ø–ú–û–£–ì–û–õ–¨–ù–ò–ö–ê (–° —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞–∫ –≤ ChartRenderer)
        fix_left = self.margin_left + (start_idx + 0.5) * chart_width / data_len
        fix_right = self.margin_left + (end_idx + 0.5) * chart_width / data_len
        fix_top = price_to_y(high_price)
        fix_bottom = price_to_y(low_price)
        
        # –†–∏—Å—É–µ–º FIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (—Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—É—Ä, –±–µ–∑ –∑–∞–ª–∏–≤–∫–∏) —Å —Ç–µ–≥–æ–º –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        fix_rect = self.canvas.create_rectangle(
            fix_left, fix_top, fix_right, fix_bottom,
            outline="#A56BFF", width=3, fill="", tags="fix_area"
        )
        self._fix_items.append(fix_rect)
        
        # >102;O5< 8=B5@0:B82=K5 C3>;:8
        # –£–ë–ò–†–ê–ï–ú –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –Ø–ö–û–†–Ø - –æ–Ω–∏ –æ—Ç–¥–µ–ª—è—é—Ç—Å—è –æ—Ç FIX –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏
        self._add_fix_handles(fix_left, fix_top, fix_right, fix_bottom)
        
        # 5B:0 FIX
        fix_label = self.canvas.create_text(
            fix_left - 30, fix_top,
            text="FIX", fill="#A56BFF", font=("Arial", 12, "bold"), tags="fix_area"
        )
        self._fix_items.append(fix_label)
        
    def _add_fix_handles(self, left, top, right, bottom):
        """>102;O5B 8=B5@0:B82=K5 C3>;:8 4;O FIX >1;0AB8"""
        handle_size = 4
        
        # '5BK@5 C3;0
        handles = [
            (left, top),      # top-left
            (right, top),     # top-right  
            (left, bottom),   # bottom-left
            (right, bottom)   # bottom-right
        ]
        
        for x, y in handles:
            handle = self.canvas.create_rectangle(
                x - handle_size, y - handle_size,
                x + handle_size, y + handle_size,
                fill="#A56BFF", outline="white", width=1, tags="fix_handle"
            )
            self._fix_items.append(handle)
            
    def draw_loy_fix(self, loy_fix, candle_data):
        """ 8AC5B LOY-FIX B>G:C"""
        if not loy_fix or not candle_data:
            return
            
        loy_idx, loy_price = loy_fix
        data_len = len(candle_data)
        
        # –î–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        chart_width = canvas_width - self.margin_left - self.margin_right
        chart_height = canvas_height - self.margin_top - self.margin_bottom
        
        # $C=:F88 :>>@48=0B
        def idx_to_x(idx):
            return self.margin_left + (idx + 0.5) * chart_width / data_len
            
        def price_to_y(price):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ min/max —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–≤–µ—á–µ–π (–∫–∞–∫ –≤ ChartRenderer)
            highs = [c.high for c in candle_data]
            lows = [c.low for c in candle_data]
            min_price = float(min(lows))
            max_price = float(max(highs))
            price_range = max_price - min_price
            if price_range == 0:
                price_range = max_price * 0.01
            return self.margin_top + (max_price - price) * chart_height / price_range
        
        # >>@48=0BK B>G:8
        loy_x = idx_to_x(loy_idx)
        loy_y = price_to_y(loy_price)
        
        #  8AC5< LOY-FIX B>G:C (:@0A=0O, –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
        loy_point = self.canvas.create_oval(
            loy_x - 3, loy_y - 3, loy_x + 3, loy_y + 3,
            fill="#FF4444", outline="white", width=1
        )
        self._loy_fix_items.append(loy_point)
        
        # 5B:0 LOY-FIX (2=87C B>G:8)
        loy_label = self.canvas.create_text(
            loy_x, loy_y + 20,
            text="LOY-FIX", fill="#FF4444", font=("Arial", 10, "bold")
        )
        self._loy_fix_items.append(loy_label)
        
    def draw_hi_pattern(self, hi_pattern, candle_data):
        """ 8AC5B HI-PATTERN B>G:C"""
        if not hi_pattern or not candle_data:
            return
            
        hi_idx, hi_price = hi_pattern
        data_len = len(candle_data)
        
        # –î–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        chart_width = canvas_width - self.margin_left - self.margin_right
        chart_height = canvas_height - self.margin_top - self.margin_bottom
        
        # $C=:F88 :>>@48=0B
        def idx_to_x(idx):
            return self.margin_left + (idx + 0.5) * chart_width / data_len
            
        def price_to_y(price):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ min/max —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–≤–µ—á–µ–π (–∫–∞–∫ –≤ ChartRenderer)
            highs = [c.high for c in candle_data]
            lows = [c.low for c in candle_data]
            min_price = float(min(lows))
            max_price = float(max(highs))
            price_range = max_price - min_price
            if price_range == 0:
                price_range = max_price * 0.01
            return self.margin_top + (max_price - price) * chart_height / price_range
        
        # >>@48=0BK B>G:8
        hi_x = idx_to_x(hi_idx)
        hi_y = price_to_y(hi_price)
        
        #  8AC5< HI-PATTERN B>G:C (A8=OO)
        hi_point = self.canvas.create_oval(
            hi_x - 6, hi_y - 6, hi_x + 6, hi_y + 6,
            fill="#44FF44", outline="white", width=2
        )
        self._hi_pattern_items.append(hi_point)
        
        # 5B:0 HI-PATTERN
        hi_label = self.canvas.create_text(
            hi_x, hi_y - 20,
            text="HI-PATTERN", fill="#44FF44", font=("Arial", 10, "bold")
        )
        self._hi_pattern_items.append(hi_label)
        
    def draw_ray(self, loy_fix, hi_pattern, candle_data, ray_validated_at=None):
        """–†–∏—Å—É–µ—Ç RAY - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç LOY-FIX"""
        print(f"üéØ draw_ray –≤—ã–∑–≤–∞–Ω: loy_fix={loy_fix}, candle_data_len={len(candle_data) if candle_data else 0}")
        if not loy_fix or not candle_data:
            print("‚ùå RAY –Ω–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        loy_idx, loy_price = loy_fix
        data_len = len(candle_data)
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–ß–ù–û –¢–ê–ö–ò–ï –ñ–ï –ö–û–û–†–î–ò–ù–ê–¢–´ –ö–ê–ö –í ChartRenderer
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        chart_width = canvas_width - self.margin_left - self.margin_right
        chart_height = canvas_height - self.margin_top - self.margin_bottom
        
        # –¢–û–ß–ù–û –¢–ê–ö–ò–ï –ñ–ï –§–£–ù–ö–¶–ò–ò –ö–ê–ö –í ChartRenderer
        def idx_to_x(idx):
            # –î–æ–±–∞–≤–ª—è–µ–º 0.5 –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–∏ (–∫–∞–∫ –≤ ChartRenderer)
            return self.margin_left + ((idx + 0.5) * chart_width / data_len)
            
        def price_to_y(price):
            # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º min/max –æ—Ç candle_data —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ ChartRenderer
            if hasattr(candle_data[0], 'high'):
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã —Å–≤–µ—á–µ–π
                highs = [c.high for c in candle_data]
                lows = [c.low for c in candle_data]
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ DataFrame
                highs = candle_data['high'].values if hasattr(candle_data, 'high') else [c.high for c in candle_data]
                lows = candle_data['low'].values if hasattr(candle_data, 'low') else [c.low for c in candle_data]
                
            min_price = float(min(lows))
            max_price = float(max(highs))
            price_range = max_price - min_price
            if price_range == 0:
                price_range = max_price * 0.01
            return self.margin_top + (max_price - price) * chart_height / price_range
        
        # 0G0;L=0O B>G:0 RAY
        ray_start_x = idx_to_x(loy_idx)
        ray_y = price_to_y(loy_price)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –±—Ä–µ–π–∫ RAY (2+ —Ç–∏–∫–∞ –≤–Ω–∏–∑ –æ—Ç LOY-FIX —É—Ä–æ–≤–Ω—è)
        ray_break_idx = None
        tick_size = 0.01  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–∏–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        break_threshold = loy_price - (2 * tick_size)  # 2 —Ç–∏–∫–∞ –≤–Ω–∏–∑ –æ—Ç LOY-FIX
        
        # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å–≤–µ—á—É –ø–æ—Å–ª–µ LOY-FIX, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–±–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞ 2+ —Ç–∏–∫–∞
        for i in range(loy_idx + 1, len(candle_data)):
            candle = candle_data[i]
            if candle.low <= break_threshold:
                ray_break_idx = i
                break
        
        # >=5G=0O B>G:0 RAY
        if ray_break_idx is not None:
            ray_end_x = idx_to_x(ray_break_idx)
        elif ray_validated_at:
            ray_end_x = idx_to_x(ray_validated_at)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ –∫–æ–Ω—Ü–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º 20 —Å–≤–µ—á–µ–π –≤–ø–µ—Ä–µ–¥
            default_end_idx = min(loy_idx + 20, len(candle_data) - 1)
            ray_end_x = idx_to_x(default_end_idx)
        
        print(f"üî• RAY –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: start=({ray_start_x}, {ray_y}), end=({ray_end_x}, {ray_y})")
        print(f"üî• RAY break_idx={ray_break_idx}, loy_idx={loy_idx}, loy_price={loy_price}")
        
        # –†–∏—Å—É–µ–º RAY –ª–∏–Ω–∏—é - —Å—Ç–∏–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–¢–û–ù–¨–®–ï –í 2 –†–ê–ó–ê)
        if ray_validated_at is not None:
            # ‚úÖ –ü–ê–¢–¢–ï–†–ù –í–ê–õ–ò–î–ò–†–û–í–ê–ù - —Å–ø–ª–æ—à–Ω–∞—è –ª–∏–Ω–∏—è (–±—ã–ª–æ 4, —Å—Ç–∞–ª–æ 2)
            ray_line = self.canvas.create_line(
                ray_start_x, ray_y, ray_end_x, ray_y,
                fill="#FFD700", width=2, tags="ray_validated"
            )
            print(f"‚úÖ RAY –í–ê–õ–ò–î–ò–†–û–í–ê–ù - —Å–ø–ª–æ—à–Ω–∞—è –ª–∏–Ω–∏—è")
        else:
            # ‚è≥ –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω - –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è (–±—ã–ª–æ 2, —Å—Ç–∞–ª–æ 1)
            ray_line = self.canvas.create_line(
                ray_start_x, ray_y, ray_end_x, ray_y,
                fill="#FFD700", width=1, dash=(8, 4), tags="ray_pending"
            )
            print(f"‚è≥ RAY –æ–∂–∏–¥–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è")
        self._ray_items.append(ray_line)
        print(f"‚úÖ RAY –ª–∏–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: canvas_item={ray_line}")
        
        # 5B:0 RAY
        # –ï—Å–ª–∏ RAY –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ç–æ—á–∫–∏ –ø—Ä–æ–±–æ—è
        if ray_validated_at is not None:
            validation_x = idx_to_x(ray_validated_at)
            validation_circle = self.canvas.create_oval(
                validation_x - 4, ray_y - 4, validation_x + 4, ray_y + 4,
                fill="#FF0000", outline="#FFFFFF", width=2, tags="ray_validation_point"
            )
            self._ray_items.append(validation_circle)
            print(f"üî• –ú–∞—Ä–∫–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ RAY —Å–æ–∑–¥–∞–Ω –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ {ray_validated_at}")
        
        # –ü–æ–¥–ø–∏—Å—å RAY –ø–æ —Ü–µ–Ω—Ç—Ä—É –ª—É—á–∞, —Å–≤–µ—Ä—Ö—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        ray_center_x = (ray_start_x + ray_end_x) / 2  # —Ü–µ–Ω—Ç—Ä –ª—É—á–∞
        ray_text = "RAY ‚úÖ" if ray_validated_at is not None else "RAY ‚è≥"
        ray_label = self.canvas.create_text(
            ray_center_x, ray_y - 15,  # –Ω–∞–¥ –ª—É—á–æ–º –Ω–∞ 15 –ø–∏–∫—Å–µ–ª–µ–π
            text=ray_text, fill="#FFD700", font=("Arial", 8, "bold")
        )
        self._ray_items.append(ray_label)
        print(f"‚úÖ RAY –º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: canvas_item={ray_label}")
        
    def draw_prefix_area(self, fix_area, ray_level, candle_data, ray_validation_idx=None):
        """–†–∏—Å—É–µ—Ç PREFIX –æ–±–ª–∞—Å—Ç—å - —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –¥–ª—è –≤—Ö–æ–¥–æ–≤"""
        if not fix_area or not candle_data or ray_level is None:
            return
            
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FIX –æ–±–ª–∞—Å—Ç–∏
        fix_start_idx, fix_end_idx, fix_low_price, fix_high_price = fix_area[:4]
        fix_height = fix_high_price - fix_low_price  # –≤—ã—Å–æ—Ç–∞ FIX –æ–±–ª–∞—Å—Ç–∏
        
        # PREFIX –æ–±–ª–∞—Å—Ç—å –ù–ê –£–†–û–í–ù–ï FIX –∏ —Ä–∞–≤–µ–Ω –ø–æ –≤—ã—Å–æ—Ç–µ FIX
        # –ü–æ—è–≤–ª—è–µ—Ç—Å—è –ü–û–°–õ–ï –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∫–∞–∫ —Ü–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞ —Ä–µ—Ç–µ—Å—Ç–∞
        prefix_high = fix_high_price  # –≤–µ—Ä—Ö PREFIX = –≤–µ—Ä—Ö FIX
        prefix_low = fix_low_price    # –Ω–∏–∑ PREFIX = –Ω–∏–∑ FIX
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–ß–ù–û –¢–ê–ö–ò–ï –ñ–ï –ö–û–û–†–î–ò–ù–ê–¢–´ –ö–ê–ö –í ChartRenderer
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        chart_width = canvas_width - self.margin_left - self.margin_right
        chart_height = canvas_height - self.margin_top - self.margin_bottom
        data_len = len(candle_data)
        
        def price_to_y(price):
            if hasattr(candle_data[0], 'high'):
                highs = [c.high for c in candle_data]
                lows = [c.low for c in candle_data]
            else:
                highs = candle_data['high'].values if hasattr(candle_data, 'high') else [c.high for c in candle_data]
                lows = candle_data['low'].values if hasattr(candle_data, 'low') else [c.low for c in candle_data]
                
            min_price = float(min(lows))
            max_price = float(max(highs))
            price_range = max_price - min_price
            if price_range == 0:
                price_range = max_price * 0.01
            return self.margin_top + (max_price - price) * chart_height / price_range
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã PREFIX –æ–±–ª–∞—Å—Ç–∏ - –ø–æ—è–≤–ª—è–µ—Ç—Å—è –° –ú–û–ú–ï–ù–¢–ê –≤–∞–ª–∏–¥–∞—Ü–∏–∏ RAY
        # PREFIX –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å —Å–≤–µ—á–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if ray_validation_idx is not None:
            prefix_start_idx = ray_validation_idx  # –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
            # –ò—â–µ–º –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –£–í–ï–†–ï–ù–ù–û –≤—ã–π–¥–µ—Ç –∏–∑ PREFIX –≤–Ω–∏–∑ (–∫–æ–Ω–µ—Ü PREFIX –∑–æ–Ω—ã)
            prefix_end_idx = data_len - 1  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ –∫–æ–Ω—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
            
            # –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è PREFIX: –∏—â–µ–º –º–æ–º–µ–Ω—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û —É—à–ª–∞ –∏–∑ –∑–æ–Ω—ã
            # PREFIX - —ç—Ç–æ –∑–æ–Ω–∞ –¥–ª—è —à–æ—Ä—Ç–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤, –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–∫–∞ –µ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç—ã –≤ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å
            consecutive_breaks = 0
            
            for i in range(prefix_start_idx + 1, min(data_len, prefix_start_idx + 100)):
                candle = candle_data[i]
                
                # –°—á–∏—Ç–∞–µ–º consecutive breaks - —Å–≤–µ—á–∏ –∑–∞–∫—Ä—ã–≤—à–∏–µ—Å—è –Ω–∏–∂–µ PREFIX
                if candle.close < fix_low_price:
                    consecutive_breaks += 1
                elif candle.high > fix_low_price:  
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ PREFIX - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    consecutive_breaks = 0
                
                # PREFIX –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ 10 —Å–≤–µ—á–µ–π –ø–æ–¥—Ä—è–¥ –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏—Å—å –≤ –∑–æ–Ω—É
                if consecutive_breaks >= 10:
                    prefix_end_idx = i
                    print(f"üéØ PREFIX –∫–æ–Ω–µ—Ü –Ω–∞–π–¥–µ–Ω: —Å–≤–µ—á–∞ #{i} - 10 —Å–≤–µ—á–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ PREFIX –∑–æ–Ω—É")
                    break
            
            prefix_width_candles = prefix_end_idx - prefix_start_idx
        else:
            # Fallback –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            prefix_start_idx = data_len - 15
            prefix_width_candles = fix_end_idx - fix_start_idx  # —à–∏—Ä–∏–Ω–∞ —Ä–∞–≤–Ω–∞ FIX
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ PREFIX –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã canvas
        if prefix_start_idx >= data_len:
            prefix_start_idx = data_len - 8  # –æ—Ç—Å—Ç—É–ø–∞–µ–º –Ω–∞–∑–∞–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            prefix_width_candles = 4
            
        prefix_left = self.margin_left + (prefix_start_idx + 0.5) * chart_width / data_len
        prefix_right = self.margin_left + (prefix_start_idx + prefix_width_candles + 0.5) * chart_width / data_len
        
        prefix_top = price_to_y(prefix_high)
        prefix_bottom = price_to_y(prefix_low)
        
        # –†–∏—Å—É–µ–º PREFIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (—Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—É—Ä, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫–∞–∫ FIX)
        prefix_rect = self.canvas.create_rectangle(
            prefix_left, prefix_top, prefix_right, prefix_bottom,
            outline="#00FF88", width=3, fill="", tags="prefix_area"
        )
        self._prefix_items = getattr(self, '_prefix_items', [])
        self._prefix_items.append(prefix_rect)
        
        # –ú–µ—Ç–∫–∞ PREFIX
        prefix_label = self.canvas.create_text(
            prefix_left - 35, prefix_top,
            text="PREFIX", fill="#00FF88", font=("Arial", 10, "bold"), tags="prefix_area"
        )
        self._prefix_items.append(prefix_label)
        
        print(f"‚úÖ PREFIX –æ–±–ª–∞—Å—Ç—å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∞: {prefix_low:.2f}-{prefix_high:.2f}")
        
    def draw_take_profit_area(self, take_profit_area, candle_data):
        """–†–∏—Å—É–µ—Ç TAKE PROFIT –æ–±–ª–∞—Å—Ç—å - —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π (—Ñ–ª—ç—Ç –ø–µ—Ä–µ–¥ FIX)"""
        if not take_profit_area or not candle_data:
            return
            
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏
        tp_start_idx, tp_end_idx, tp_low_price, tp_high_price = take_profit_area[:4]
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–ß–ù–û –¢–ê–ö–ò–ï –ñ–ï –ö–û–û–†–î–ò–ù–ê–¢–´ –ö–ê–ö –í ChartRenderer
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        chart_width = canvas_width - self.margin_left - self.margin_right
        chart_height = canvas_height - self.margin_top - self.margin_bottom
        data_len = len(candle_data)
        
        def price_to_y(price):
            if hasattr(candle_data[0], 'high'):
                highs = [c.high for c in candle_data]
                lows = [c.low for c in candle_data]
            else:
                highs = candle_data['high'].values if hasattr(candle_data, 'high') else [c.high for c in candle_data]
                lows = candle_data['low'].values if hasattr(candle_data, 'low') else [c.low for c in candle_data]
                
            min_price = float(min(lows))
            max_price = float(max(highs))
            price_range = max_price - min_price
            if price_range == 0:
                price_range = max_price * 0.01
            return self.margin_top + (max_price - price) * chart_height / price_range
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏ (–¥–≤–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã) 
        tp_left = self.margin_left + (tp_start_idx + 0.5) * chart_width / data_len
        tp_right = self.margin_left + (tp_end_idx + 0.5) * chart_width / data_len
        tp_top = price_to_y(tp_high_price)
        tp_bottom = price_to_y(tp_low_price)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        tp_middle = (tp_top + tp_bottom) / 2  # —Å—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è
        tp_center_x = (tp_left + tp_right) / 2  # —Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        
        # –û–±–ª–∞—Å—Ç—å 1: –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å TAKE PROFIT (–±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è)
        tp_rect_1 = self.canvas.create_rectangle(
            tp_left, tp_top, tp_right, tp_middle,
            outline="#FF8C00", width=2, fill="", tags="take_profit_area_1"
        )
        self._take_profit_items.append(tp_rect_1)
        
        # –û–±–ª–∞—Å—Ç—å 2: –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å TAKE PROFIT (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è)
        tp_rect_2 = self.canvas.create_rectangle(
            tp_left, tp_middle, tp_right, tp_bottom,
            outline="#FFA500", width=2, fill="", tags="take_profit_area_2", dash=(5, 3)
        )
        self._take_profit_items.append(tp_rect_2)
        
        # –°–≤—è–∑—ã–≤–∞—é—â–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É –æ–±–ª–∞—Å—Ç—è–º–∏
        tp_center_line = self.canvas.create_line(
            tp_center_x, tp_top, tp_center_x, tp_bottom,
            fill="#FF8C00", width=1, dash=(3, 2)
        )
        self._take_profit_items.append(tp_center_line)
        
        # –ú–µ—Ç–∫–∞ TAKE PROFIT
        tp_label = self.canvas.create_text(
            tp_left - 40, tp_middle,
            text="TAKE\nPROFIT", fill="#FF8C00", font=("Arial", 9, "bold"), tags="take_profit_area"
        )
        self._take_profit_items.append(tp_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–≥–æ–ª–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self._add_take_profit_handles(tp_left, tp_top, tp_right, tp_bottom)
        
        print(f"‚úÖ TAKE PROFIT –æ–±–ª–∞—Å—Ç—å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∞: {tp_low_price:.2f}-{tp_high_price:.2f}")
        
    def _add_take_profit_handles(self, left, top, right, bottom):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–≥–æ–ª–∫–∏ –¥–ª—è TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏"""
        handle_size = 3
        
        # –ß–µ—Ç—ã—Ä–µ —É–≥–ª–∞
        handles = [
            (left, top),      # top-left
            (right, top),     # top-right  
            (left, bottom),   # bottom-left
            (right, bottom)   # bottom-right
        ]
        
        for x, y in handles:
            handle = self.canvas.create_rectangle(
                x - handle_size, y - handle_size,
                x + handle_size, y + handle_size,
                fill="#FF8C00", outline="white", width=1, tags="take_profit_handle"
            )
            self._take_profit_items.append(handle)
            
    def detect_take_profit_area(self, candle_data, fix_area):
        """–î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç—å TAKE PROFIT - —Ñ–ª—ç—Ç –ø–µ—Ä–µ–¥ FIX –∑–æ–Ω–æ–π"""
        if not candle_data or not fix_area:
            return None
            
        fix_start_idx, fix_end_idx, fix_low, fix_high = fix_area[:4]
        
        # –ò—â–µ–º –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏/—Ñ–ª—ç—Ç–∞ –ü–ï–†–ï–î –¥–≤–∏–∂–µ–Ω–∏–µ–º –≤ FIX
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ –Ω–∞—á–∞–ª–∞ FIX –æ–±–ª–∞—Å—Ç–∏
        search_end_idx = max(0, fix_start_idx - 5)  # –Ω–µ –±–ª–∏–∂–µ 5 —Å–≤–µ—á–µ–π –∫ FIX
        
        if search_end_idx < 10:  # –º–∏–Ω–∏–º—É–º 10 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            return None
            
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ñ–ª—ç—Ç–∞
        min_consolidation_candles = 8  # –º–∏–Ω–∏–º—É–º 8 —Å–≤–µ—á–µ–π –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        max_volatility_threshold = 0.01  # –º–∞–∫—Å–∏–º—É–º 1% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–ª—ç—Ç–∞
        
        best_flat_area = None
        best_quality_score = 0
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        for start_idx in range(10, search_end_idx - min_consolidation_candles):
            for width in range(min_consolidation_candles, min(25, search_end_idx - start_idx)):
                end_idx = start_idx + width
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ
                consolidation_quality = self._analyze_consolidation_quality(
                    candle_data, start_idx, end_idx
                )
                
                if consolidation_quality > best_quality_score and consolidation_quality > 0.6:
                    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏
                    highs = [candle_data[i].high for i in range(start_idx, end_idx)]
                    lows = [candle_data[i].low for i in range(start_idx, end_idx)]
                    
                    tp_high = max(highs)
                    tp_low = min(lows)
                    
                    best_flat_area = (start_idx, end_idx - 1, tp_low, tp_high)
                    best_quality_score = consolidation_quality
                    
        if best_flat_area:
            start_idx, end_idx, tp_low, tp_high = best_flat_area
            print(f"‚úÖ TAKE PROFIT –æ–±–ª–∞—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞: —Å–≤–µ—á–∏ {start_idx}-{end_idx}, —Ü–µ–Ω—ã {tp_low:.2f}-{tp_high:.2f}, –∫–∞—á–µ—Å—Ç–≤–æ {best_quality_score:.2f}")
            
        return best_flat_area
        
    def _analyze_consolidation_quality(self, candle_data, start_idx, end_idx):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        if end_idx - start_idx < 5:
            return 0
            
        # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        closes = [candle_data[i].close for i in range(start_idx, end_idx)]
        highs = [candle_data[i].high for i in range(start_idx, end_idx)]
        lows = [candle_data[i].low for i in range(start_idx, end_idx)]
        
        avg_close = sum(closes) / len(closes)
        max_high = max(highs)
        min_low = min(lows)
        range_size = max_high - min_low
        
        if range_size == 0:
            return 0
            
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        # 1. –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Ü–µ–Ω—ã –±–ª–∏–∑–∫–æ –∫ —Å—Ä–µ–¥–Ω–µ–π)
        volatility_score = 0
        for close in closes:
            deviation = abs(close - avg_close) / avg_close
            if deviation < 0.005:  # –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–Ω–µ–µ 0.5%
                volatility_score += 1
        volatility_score = volatility_score / len(closes)
        
        # 2. –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω (–±–µ–∑ —Ä–µ–∑–∫–∏—Ö –≤—ã–±—Ä–æ—Å–æ–≤)
        range_score = 0
        middle_price = (max_high + min_low) / 2
        for close in closes:
            if abs(close - middle_price) / range_size < 0.3:  # –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 30% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                range_score += 1
        range_score = range_score / len(closes)
        
        # 3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration_score = min(1.0, (end_idx - start_idx) / 15)  # –æ–ø—Ç–∏–º—É–º 15 —Å–≤–µ—á–µ–π
        
        # –û–±—â–∏–π —Å–∫–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = (volatility_score * 0.4 + range_score * 0.4 + duration_score * 0.2)
        
        return quality_score
        
    def clear_pattern(self):
        """–û—á–∏—Å—Ç–∫–∞ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞"""
        for items in [self._fix_items, self._ray_items, 
                     self._hi_pattern_items, self._loy_fix_items,
                     getattr(self, '_prefix_items', []),  # –¥–æ–±–∞–≤–ª—è–µ–º PREFIX
                     self._take_profit_items]:  # –¥–æ–±–∞–≤–ª—è–µ–º TAKE PROFIT
            for item in items:
                self.canvas.delete(item)
            items.clear()
        
    def update_canvas_size(self, width, height):
        """1=>2;5=85 @07<5@>2 canvas"""
        self.chart_width = min(width - 100, 2000)
        self.chart_height = min(height - 100, 800)