#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π FPF Bot —Å GitHub
–ö–æ–º–∞–Ω–¥–∞: "–æ–±–Ω–æ–≤–∏ –±–∞–∑—É" - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
"""

import subprocess
import os
import json
from datetime import datetime
from pathlib import Path

class KnowledgeBaseSync:
    def __init__(self):
        self.project_root = Path("/Users/sashaflok/fpf_bot")
        self.baza_path = self.project_root / "baza"
        self.repo_url = "https://github.com/Alex-Flok-SAN/-tmp-fpf-bot-knowledge-base-.git"
        self.temp_repo = Path("/tmp/fpf-knowledge-sync")
        
    def sync_to_github(self, commit_message=None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É —Å GitHub"""
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not commit_message:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
            commit_message = f"üìö Knowledge base update - {timestamp}"
            
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
            
            # –®–∞–≥ 1: –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            self._clone_repo()
            
            # –®–∞–≥ 2: –ö–æ–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            self._copy_updated_files()
            
            # –®–∞–≥ 3: –ö–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self._commit_and_push(commit_message)
            
            # –®–∞–≥ 4: –û—á–∏—Å—Ç–∫–∞
            self._cleanup()
            
            print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ GitHub!")
            print(f"üîó {self.repo_url.replace('.git', '')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            self._cleanup()
            raise
            
    def _clone_repo(self):
        """–ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        print("üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.temp_repo.exists():
            subprocess.run(["rm", "-rf", str(self.temp_repo)], check=True)
            
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º
        subprocess.run([
            "git", "clone", self.repo_url, str(self.temp_repo)
        ], check=True, capture_output=True)
        
    def _copy_updated_files(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        print("üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É baza
        subprocess.run([
            "cp", "-r", str(self.baza_path), str(self.temp_repo / "baza")
        ], check=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º PROJECT_STRUCTURE.md –µ—Å–ª–∏ –µ—Å—Ç—å
        project_structure = self.project_root / "PROJECT_STRUCTURE.md"
        if project_structure.exists():
            subprocess.run([
                "cp", str(project_structure), str(self.temp_repo)
            ], check=True)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º README —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π
        self._update_readme()
        
    def _update_readme(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç README —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π"""
        readme_path = self.temp_repo / "README.md"
        if readme_path.exists():
            content = readme_path.read_text()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
            current_date = datetime.now().strftime('%Y-%m-%d')
            updated_content = content.replace(
                "*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: $(date '+%Y-%m-%d')*",
                f"*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_date}*"
            )
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –∑–∞–º–µ–Ω—è–µ–º
            import re
            updated_content = re.sub(
                r'\*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: \d{4}-\d{2}-\d{2}\*',
                f"*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_date}*",
                updated_content
            )
            
            readme_path.write_text(updated_content)
            
    def _commit_and_push(self, message):
        """–ö–æ–º–º–∏—Ç–∏—Ç –∏ –ø—É—à–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        print("üì§ –ö–æ–º–º–∏—Ç –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        os.chdir(str(self.temp_repo))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        subprocess.run(["git", "add", "."], check=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        result = subprocess.run(
            ["git", "diff", "--staged", "--quiet"], 
            capture_output=True
        )
        
        if result.returncode == 0:
            print("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
            return
            
        # –ö–æ–º–º–∏—Ç–∏–º
        full_message = f"""{message}

üöÄ Generated with Claude Code
https://claude.ai/code

Co-Authored-By: Claude <noreply@anthropic.com>"""
        
        subprocess.run([
            "git", "commit", "-m", full_message
        ], check=True)
        
        # –ü—É—à–∏–º
        subprocess.run(["git", "push"], check=True)
        
    def _cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        if self.temp_repo.exists():
            subprocess.run(["rm", "-rf", str(self.temp_repo)], check=False)
            
    def get_changes_summary(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ"""
        changes = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–µ–¥–∞–≤–Ω–æ
        import time
        cutoff_time = time.time() - (24 * 60 * 60)  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        
        for file_path in self.baza_path.glob("*.txt"):
            if file_path.stat().st_mtime > cutoff_time:
                changes.append(f"- {file_path.name}")
                
        return changes


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import sys
    
    sync = KnowledgeBaseSync()
    
    if len(sys.argv) > 1:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
        commit_message = " ".join(sys.argv[1:])
        sync.sync_to_github(commit_message)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        changes = sync.get_changes_summary()
        
        if changes:
            print("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö:")
            for change in changes:
                print(f"  {change}")
        else:
            print("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")
            
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        confirm = input("\nü§î –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π —Å GitHub? (y/n): ")
        if confirm.lower() in ['y', 'yes', '–¥–∞', '–¥', '']:
            sync.sync_to_github()
        else:
            print("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


if __name__ == "__main__":
    main()