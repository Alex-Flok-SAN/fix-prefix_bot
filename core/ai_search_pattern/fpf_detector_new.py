#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô FPF Pattern Detector - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ OCR
–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç OCR —Å–≤–µ—á—É - –æ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –¶–ï–ù–¢–†–û–ú FIX –æ–±–ª–∞—Å—Ç–∏
"""
from typing import List, Dict, Optional, Any, Tuple
from dataclasses import dataclass


@dataclass
class CandleData:
    """–î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏"""
    timestamp: int
    open: float
    high: float 
    low: float
    close: float
    volume: float = 0
    
    @classmethod
    def from_tuple(cls, data: tuple):
        """–°–æ–∑–¥–∞–µ—Ç –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ (timestamp, open, high, low, close, volume)"""
        return cls(
            timestamp=int(data[0]),
            open=float(data[1]),
            high=float(data[2]), 
            low=float(data[3]),
            close=float(data[4]),
            volume=float(data[5]) if len(data) > 5 else 0
        )


@dataclass 
class FpfPattern:
    """–ù–∞–π–¥–µ–Ω–Ω—ã–π FPF –ø–∞—Ç—Ç–µ—Ä–Ω"""
    # FIX –æ–±–ª–∞—Å—Ç—å
    fix_start_idx: int
    fix_end_idx: int
    fix_high: float
    fix_low: float
    
    # –õ–û–ô-FIX
    loy_fix_idx: int
    loy_fix_price: float
    
    # HI-PATTERN
    hi_pattern_idx: int
    hi_pattern_price: float
    
    # RAY –≤–∞–ª–∏–¥–∞—Ü–∏—è
    ray_price: float
    ray_validated: bool
    
    # PREFIX –æ–±–ª–∞—Å—Ç—å  
    prefix_start_price: float
    prefix_end_price: float
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    confidence: float
    ocr_candle_idx: Optional[int] = None


class FpfPatternDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä FPF –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self, debug: bool = True):
        self.debug = debug
        
    def detect_pattern(self, candles: List[Any], ocr_candle_idx: Optional[int] = None) -> Optional[FpfPattern]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π (–∫–æ—Ä—Ç–µ–∂–∏ –∏–ª–∏ –æ–±—ä–µ–∫—Ç—ã)
            ocr_candle_idx: –ò–Ω–¥–µ–∫—Å —Å–≤–µ—á–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ OCR (–¶–ï–ù–¢–† FIX)
            
        Returns:
            FpfPattern –∏–ª–∏ None –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if len(candles) < 50:
            self._log("Not enough candles for pattern detection")
            return None
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        candlesticks = self._convert_candles(candles)
        
        self._log(f"Analyzing {len(candlesticks)} candles, OCR candle: {ocr_candle_idx}")
        
        # –®–ê–ì 1: –ù–∞—Ö–æ–¥–∏–º FIX –æ–±–ª–∞—Å—Ç—å - –µ—Å–ª–∏ –µ—Å—Ç—å OCR, —Ç–æ OCR = –¶–ï–ù–¢–† FIX
        fix_area = None
        if ocr_candle_idx is not None:
            fix_area = self._find_fix_around_ocr(candlesticks, ocr_candle_idx)
            
        if not fix_area:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥
            fix_area = self._find_fix_area(candlesticks, ocr_candle_idx)
            if not fix_area:
                self._log("No FIX area found")
                return None
        
        fix_start_idx, fix_end_idx, fix_center, fix_high, fix_low = fix_area
        self._log(f"‚úÖ FIX area: indices {fix_start_idx}-{fix_end_idx}, prices {fix_low:.2f}-{fix_high:.2f}")
        
        # –®–ê–ì 2: –ò—â–µ–º HI-PATTERN —Å–ø—Ä–∞–≤–∞ –æ—Ç FIX
        hi_pattern_data = self._find_hi_pattern_after_fix(candlesticks, fix_end_idx)
        if not hi_pattern_data:
            self._log("No HI-PATTERN found after FIX")
            return None
            
        hi_pattern_idx, hi_pattern_price = hi_pattern_data
        self._log(f"‚úÖ HI-PATTERN: index {hi_pattern_idx}, price {hi_pattern_price:.2f}")
        
        # –®–ê–ì 3: –ò—â–µ–º LOY-FIX –º–µ–∂–¥—É FIX –∏ HI-PATTERN
        loy_fix_data = self._find_loy_fix_between(candlesticks, fix_end_idx, hi_pattern_idx)
        if not loy_fix_data:
            self._log("No LOY-FIX found between FIX and HI-PATTERN")
            return None
            
        loy_fix_idx, loy_fix_price = loy_fix_data
        self._log(f"‚úÖ LOY-FIX: index {loy_fix_idx}, price {loy_fix_price:.2f}")
        
        # –®–ê–ì 4: –í–∞–ª–∏–¥–∞—Ü–∏—è RAY (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –æ—Ç LOY-FIX)
        ray_price = loy_fix_price
        ray_validated = self._validate_ray(candlesticks, loy_fix_idx, hi_pattern_idx, ray_price)
        
        self._log(f"‚úÖ RAY validation: {ray_validated}, price {ray_price:.2f}")
        
        # –®–ê–ì 5: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PREFIX –æ–±–ª–∞—Å—Ç—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ RAY –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω)
        if ray_validated:
            prefix_start_price = fix_low
            prefix_end_price = fix_high
        else:
            prefix_start_price = 0
            prefix_end_price = 0
            
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        pattern = FpfPattern(
            fix_start_idx=fix_start_idx,
            fix_end_idx=fix_end_idx,
            fix_high=fix_high,
            fix_low=fix_low,
            loy_fix_idx=loy_fix_idx,
            loy_fix_price=loy_fix_price,
            hi_pattern_idx=hi_pattern_idx,
            hi_pattern_price=hi_pattern_price,
            ray_price=ray_price,
            ray_validated=ray_validated,
            prefix_start_price=prefix_start_price,
            prefix_end_price=prefix_end_price,
            confidence=0.85,  # –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            ocr_candle_idx=ocr_candle_idx
        )
        
        self._log(f"FPF Pattern detected with confidence {pattern.confidence:.2f}")
        return pattern
        
    def _convert_candles(self, candles: List[Any]) -> List[CandleData]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ CandleData"""
        result = []
        for candle in candles:
            if isinstance(candle, tuple):
                result.append(CandleData.from_tuple(candle))
            elif hasattr(candle, 'high'):
                result.append(candle)
            else:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                result.append(CandleData(
                    timestamp=candle.get('timestamp', 0),
                    open=candle['open'],
                    high=candle['high'], 
                    low=candle['low'],
                    close=candle['close'],
                    volume=candle.get('volume', 0)
                ))
        return result
        
    def _find_fix_around_ocr(self, candles: List[CandleData], ocr_idx: int) -> Optional[Tuple[int, int, float, float, float]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –í–ï–†–•–ù–ï–ì–û –ü–õ–ê–¢–û FIX –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ OCR —Å–≤–µ—á–∏
        OCR —Å–≤–µ—á–∞ = –¶–ï–ù–¢–† FIX –æ–±–ª–∞—Å—Ç–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –ü–õ–û–°–ö–ê–Ø —á–∞—Å—Ç—å –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ
        """
        self._log(f"üéØ Finding TOP PLATEAU FIX around OCR candle {ocr_idx}")
        
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ OCR
        search_window = 10  # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏–∫–∞
        search_start = max(0, ocr_idx - search_window)  
        search_end = min(len(candles), ocr_idx + search_window)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º –≤ –æ–±–ª–∞—Å—Ç–∏
        max_price = 0
        for i in range(search_start, search_end):
            if candles[i].high > max_price:
                max_price = candles[i].high
                
        self._log(f"Local max price around OCR: {max_price:.4f}")
        
        # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫ –ø–ª–∞—Ç–æ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
        plateau_tolerance = max_price * 0.015  # —É–≤–µ–ª–∏—á–µ–Ω–æ: 1.5% –æ—Ç –ø–∏–∫–∞
        min_plateau_price = max_price - plateau_tolerance
        
        self._log(f"Looking for plateau above {min_plateau_price:.4f} (tolerance {plateau_tolerance:.4f})")
        
        best_fix = None
        best_score = 0
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–ª–∞—Ç–æ
        for half_window in range(1, 6):  # –º–µ–Ω—å—à–∏–µ –æ–∫–Ω–∞ –¥–ª—è –ø–ª–∞—Ç–æ
            start_idx = max(0, ocr_idx - half_window)
            end_idx = min(len(candles) - 1, ocr_idx + half_window)
            
            # –î–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å OCR —Å–≤–µ—á—É
            if not (start_idx <= ocr_idx <= end_idx):
                continue
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ç–æ –æ–∫–Ω–æ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–ª–∞—Ç–æ
            window_candles = candles[start_idx:end_idx+1]
            if len(window_candles) < 2:
                continue
                
            # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø–ª–∞—Ç–æ
            plateau_candles = 0
            for candle in window_candles:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–≤–µ—á–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–ª–∞—Ç–æ (–±–æ–ª–µ–µ –º—è–≥–∫–æ)
                if candle.close >= min_plateau_price:
                    plateau_candles += 1
                    
            # –¢—Ä–µ–±—É–µ–º —á—Ç–æ–±—ã –º–∏–Ω–∏–º—É–º 70% —Å–≤–µ—á–µ–π –±—ã–ª–∏ –≤ –ø–ª–∞—Ç–æ
            plateau_ratio = plateau_candles / len(window_candles)
            if plateau_ratio < 0.7:
                self._log(f"Window {start_idx}-{end_idx}: only {plateau_ratio*100:.0f}% candles in plateau")
                continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–æ
            highs = [c.high for c in window_candles]
            lows = [c.low for c in window_candles]
            
            fix_high = max(highs)
            fix_low = min(lows)
            fix_center = (fix_high + fix_low) / 2
            fix_height = fix_high - fix_low
            
            # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–ª–∞—Ç–æ
            volatility = fix_height / fix_center if fix_center > 0 else 1
            if volatility > 0.025:  # —Å–º—è–≥—á–µ–Ω–æ: –º–∞–∫—Å–∏–º—É–º 2.5% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                self._log(f"Window {start_idx}-{end_idx}: too volatile {volatility*100:.2f}%")
                continue
                
            # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –ø–∏–∫—É
            distance_from_peak = abs(fix_center - max_price) / max_price
            if distance_from_peak > 0.02:  # —Å–º—è–≥—á–µ–Ω–æ: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2% –æ—Ç –ø–∏–∫–∞
                self._log(f"Window {start_idx}-{end_idx}: too far from peak {distance_from_peak*100:.2f}%")
                continue
                
            # –û—Ü–µ–Ω–∫–∞ –ø–ª–∞—Ç–æ
            score = 100 - (volatility * 5000)  # –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–æ –∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            
            # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–∏–∫—É
            score += 50 * (1 - distance_from_peak * 100)  # —á–µ–º –±–ª–∏–∂–µ –∫ –ø–∏–∫—É, —Ç–µ–º –ª—É—á—à–µ
            
            # –ë–æ–Ω—É—Å –∑–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ OCR
            center_pos = (start_idx + end_idx) / 2
            ocr_centrality = 1 - abs(center_pos - ocr_idx) / max(half_window, 1)
            score += 30 * ocr_centrality  # –¥–æ 30 –±–∞–ª–ª–æ–≤ –∑–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å
            
            # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø–ª–∞—Ç–æ (3-6 —Å–≤–µ—á–µ–π)
            window_size = end_idx - start_idx + 1
            if 3 <= window_size <= 6:
                score += 20
            elif window_size <= 4:
                score += 15
                
            self._log(f"TOP PLATEAU candidate {start_idx}-{end_idx}: volatility={volatility*100:.2f}%, peak_dist={distance_from_peak*100:.2f}%, score={score:.1f}")
                
            if score > best_score:
                best_score = score
                best_fix = (start_idx, end_idx, fix_center, fix_high, fix_low)
        
        if best_fix and best_score >= 50:  # —Å–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
            start, end, center, high, low = best_fix
            self._log(f"‚úÖ TOP PLATEAU FIX found: {start}-{end}, prices {low:.2f}-{high:.2f}, score={best_score:.1f}")
            return best_fix
        
        self._log("‚ùå No good TOP PLATEAU found around OCR")
        return None
        
    def _find_hi_pattern_after_fix(self, candles: List[CandleData], fix_end_idx: int) -> Optional[Tuple[int, float]]:
        """–ò—â–µ—Ç HI-PATTERN —Å–ø—Ä–∞–≤–∞ –æ—Ç FIX –æ–±–ª–∞—Å—Ç–∏"""
        search_start = fix_end_idx + 1
        search_end = min(len(candles), fix_end_idx + 50)  # –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
        
        max_price = 0
        hi_pattern_idx = None
        
        for i in range(search_start, search_end):
            if candles[i].high > max_price:
                max_price = candles[i].high
                hi_pattern_idx = i
                
        if hi_pattern_idx:
            return (hi_pattern_idx, max_price)
        return None
        
    def _find_loy_fix_between(self, candles: List[CandleData], fix_end_idx: int, hi_pattern_idx: int) -> Optional[Tuple[int, float]]:
        """–ò—â–µ—Ç LOY-FIX –º–µ–∂–¥—É FIX –∏ HI-PATTERN"""
        search_start = fix_end_idx + 1
        search_end = hi_pattern_idx
        
        min_price = float('inf')
        loy_fix_idx = None
        
        for i in range(search_start, search_end):
            if candles[i].low < min_price:
                min_price = candles[i].low
                loy_fix_idx = i
                
        if loy_fix_idx:
            return (loy_fix_idx, min_price)
        return None
        
    def _find_fix_area(self, candles: List[CandleData], ocr_idx: Optional[int]) -> Optional[Tuple[int, int, float, float, float]]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ FIX –æ–±–ª–∞—Å—Ç–∏"""
        if ocr_idx is None:
            # –ï—Å–ª–∏ –Ω–µ—Ç OCR, –∏—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            search_start = len(candles) // 3
            search_end = int(len(candles) * 0.9)
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å OCR, –∏—â–µ–º —Ä—è–¥–æ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–≤–µ—á–æ–π
            search_start = max(0, ocr_idx - 20)
            search_end = min(len(candles), ocr_idx + 20)
            
        self._log(f"Backup search for FIX area between {search_start} and {search_end}")
        
        best_fix = None
        best_score = 0
        
        # –ò—â–µ–º –æ–∫–Ω–∞ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        for window_size in range(3, 12):  # –æ—Ç 3 –¥–æ 11 —Å–≤–µ—á–µ–π
            for start_idx in range(search_start, search_end - window_size):
                end_idx = start_idx + window_size
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ç–æ –æ–∫–Ω–æ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π FIX
                score = self._score_fix_area(candles, start_idx, end_idx, ocr_idx)
                
                if score > best_score:
                    best_score = score
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FIX –æ–±–ª–∞—Å—Ç–∏
                    window_candles = candles[start_idx:end_idx]
                    fix_high = max(c.high for c in window_candles)
                    fix_low = min(c.low for c in window_candles)
                    center_price = (fix_high + fix_low) / 2
                    
                    best_fix = (start_idx, end_idx, center_price, fix_high, fix_low)
        
        if best_fix and best_score > 0.8:
            return best_fix
            
        return None
        
    def _score_fix_area(self, candles: List[CandleData], start_idx: int, end_idx: int, ocr_idx: Optional[int]) -> float:
        """–û—Ü–µ–Ω–∫–∞ FIX –æ–±–ª–∞—Å—Ç–∏"""
        window_candles = candles[start_idx:end_idx]
        if len(window_candles) < 3:
            return 0
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        highs = [c.high for c in window_candles]
        lows = [c.low for c in window_candles]
        
        fix_high = max(highs)
        fix_low = min(lows)
        fix_center = (fix_high + fix_low) / 2
        fix_height = fix_high - fix_low
        
        volatility = fix_height / fix_center if fix_center > 0 else 1
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ (–Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –≤—ã—Å–æ–∫–∏–π score)
        if volatility > 0.025:  # —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            return 0
            
        score = 1.0 - volatility * 20  # —á–µ–º –Ω–∏–∂–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —Ç–µ–º –≤—ã—à–µ score
        
        # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ OCR
        if ocr_idx is not None:
            center_pos = (start_idx + end_idx) / 2
            distance = abs(center_pos - ocr_idx)
            if distance <= 5:
                score += 0.3
            elif distance <= 10:
                score += 0.2
                
        return max(0, score)
        
    def _validate_ray(self, candles: List[CandleData], loy_fix_idx: int, hi_pattern_idx: int, ray_price: float) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è RAY - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ü–µ–Ω–∞ –Ω–µ –ø—Ä–æ–±–∏–≤–∞–ª–∞ —É—Ä–æ–≤–µ–Ω—å LOY-FIX"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ—Å–ª–µ HI-PATTERN
        check_start = hi_pattern_idx + 1
        check_end = min(len(candles), hi_pattern_idx + 30)
        
        for i in range(check_start, check_end):
            if candles[i].low < ray_price:
                return False  # RAY –ø—Ä–æ–±–∏—Ç
                
        return True  # RAY –Ω–µ –ø—Ä–æ–±–∏—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        
    def _log(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if self.debug:
            print(f"[FPF] {message}")