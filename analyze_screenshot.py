#!/usr/bin/env python3
"""
–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
Sun 18-05-2025 12:00 BNBUSDT 15m

–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:
- Open: 647.21
- High: 648.55  
- Low: 647.10
- Close: 648.02
- Change: +0.81 (+0.13%)
"""

import sys
import pandas as pd
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from core.ai_search_pattern.fpf_detector_new import FpfPatternDetector, CandleData

def load_bnb_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ BNBUSDT"""
    data_file = Path("data_dl/BNBUSDT_M15_2025-05.csv")
    if not data_file.exists():
        print(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
        
    df = pd.read_csv(data_file)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç CandleData
    candlesticks = []
    for _, row in df.iterrows():
        candle = CandleData(
            timestamp=row['ts_open_ms'],
            open=row['open'],
            high=row['high'], 
            low=row['low'],
            close=row['close'],
            volume=row['volume']
        )
        candlesticks.append(candle)
    
    return candlesticks

def find_ocr_candle(candlesticks):
    """–ù–∞—Ö–æ–¥–∏–º —Å–≤–µ—á—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂—É—é –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    screenshot_data = {
        'open': 647.21,
        'high': 648.55,
        'low': 647.10, 
        'close': 648.02
    }
    
    print(f"üéØ –ò—â–µ–º —Å–≤–µ—á—É –ø–æ—Ö–æ–∂—É—é –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç: O={screenshot_data['open']}, H={screenshot_data['high']}, L={screenshot_data['low']}, C={screenshot_data['close']}")
    
    # –ò—â–µ–º —Å–≤–µ—á—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º
    best_idx = None
    best_score = float('inf')
    
    for i, candle in enumerate(candlesticks):
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º OHLC
        score = (
            abs(candle.open - screenshot_data['open']) +
            abs(candle.high - screenshot_data['high']) +
            abs(candle.low - screenshot_data['low']) +
            abs(candle.close - screenshot_data['close'])
        )
        
        if score < best_score:
            best_score = score
            best_idx = i
            
    if best_idx is not None:
        candle = candlesticks[best_idx]
        from datetime import datetime
        import pytz
        actual_dt = datetime.fromtimestamp(candle.timestamp / 1000, tz=pytz.UTC)
        print(f"üéØ –ù–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∞—è —Å–≤–µ—á–∞: #{best_idx}")
        print(f"   –í—Ä–µ–º—è: {actual_dt.strftime('%Y-%m-%d %H:%M')} UTC")
        print(f"   OHLC: O={candle.open}, H={candle.high}, L={candle.low}, C={candle.close}")
        print(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {best_score:.2f}")
        
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º:")
        for field, expected in screenshot_data.items():
            actual = getattr(candle, field)
            diff = abs(actual - expected)
            status = "‚úÖ" if diff < 2.0 else "‚ùå"
            print(f"   {field.upper()}: {actual:.2f} vs {expected:.2f} (Œî{diff:.2f}) {status}")
            
    return best_idx

def analyze_fpf_pattern(candlesticks, ocr_idx):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º FPF –ø–∞—Ç—Ç–µ—Ä–Ω"""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–∞...")
    
    detector = FpfPatternDetector()
    pattern = detector.detect_pattern(candlesticks, ocr_candle_idx=ocr_idx)
    
    if pattern:
        print(f"\nüéØ FPF PATTERN –ù–ê–ô–î–ï–ù!")
        print(f"   Confidence: {pattern.confidence:.2f}")
        print(f"\nüì¶ FIX –û–ë–õ–ê–°–¢–¨:")
        print(f"   –ò–Ω–¥–µ–∫—Å—ã: {pattern.fix_start_idx} - {pattern.fix_end_idx}")
        print(f"   –¶–µ–Ω—ã: {pattern.fix_low:.2f} - {pattern.fix_high:.2f}")
        
        print(f"\nüî¥ LOY-FIX:")
        print(f"   –ò–Ω–¥–µ–∫—Å: {pattern.loy_fix_idx}")
        print(f"   –¶–µ–Ω–∞: {pattern.loy_fix_price:.2f}")
        
        print(f"\nüü¢ HI-PATTERN:")
        print(f"   –ò–Ω–¥–µ–∫—Å: {pattern.hi_pattern_idx}")
        print(f"   –¶–µ–Ω–∞: {pattern.hi_pattern_price:.2f}")
        
        print(f"\n‚ö° RAY:")
        if hasattr(pattern, 'ray_validated') and pattern.ray_validated:
            print(f"   –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω: ‚úÖ")
            print(f"   –¶–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {pattern.ray_price:.2f}")
        else:
            print(f"   –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω: ‚ùå")
            
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
        print(f"\nüìç –ü–û–ó–ò–¶–ò–ò –ù–ê –ì–†–ê–§–ò–ö–ï:")
        total_candles = len(candlesticks)
        fix_pos = (pattern.fix_start_idx + pattern.fix_end_idx) / 2
        print(f"   FIX —Ü–µ–Ω—Ç—Ä: {fix_pos:.0f} / {total_candles} ({fix_pos/total_candles*100:.1f}%)")
        print(f"   LOY-FIX: {pattern.loy_fix_idx} / {total_candles} ({pattern.loy_fix_idx/total_candles*100:.1f}%)")
        print(f"   HI-PATTERN: {pattern.hi_pattern_idx} / {total_candles} ({pattern.hi_pattern_idx/total_candles*100:.1f}%)")
        
    else:
        print("‚ùå FPF –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    return pattern

def main():
    print("üöÄ –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–∞")
    print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: Sun 18-05-2025 12:00 BNBUSDT 15m")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    candlesticks = load_bnb_data()
    if not candlesticks:
        return
        
    # –ù–∞—Ö–æ–¥–∏–º OCR —Å–≤–µ—á—É
    ocr_idx = find_ocr_candle(candlesticks)
    if ocr_idx is None:
        return
        
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
    pattern = analyze_fpf_pattern(candlesticks, ocr_idx)
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()