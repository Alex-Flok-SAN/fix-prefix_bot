# # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –í–ù–ï–®–ù–ò–ú–ò –°–ò–°–¢–ï–ú–ê–ú–ò
# –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ baza.txt (—Å—Ç—Ä–æ–∫–∏ 2652-2821)
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-08-29 19:03:09

# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –í–ù–ï–®–ù–ò–ú–ò –°–ò–°–¢–ï–ú–ê–ú–ò

```python
class TelegramIntegration:
    """
    TELEGRAM –ë–û–¢ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø
    
    –§–£–ù–ö–¶–ò–ò:
    1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    2. –£–¥–∞–ª–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º  
    3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤
    4. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    
    def __init__(self, bot_token: str, chat_ids: List[int]):
        self.bot = TelegramBot(bot_token)
        self.authorized_chats = chat_ids
        self.command_handlers = self.setup_command_handlers()
        
    async def send_signal_alert(self, signal: ProcessedSignal):
        """
        –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ù–û–í–û–ú –°–ò–ì–ù–ê–õ–ï:
        
        –§–û–†–ú–ê–¢ –°–û–û–ë–©–ï–ù–ò–Ø:
        üéØ NEW SIGNAL | ETH-USDT M15 LONG
        üìä Quality: 87% | Grade: PREMIUM
        üí∞ Entry: $2,435.50 | Target: $2,467.80
        ‚è∞ Session: London-NY Overlap
        üî• Volume: 2.3x average
        
        [Accept] [Reject] [Details]
        """
        
        # –≠–º–æ–¥–∑–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        direction_emoji = "üìà" if signal.direction == 'long' else "üìâ"
        
        # –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        if signal.total_score >= 0.8:
            quality_emoji = "üî•"
        elif signal.total_score >= 0.6:
            quality_emoji = "‚≠ê"
        else:
            quality_emoji = "‚ö°"
            
        message = f"""
{quality_emoji} NEW SIGNAL | {signal.symbol} {signal.timeframe.upper()} {signal.direction.upper()}

üìä Quality: {signal.total_score:.0%} | Grade: {signal.grade.value}
üí∞ Entry: ${signal.entry_price:,.2f} | Target: ${signal.take_profit_targets[0]:,.2f}
‚ö†Ô∏è Stop: ${signal.stop_loss:,.2f} | R:R = {signal.risk_reward_ratio:.1f}
‚è∞ Session: {signal.session_info.current_session}
üìà Volume: {signal.impulse_volume_surge:.1f}x average

{direction_emoji} {signal.ai_narrative}
        """
        
        # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboard([
            [
                InlineButton("‚úÖ Accept", callback_data=f"accept_{signal.id}"),
                InlineButton("‚ùå Reject", callback_data=f"reject_{signal.id}")
            ],
            [
                InlineButton("üìà Open TV", url=signal.tradingview_url),
                InlineButton("üìã Details", callback_data=f"details_{signal.id}")
            ]
        ])
        
        for chat_id in self.authorized_chats:
            await self.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
    
    async def handle_user_feedback(self, callback_query):
        """
        –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
        """
        
        action, signal_id = callback_query.data.split('_', 1)
        
        if action == 'accept':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —Å–∏–≥–Ω–∞–ª
            await self.signal_manager.mark_signal_accepted(signal_id, callback_query.from_user.id)
            
            await self.bot.answer_callback_query(
                callback_query.id,
                text="‚úÖ Signal accepted! Tracking performance...",
                show_alert=False
            )
            
            # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await self.start_trade_tracking(signal_id)
            
        elif action == 'reject':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–∏–≥–Ω–∞–ª
            await self.signal_manager.mark_signal_rejected(signal_id, callback_query.from_user.id)
            
            await self.bot.answer_callback_query(
                callback_query.id, 
                text="‚ùå Signal rejected. Feedback recorded.",
                show_alert=False
            )
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            await self.request_rejection_reason(callback_query.message.chat.id, signal_id)

class TradingViewIntegration:
    """
    –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TRADINGVIEW
    
    –§–£–ù–ö–¶–ò–ò:
    1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
    2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –≤ TV
    3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –∏ –∑–æ–Ω
    """
    
    def generate_pattern_url(self, signal: ProcessedSignal) -> str:
        """
        –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–°–´–õ–ö–ò –ù–ê TRADINGVIEW –° –ü–ê–¢–¢–ï–†–ù–û–ú:
        
        –ü–ê–†–ê–ú–ï–¢–†–´ URL:
        - symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        - interval: —Ç–∞–π–º—Ñ—Ä–µ–π–º
        - time: —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        - range: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        
        base_url = "https://www.tradingview.com/chart/"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ Binance –≤ —Ñ–æ—Ä–º–∞—Ç TradingView
        tv_symbol = f"BINANCE:{signal.symbol.replace('-', '')}"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        tv_interval = self.convert_tf_to_tv_format(signal.timeframe)
        
        # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è TV
        pattern_time_sec = int(signal.pattern.fix_start_time.timestamp())
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL
        params = {
            'symbol': tv_symbol,
            'interval': tv_interval,
            'time': pattern_time_sec,
            'range': '300'  # –ø–æ–∫–∞–∑–∞—Ç—å 300 —Å–≤–µ—á–µ–π –≤–æ–∫—Ä—É–≥ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        }
        
        url_params = '&'.join([f"{k}={v}" for k, v in params.items()])
        return f"{base_url}?{url_params}"
    
    async def create_tv_alert(self, signal: ProcessedSignal) -> TVAlert:
        """
        –°–û–ó–î–ê–ù–ò–ï –ê–õ–ï–†–¢–ê –í TRADINGVIEW:
        
        –ò—Å–ø–æ–ª—å–∑—É–µ–º TV webhook API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        """
        
        alert_config = {
            'symbol': signal.symbol,
            'condition': f"close crosses above {signal.pattern.break_level}",
            'message': f"FPF Bot: {signal.direction.upper()} signal on {signal.symbol}",
            'frequency': 'once_per_bar',
            'expiration': signal.pattern.expected_completion_time
        }
        
        return await self.tv_api.create_alert(alert_config)
```
