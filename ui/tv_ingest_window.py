"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è TV Ingest - –æ–∫–Ω–æ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–ò–∑–≤–ª–µ—á–µ–Ω –∏–∑ tv_ingest_hybrid.py –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
"""
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import sys
import pathlib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
_here = pathlib.Path(__file__).resolve()
_proj_root = _here.parent.parent
if str(_proj_root) not in sys.path:
    sys.path.insert(0, str(_proj_root))

# Drag & Drop
try:
    from tkinterdnd2 import TkinterDnD, DND_FILES
    BaseTk = TkinterDnD.Tk
    DND_AVAILABLE = True
except Exception:
    BaseTk = tk.Tk
    DND_FILES = None
    DND_AVAILABLE = False

# PIL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
try:
    from PIL import Image, ImageTk
    PIL_AVAILABLE = True
except Exception:
    Image = None
    ImageTk = None
    PIL_AVAILABLE = False


class TVIngestWindow(BaseTk):
    """–û–∫–Ω–æ TV Ingest –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ FPF"""
    
    def __init__(self):
        super().__init__()
        self.current_data = None
        self.current_image_path = None
        
        # –ö–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –ª–æ–≥–∏–∫–∏ (–ø–∞—Ç—Ç–µ—Ä–Ω Strategy)
        self.on_image_loaded = None
        self.on_pattern_analyze = None
        self.on_fix_area_changed = None  # –ö–æ–ª–ª–±–µ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è FIX –æ–±–ª–∞—Å—Ç–∏
        self.on_take_profit_area_changed = None  # –ö–æ–ª–ª–±–µ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏
        
        self._setup_ui()
        self._setup_canvas()
        self._setup_drag_drop()
        
        print("‚úÖ Hybrid TV Ingest initialized")
        
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.title("üéØ Ultimate FPF Bot - Trading Pattern Detection")
        self.geometry("1200x800")
        
        # –í—Å–µ–≥–¥–∞ –Ω–∞–≤–µ—Ä—Ö—É
        self.attributes("-topmost", True)
        print("‚úÖ Window on top")
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar()
        self.status_var.set("Ready to analyze FPF patterns")
        
        status_frame = ttk.Frame(self)
        status_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=2)
        
        ttk.Label(status_frame, textvariable=self.status_var, 
                 font=("Arial", 9)).pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(self)
        button_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        
        ttk.Button(button_frame, text="üìÅ Load Screenshot", 
                  command=self._load_image_dialog).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(button_frame, text="üîç Analyze FPF", 
                  command=self._analyze_pattern).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(button_frame, text="üóëÔ∏è Clear Chart", 
                  command=self._clear_chart).pack(side=tk.LEFT, padx=2)
                  
    def _setup_canvas(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        self.canvas = tk.Canvas(self, bg="#1a1a1a")
        self.canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.canvas.bind("<Button-1>", self._on_canvas_click)
        self.canvas.bind("<B1-Motion>", self._on_canvas_drag)
        self.canvas.bind("<ButtonRelease-1>", self._on_canvas_release)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ FPF
        self.canvas.bind("<Configure>", self._on_canvas_configure)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self._dragging = False
        self._drag_start_x = 0
        self._drag_start_y = 0
        self._drag_item = None
        
    def _setup_drag_drop(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop —Ñ–∞–π–ª–æ–≤"""
        if DND_AVAILABLE:
            self.drop_target_register(DND_FILES)
            self.dnd_bind('<<Drop>>', self._on_drop)
            print("‚úÖ Drag & Drop enabled")
        else:
            print("‚ùå Drag & Drop not available")
            
    def _on_drop(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if hasattr(event, 'data'):
            files = self.tk.splitlist(event.data)
            if files:
                self._load_image_file(files[0])
                
    def _load_image_dialog(self):
        """–î–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        file_path = filedialog.askopenfilename(
            title="Select TradingView screenshot",
            filetypes=[
                ("Image files", "*.png *.jpg *.jpeg *.gif *.bmp"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self._load_image_file(file_path)
            
    def _load_image_file(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            self.current_image_path = file_path
            self.status(f"üì∑ Loaded: {pathlib.Path(file_path).name}")
            
            # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.on_image_loaded:
                self.on_image_loaded(file_path)
                
        except Exception as e:
            self.status(f"‚ùå Error loading image: {e}")
            messagebox.showerror("Error", f"Failed to load image: {e}")
            
    def _analyze_pattern(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        if not self.current_image_path:
            self.status("‚ùå No image loaded")
            messagebox.showwarning("Warning", "Please load a TradingView screenshot first")
            return
            
        try:
            self.status("üîç Analyzing FPF pattern...")
            # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.on_pattern_analyze:
                self.on_pattern_analyze()
            else:
                self.status("‚ùå Pattern analyzer not connected")
        except Exception as e:
            self.status(f"‚ùå Analysis error: {e}")
            messagebox.showerror("Error", f"Pattern analysis failed: {e}")
            
    def _clear_chart(self):
        """–û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        self.canvas.delete("all")
        self.status("üóëÔ∏è Chart cleared")
        
    def _on_canvas_configure(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas - –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã FPF"""
        # –ö–æ–ª–ª–±–µ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        if hasattr(self, 'on_canvas_resize') and self.on_canvas_resize:
            self.on_canvas_resize(event)
        
    def _on_canvas_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ canvas"""
        self._dragging = False
        self._drag_start_x = event.x
        self._drag_start_y = event.y
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        item = self.canvas.find_closest(event.x, event.y)[0]
        tags = self.canvas.gettags(item)
        
        if "fix_handle" in tags or "fix_area" in tags:
            self._dragging = True
            self._drag_item = item
            print(f"üéØ Started dragging FIX element: {tags}")
        elif "take_profit_handle" in tags or "take_profit_area" in tags:
            self._dragging = True
            self._drag_item = item
            print(f"üéØ Started dragging TAKE PROFIT element: {tags}")
            
    def _on_canvas_drag(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –ø–æ canvas"""
        if self._dragging and self._drag_item:
            dx = event.x - self._drag_start_x
            dy = event.y - self._drag_start_y
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ FIX –∏ TAKE PROFIT
            tags = self.canvas.gettags(self._drag_item)
            if "fix_handle" in tags:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ FIX –æ–±–ª–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ —É–≥–æ–ª–∫–∏
                self._resize_fix_area(self._drag_item, dx, dy)
                print(f"üéØ Resizing FIX area via handle: dx={dx}, dy={dy}")
            elif "fix_area" in tags:
                # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ–π FIX –æ–±–ª–∞—Å—Ç–∏ –∫–∞–∫ –≥—Ä—É–ø–ø—ã
                for item in self.canvas.find_withtag("fix_area"):
                    self.canvas.move(item, dx, dy)
                for item in self.canvas.find_withtag("fix_handle"):
                    self.canvas.move(item, dx, dy)
                print(f"üéØ Moving FIX group by dx={dx}, dy={dy}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ FIX –æ–±–ª–∞—Å—Ç–∏
                self._notify_fix_area_changed()
            elif "take_profit_handle" in tags:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ —É–≥–æ–ª–∫–∏
                self._resize_take_profit_area(self._drag_item, dx, dy)
                print(f"üéØ Resizing TAKE PROFIT area via handle: dx={dx}, dy={dy}")
            elif "take_profit_area" in tags or "take_profit_area_1" in tags or "take_profit_area_2" in tags:
                # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ–π TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏ –∫–∞–∫ –≥—Ä—É–ø–ø—ã
                for item in self.canvas.find_withtag("take_profit_area"):
                    self.canvas.move(item, dx, dy)
                for item in self.canvas.find_withtag("take_profit_area_1"):
                    self.canvas.move(item, dx, dy)
                for item in self.canvas.find_withtag("take_profit_area_2"):
                    self.canvas.move(item, dx, dy)
                for item in self.canvas.find_withtag("take_profit_handle"):
                    self.canvas.move(item, dx, dy)
                print(f"üéØ Moving TAKE PROFIT group by dx={dx}, dy={dy}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏
                self._notify_take_profit_area_changed()
            else:
                # –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                self.canvas.move(self._drag_item, dx, dy)
            
            self._drag_start_x = event.x
            self._drag_start_y = event.y
            
    def _resize_fix_area(self, handle_item, dx, dy):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ FIX –æ–±–ª–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ —É–≥–æ–ª–∫–∏"""
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ FIX –æ–±–ª–∞—Å—Ç–∏
        fix_rect = None
        for item in self.canvas.find_withtag("fix_area"):
            if self.canvas.type(item) == "rectangle":
                fix_rect = item
                break
        
        if not fix_rect:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        coords = self.canvas.coords(fix_rect)
        left, top, right, bottom = coords
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–≥–æ–ª–∫–∞
        handle_coords = self.canvas.coords(handle_item)
        handle_x = (handle_coords[0] + handle_coords[2]) / 2
        handle_y = (handle_coords[1] + handle_coords[3]) / 2
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —ç—Ç–æ —É–≥–æ–ª–æ–∫ –∏ –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–æ—Ä–æ–Ω—É
        if abs(handle_x - left) < abs(handle_x - right):  # –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            left += dx
        else:  # –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            right += dx
            
        if abs(handle_y - top) < abs(handle_y - bottom):  # –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
            top += dy
        else:  # –Ω–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
            bottom += dy
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        self.canvas.coords(fix_rect, left, top, right, bottom)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —É–≥–æ–ª–æ–∫
        self.canvas.move(handle_item, dx, dy)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–≥–æ–ª–∫–∏ –∫ –Ω–æ–≤—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        self._update_fix_handles(left, top, right, bottom, exclude_handle=handle_item)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ FIX –æ–±–ª–∞—Å—Ç–∏
        self._notify_fix_area_changed()
    
    def _update_fix_handles(self, left, top, right, bottom, exclude_handle=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —É–≥–æ–ª–∫–æ–≤ FIX –æ–±–ª–∞—Å—Ç–∏"""
        handle_size = 4
        handles_coords = [
            (left, top),      # top-left
            (right, top),     # top-right  
            (left, bottom),   # bottom-left
            (right, bottom)   # bottom-right
        ]
        
        handle_items = [item for item in self.canvas.find_withtag("fix_handle") 
                       if item != exclude_handle]
        
        for i, (x, y) in enumerate(handles_coords):
            if i < len(handle_items):
                handle = handle_items[i]
                self.canvas.coords(handle, 
                                 x - handle_size, y - handle_size,
                                 x + handle_size, y + handle_size)

    def _on_canvas_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏"""
        self._dragging = False
        self._drag_item = None
        
    def status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_var.set(message)
        self.update_idletasks()
        
    def get_canvas_size(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã canvas"""
        return self.canvas.winfo_width(), self.canvas.winfo_height()
    
    def _notify_fix_area_changed(self):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ FIX –æ–±–ª–∞—Å—Ç–∏"""
        if self.on_fix_area_changed:
            fix_coords = self._get_fix_area_coordinates()
            if fix_coords:
                self.on_fix_area_changed(fix_coords)
                
    def _notify_take_profit_area_changed(self):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏"""
        if self.on_take_profit_area_changed:
            tp_coords = self._get_take_profit_area_coordinates()
            if tp_coords:
                self.on_take_profit_area_changed(tp_coords)
    
    def _get_fix_area_coordinates(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã FIX –æ–±–ª–∞—Å—Ç–∏ –≤ canvas –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö"""
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ FIX –æ–±–ª–∞—Å—Ç–∏
        for item in self.canvas.find_withtag("fix_area"):
            if self.canvas.type(item) == "rectangle":
                coords = self.canvas.coords(item)
                if len(coords) == 4:
                    left, top, right, bottom = coords
                    return {
                        'canvas': (left, top, right, bottom),
                        'center': ((left + right) / 2, (top + bottom) / 2),
                        'size': (right - left, bottom - top)
                    }
        return None
        
    def _get_take_profit_area_coordinates(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏ –≤ canvas –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö"""
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏
        for item in self.canvas.find_withtag("take_profit_area_1"):
            if self.canvas.type(item) == "rectangle":
                coords_1 = self.canvas.coords(item)
                if len(coords_1) == 4:
                    # –ò—â–µ–º –≤—Ç–æ—Ä—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ–ª–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    for item2 in self.canvas.find_withtag("take_profit_area_2"):
                        if self.canvas.type(item2) == "rectangle":
                            coords_2 = self.canvas.coords(item2)
                            if len(coords_2) == 4:
                                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–µ –æ–±–ª–∞—Å—Ç–∏
                                left = min(coords_1[0], coords_2[0])
                                top = min(coords_1[1], coords_2[1])
                                right = max(coords_1[2], coords_2[2])
                                bottom = max(coords_1[3], coords_2[3])
                                
                                return {
                                    'canvas': (left, top, right, bottom),
                                    'center': ((left + right) / 2, (top + bottom) / 2),
                                    'size': (right - left, bottom - top),
                                    'area_1': coords_1,
                                    'area_2': coords_2
                                }
        return None
        
    def _resize_take_profit_area(self, handle_item, dx, dy):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ —É–≥–æ–ª–∫–∏"""
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ TAKE PROFIT –æ–±–ª–∞—Å—Ç–µ–π
        tp_rect_1 = None
        tp_rect_2 = None
        
        for item in self.canvas.find_withtag("take_profit_area_1"):
            if self.canvas.type(item) == "rectangle":
                tp_rect_1 = item
                break
                
        for item in self.canvas.find_withtag("take_profit_area_2"):
            if self.canvas.type(item) == "rectangle":
                tp_rect_2 = item
                break
        
        if not tp_rect_1 or not tp_rect_2:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–µ–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π
        coords_1 = self.canvas.coords(tp_rect_1)
        coords_2 = self.canvas.coords(tp_rect_2)
        
        # –û–±—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
        left = min(coords_1[0], coords_2[0])
        top = min(coords_1[1], coords_2[1])
        right = max(coords_1[2], coords_2[2])
        bottom = max(coords_1[3], coords_2[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–≥–æ–ª–∫–∞
        handle_coords = self.canvas.coords(handle_item)
        handle_x = (handle_coords[0] + handle_coords[2]) / 2
        handle_y = (handle_coords[1] + handle_coords[3]) / 2
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —ç—Ç–æ —É–≥–æ–ª–æ–∫ –∏ –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–æ—Ä–æ–Ω—É
        if abs(handle_x - left) < abs(handle_x - right):  # –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            left += dx
        else:  # –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            right += dx
            
        if abs(handle_y - top) < abs(handle_y - bottom):  # –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
            top += dy
        else:  # –Ω–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
            bottom += dy
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–µ–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π
        middle = (top + bottom) / 2
        self.canvas.coords(tp_rect_1, left, top, right, middle)
        self.canvas.coords(tp_rect_2, left, middle, right, bottom)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —É–≥–æ–ª–æ–∫
        self.canvas.move(handle_item, dx, dy)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–≥–æ–ª–∫–∏ –∫ –Ω–æ–≤—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        self._update_take_profit_handles(left, top, right, bottom, exclude_handle=handle_item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—ã–≤–∞—é—â—É—é –ª–∏–Ω–∏—é
        center_x = (left + right) / 2
        for item in self.canvas.find_all():
            if self.canvas.type(item) == "line":
                line_coords = self.canvas.coords(item)
                if (len(line_coords) == 4 and 
                    abs(line_coords[0] - line_coords[2]) < 5 and  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    abs(line_coords[1] - top) < 5):  # –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É –æ–±–ª–∞—Å—Ç–∏
                    self.canvas.coords(item, center_x, top, center_x, bottom)
                    break
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏
        self._notify_take_profit_area_changed()
    
    def _update_take_profit_handles(self, left, top, right, bottom, exclude_handle=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —É–≥–æ–ª–∫–æ–≤ TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏"""
        handle_size = 3
        handles_coords = [
            (left, top),      # top-left
            (right, top),     # top-right  
            (left, bottom),   # bottom-left
            (right, bottom)   # bottom-right
        ]
        
        handle_items = [item for item in self.canvas.find_withtag("take_profit_handle") 
                       if item != exclude_handle]
        
        for i, (x, y) in enumerate(handles_coords):
            if i < len(handle_items):
                handle = handle_items[i]
                self.canvas.coords(handle, 
                                 x - handle_size, y - handle_size,
                                 x + handle_size, y + handle_size)