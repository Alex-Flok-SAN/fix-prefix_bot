#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π LOY-FIX –∏ HI-PATTERN
"""

import sys
import pandas as pd
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from core.ai_search_pattern.fpf_detector_new import FpfPatternDetector, CandleData

def analyze_loy_hi_positioning():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ LOY-FIX –∏ HI-PATTERN"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_file = Path("data_dl/BNBUSDT_M15_2025-05.csv")
    df = pd.read_csv(data_file)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CandleData
    candlesticks = []
    for _, row in df.iterrows():
        candle = CandleData(
            timestamp=row['ts_open_ms'],
            open=row['open'],
            high=row['high'], 
            low=row['low'],
            close=row['close'],
            volume=row['volume']
        )
        candlesticks.append(candle)
    
    # OCR —Å–≤–µ—á–∞
    ocr_idx = 462
    
    print("üéØ –ê–ù–ê–õ–ò–ó LOY-FIX –ò HI-PATTERN –ü–û–ó–ò–¶–ò–ô")
    print("=" * 50)
    
    # –î–µ—Ç–µ–∫—Ç–æ—Ä
    detector = FpfPatternDetector()
    pattern = detector.detect_pattern(candlesticks, ocr_candle_idx=ocr_idx)
    
    if not pattern:
        print("‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ê–Ω–∞–ª–∏–∑ LOY-FIX
    print(f"\nüî¥ LOY-FIX –ê–ù–ê–õ–ò–ó:")
    print(f"   –ò–Ω–¥–µ–∫—Å: {pattern.loy_fix_idx}")
    print(f"   –¶–µ–Ω–∞: {pattern.loy_fix_price:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ LOY-FIX 
    search_start = pattern.fix_end_idx + 1
    search_end = pattern.hi_pattern_idx
    
    print(f"   –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞: {search_start} - {search_end}")
    print(f"   –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏: {search_end - search_start + 1} —Å–≤–µ—á–µ–π")
    
    # –ù–∞–π–¥–µ–º –≤—Å–µ –º–∏–Ω–∏–º—É–º—ã –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
    loy_candidates = []
    for i in range(search_start, search_end + 1):
        if i < len(candlesticks):
            candle = candlesticks[i]
            loy_candidates.append((i, candle.low, candle.high, candle.close))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º—É–º—É
    loy_candidates.sort(key=lambda x: x[1])  # –ü–æ low —Ü–µ–Ω–µ
    
    print(f"\n   üìä –¢–û–ü-5 –ö–ê–ù–î–ò–î–ê–¢–û–í LOY-FIX:")
    for rank, (idx, low, high, close) in enumerate(loy_candidates[:5], 1):
        is_current = idx == pattern.loy_fix_idx
        marker = "üëë" if is_current else f"{rank}"
        print(f"   {marker} –°–≤–µ—á–∞ #{idx}: Low={low:.2f}, High={high:.2f}, Close={close:.2f}")
    
    # –ê–Ω–∞–ª–∏–∑ HI-PATTERN
    print(f"\nüü¢ HI-PATTERN –ê–ù–ê–õ–ò–ó:")
    print(f"   –ò–Ω–¥–µ–∫—Å: {pattern.hi_pattern_idx}")
    print(f"   –¶–µ–Ω–∞: {pattern.hi_pattern_price:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ HI-PATTERN (–ø–æ—Å–ª–µ FIX)
    hi_search_start = pattern.fix_end_idx + 1
    hi_search_end = len(candlesticks) - 1
    
    print(f"   –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞: {hi_search_start} - {hi_search_end}")
    print(f"   –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏: {hi_search_end - hi_search_start + 1} —Å–≤–µ—á–µ–π")
    
    # –ù–∞–π–¥–µ–º –≤—Å–µ –º–∞–∫—Å–∏–º—É–º—ã
    hi_candidates = []
    for i in range(hi_search_start, min(hi_search_end + 1, len(candlesticks))):
        candle = candlesticks[i]
        hi_candidates.append((i, candle.high, candle.low, candle.close))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–∞–∫—Å–∏–º—É–º—É (—É–±—ã–≤–∞–Ω–∏–µ)
    hi_candidates.sort(key=lambda x: x[1], reverse=True)
    
    print(f"\n   üìä –¢–û–ü-5 –ö–ê–ù–î–ò–î–ê–¢–û–í HI-PATTERN:")
    for rank, (idx, high, low, close) in enumerate(hi_candidates[:5], 1):
        is_current = idx == pattern.hi_pattern_idx
        marker = "üëë" if is_current else f"{rank}"
        print(f"   {marker} –°–≤–µ—á–∞ #{idx}: High={high:.2f}, Low={low:.2f}, Close={close:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    print(f"\nüìö –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ë–ê–ó–ï –ó–ù–ê–ù–ò–ô:")
    
    # 1. LOY-FIX –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ú–ï–ñ–î–£ FIX –∏ HI-PATTERN
    loy_between = pattern.fix_end_idx < pattern.loy_fix_idx < pattern.hi_pattern_idx
    print(f"   1. LOY-FIX –º–µ–∂–¥—É FIX –∏ HI-PATTERN: {'‚úÖ' if loy_between else '‚ùå'}")
    print(f"      FIX –∫–æ–Ω–µ—Ü: {pattern.fix_end_idx}, LOY-FIX: {pattern.loy_fix_idx}, HI-PATTERN: {pattern.hi_pattern_idx}")
    
    # 2. LOY-FIX –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ –æ–±–ª–∞—Å—Ç–∏ FIX
    loy_below_fix = pattern.loy_fix_price < pattern.fix_low
    print(f"   2. LOY-FIX –Ω–∏–∂–µ FIX –æ–±–ª–∞—Å—Ç–∏: {'‚úÖ' if loy_below_fix else '‚ùå'}")
    print(f"      LOY-FIX: {pattern.loy_fix_price:.2f}, FIX low: {pattern.fix_low:.2f}")
    
    # 3. HI-PATTERN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –æ–±–ª–∞—Å—Ç–∏ FIX
    hi_above_fix = pattern.hi_pattern_price > pattern.fix_high
    print(f"   3. HI-PATTERN –≤—ã—à–µ FIX –æ–±–ª–∞—Å—Ç–∏: {'‚úÖ' if hi_above_fix else '‚ùå'}")
    print(f"      HI-PATTERN: {pattern.hi_pattern_price:.2f}, FIX high: {pattern.fix_high:.2f}")
    
    # 4. HI-PATTERN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –º–∞–∫—Å–∏–º—É–º–æ–º –ø–æ—Å–ª–µ FIX
    is_absolute_max = True
    for i in range(pattern.fix_end_idx + 1, len(candlesticks)):
        if candlesticks[i].high > pattern.hi_pattern_price:
            is_absolute_max = False
            print(f"      ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –º–∞–∫—Å–∏–º—É–º –Ω–∞ —Å–≤–µ—á–µ {i}: {candlesticks[i].high:.2f}")
            break
    
    print(f"   4. HI-PATTERN –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∞–∫—Å–∏–º—É–º: {'‚úÖ' if is_absolute_max else '‚ùå'}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    all_checks = [loy_between, loy_below_fix, hi_above_fix, is_absolute_max]
    
    if all(all_checks):
        print("   ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ü–æ–∑–∏—Ü–∏–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã.")
    else:
        print("   ‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º:")
        if not loy_between:
            print("     - LOY-FIX –Ω–µ –º–µ–∂–¥—É FIX –∏ HI-PATTERN")
        if not loy_below_fix:
            print("     - LOY-FIX –Ω–µ –Ω–∏–∂–µ FIX –æ–±–ª–∞—Å—Ç–∏")
        if not hi_above_fix:
            print("     - HI-PATTERN –Ω–µ –≤—ã—à–µ FIX –æ–±–ª–∞—Å—Ç–∏")
        if not is_absolute_max:
            print("     - HI-PATTERN –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∞–∫—Å–∏–º—É–º")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    print(f"\n‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó:")
    
    def format_time(candle_idx):
        if candle_idx < len(candlesticks):
            timestamp = candlesticks[candle_idx].timestamp
            dt = datetime.fromtimestamp(timestamp / 1000)
            return dt.strftime('%Y-%m-%d %H:%M')
        return "N/A"
    
    print(f"   FIX –æ–±–ª–∞—Å—Ç—å: {format_time(pattern.fix_start_idx)} - {format_time(pattern.fix_end_idx)}")
    print(f"   LOY-FIX: {format_time(pattern.loy_fix_idx)}")
    print(f"   HI-PATTERN: {format_time(pattern.hi_pattern_idx)}")
    
    # –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    fix_duration = (pattern.fix_end_idx - pattern.fix_start_idx + 1) * 15  # –º–∏–Ω—É—Ç
    loy_to_hi_duration = (pattern.hi_pattern_idx - pattern.loy_fix_idx) * 15  # –º–∏–Ω—É—Ç
    
    print(f"   FIX –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {fix_duration} –º–∏–Ω—É—Ç")
    print(f"   LOY-FIX ‚Üí HI-PATTERN: {loy_to_hi_duration} –º–∏–Ω—É—Ç")

if __name__ == "__main__":
    analyze_loy_hi_positioning()