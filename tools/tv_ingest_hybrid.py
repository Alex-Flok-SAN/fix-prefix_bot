#!/usr/bin/env python3
"""
–ì–∏–±—Ä–∏–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è TV Ingest App
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- Canvas –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ tv_ingest_app.py 
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π OCR –∏ FPF –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–∑ tv_ingest_new.py
- Binance API –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
"""

print("üöÄ Starting Ultimate FPF Bot...")

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import sys
import pathlib
from datetime import datetime, timezone, timedelta
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
_here = pathlib.Path(__file__).resolve()
_proj_root = _here.parent.parent
if str(_proj_root) not in sys.path:
    sys.path.insert(0, str(_proj_root))

# PIL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
try:
    from PIL import Image, ImageTk
    PIL_AVAILABLE = True
except Exception:
    Image = None
    ImageTk = None
    PIL_AVAILABLE = False

# Drag & Drop
try:
    from tkinterdnd2 import TkinterDnD, DND_FILES
    BaseTk = TkinterDnD.Tk
    DND_AVAILABLE = True
except Exception:
    BaseTk = tk.Tk
    DND_FILES = None
    DND_AVAILABLE = False

# –ù–û–í–´–ï –ú–û–î–£–õ–ò –∏–∑ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
try:
    from ai.ocr_engine_new import SimpleOCREngine
    OCR_AVAILABLE = True
    print("‚úÖ SimpleOCREngine loaded")
except Exception as e:
    OCR_AVAILABLE = False
    print(f"‚ùå OCR Engine failed: {e}")

try:
    from core.ai_search_pattern.fpf_detector_new import FpfPatternDetector, FpfPattern
    FPF_AVAILABLE = True
    print("‚úÖ FpfPatternDetector loaded")
except Exception as e:
    FPF_AVAILABLE = False
    print(f"‚ùå FPF Detector failed: {e}")

try:
    from sync.simple_data_loader import load_data_for_analysis
    DATA_LOADER_AVAILABLE = True  
    print("‚úÖ Data loader loaded")
except Exception as e:
    DATA_LOADER_AVAILABLE = False
    print(f"‚ùå Data loader failed: {e}")


class HybridTVIngest(BaseTk):
    """–ì–∏–±—Ä–∏–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TV Ingest —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self):
        super().__init__()
        self.title("üìä Ultimate FPF Bot - Hybrid Edition")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        screen_w = self.winfo_screenwidth()
        screen_h = self.winfo_screenheight()
        win_w = int(screen_w * 0.85)  # 85% —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
        win_h = int(screen_h * 0.8)   # 80% –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
        pos_x = (screen_w - win_w) // 2
        pos_y = (screen_h - win_h) // 2
        self.geometry(f"{win_w}x{win_h}+{pos_x}+{pos_y}")
        self.configure(bg="#1c1c1c")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.minsize(800, 600)
        
        # –û–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        try:
            self.attributes('-topmost', True)
            self.lift()
            self.after(200, self.lift)
            print("‚úÖ Window on top")
        except Exception:
            pass
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        self.ocr_engine = SimpleOCREngine() if OCR_AVAILABLE else None
        self.fpf_detector = FpfPatternDetector() if FPF_AVAILABLE else None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.current_data = None
        self.current_pattern = None
        self.ocr_result = None
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FIX –æ–±–ª–∞—Å—Ç–∏
        self.dragging_handle = None
        self.dragging_whole_fix = False  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ–≥–æ FIX
        self.drag_start_x = 0
        self.drag_start_y = 0
        self.fix_bounds = None  # (left, top, right, bottom)
        self.fix_handles = []  # —Å–ø–∏—Å–æ–∫ ID —É–≥–ª–æ–≤—ã—Ö —Ç–æ—á–µ–∫ [tl, tr, bl, br]
        self.fix_rect_id = None  # ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ FIX
        self.original_fix_bounds = None  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        self.preview_rect = None  # –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        
        self._setup_ui()
        self._setup_canvas()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º status_var –ø–µ—Ä–µ–¥ drag_drop
        self.status_var = tk.StringVar(value="Ready. Drag screenshots here or use Load Image button")
        
        self._setup_drag_drop()
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        self._series_items = []
        self._axis_items = []
        self._series_rows = None
        self._scale_x = 1.0
        self._scale_y = 1.0
        self._offset_x = 0
        self._offset_y = 0
        
        # FPF —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self._fix_items = []
        self._ray_items = []  
        # self._prefix_items = []  # –£–±—Ä–∞–ª–∏ PREFIX –∏–∑ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        self._hi_pattern_items = []
        self._loy_fix_items = []
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
        self._stored_fix_area = None
        self._stored_ocr_idx = None
        
        
        print("‚úÖ Hybrid TV Ingest initialized")
        
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        top_frame = ttk.Frame(self)
        top_frame.pack(side=tk.TOP, fill=tk.X, padx=12, pady=8)
        
        ttk.Label(top_frame, text="üìä Ultimate FPF Bot", 
                 font=("Helvetica", 16, "bold")).pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Separator(top_frame, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=8)
        
        load_btn = ttk.Button(top_frame, text="üìÅ Load Image", command=self._load_image)
        load_btn.pack(side=tk.LEFT, padx=4)
        
        analyze_btn = ttk.Button(top_frame, text="üîç Analyze Pattern", command=self._analyze_pattern)
        analyze_btn.pack(side=tk.LEFT, padx=4)
        
        clear_btn = ttk.Button(top_frame, text="üóëÔ∏è Clear", command=self._clear_all)
        clear_btn.pack(side=tk.LEFT, padx=4)
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è –ø–∞–Ω–µ–ª—å OCR
        ocr_frame = ttk.Frame(self)
        ocr_frame.pack(side=tk.TOP, fill=tk.X, padx=12, pady=(0, 6))
        
        ttk.Label(ocr_frame, text="Symbol:").pack(side=tk.LEFT)
        self.symbol_var = tk.StringVar()
        ttk.Entry(ocr_frame, textvariable=self.symbol_var, width=12, state='readonly').pack(side=tk.LEFT, padx=(4, 12))
        
        ttk.Label(ocr_frame, text="Timeframe:").pack(side=tk.LEFT)
        self.timeframe_var = tk.StringVar()
        ttk.Entry(ocr_frame, textvariable=self.timeframe_var, width=8, state='readonly').pack(side=tk.LEFT, padx=(4, 12))
        
        ttk.Label(ocr_frame, text="DateTime:").pack(side=tk.LEFT) 
        self.datetime_var = tk.StringVar()
        ttk.Entry(ocr_frame, textvariable=self.datetime_var, width=20, state='readonly').pack(side=tk.LEFT, padx=(4, 12))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã FPF –∞–Ω–∞–ª–∏–∑–∞
        results_frame = ttk.Frame(self)
        results_frame.pack(side=tk.TOP, fill=tk.X, padx=12, pady=(0, 6))
        
        ttk.Label(results_frame, text="üéØ FPF Pattern:").pack(side=tk.LEFT)
        self.pattern_status = tk.StringVar(value="Not analyzed")
        ttk.Entry(results_frame, textvariable=self.pattern_status, width=20, state='readonly').pack(side=tk.LEFT, padx=(4, 12))
        
        ttk.Label(results_frame, text="Confidence:").pack(side=tk.LEFT)
        self.confidence_var = tk.StringVar()
        ttk.Entry(results_frame, textvariable=self.confidence_var, width=10, state='readonly').pack(side=tk.LEFT, padx=(4, 12))
        
    def _setup_canvas(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Canvas –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        self.canvas = tk.Canvas(self, bg="black", highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True, padx=12, pady=6)
        
        # –ü—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        self.canvas.bind('<ButtonPress-1>', self._on_canvas_click)
        self.canvas.bind('<B1-Motion>', self._on_canvas_drag)
        self.canvas.bind('<ButtonRelease-1>', self._on_canvas_release)
        self.canvas.bind('<MouseWheel>', self._on_canvas_scroll)
        
        # –ü—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≥–ª–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ FIX
        self.canvas.bind('<Enter>', self._on_canvas_enter)
        self.canvas.bind('<Motion>', self._on_canvas_motion)
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        # self.bind('<Configure>', self._on_window_resize)
        
    def _setup_drag_drop(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Drag & Drop"""
        if DND_AVAILABLE:
            try:
                self.drop_target_register(DND_FILES)
                self.dnd_bind('<<Drop>>', self._on_drop)
                self.status("‚úÖ Drag & Drop enabled")
                print("‚úÖ Drag & Drop enabled")
            except Exception as e:
                self.status(f"‚ùå Drag & Drop failed: {e}")
        else:
            self.status("‚ö†Ô∏è Drag & Drop not available")
            
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–Ω–∏–∑—É (—É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ __init__)
        status_label = ttk.Label(self, textvariable=self.status_var)
        status_label.pack(side=tk.BOTTOM, fill=tk.X, padx=12, pady=8)
        
    def status(self, message):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        self.status_var.set(message)
        self.update_idletasks()
        
    def _on_drop(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Drag & Drop —Ñ–∞–π–ª–æ–≤"""
        files = self.tk.splitlist(event.data)
        if files:
            self._load_image_file(files[0])
            
    def _load_image(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        file_path = filedialog.askopenfilename(
            title="Select TradingView Screenshot",
            filetypes=[("Image files", "*.png *.jpg *.jpeg *.bmp *.gif"), ("All files", "*.*")]
        )
        if file_path:
            self._load_image_file(file_path)
            
    def _load_image_file(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            self.status(f"üìÅ Loading {file_path}...")
            
            # OCR –∞–Ω–∞–ª–∏–∑ 
            if self.ocr_engine:
                self.status("üîç Running OCR analysis...")
                self.ocr_result = self.ocr_engine.extract_chart_info(file_path)
                
                if self.ocr_result:
                    # –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –¥–∞–Ω–Ω—ã–º–∏ OCR
                    self.symbol_var.set(self.ocr_result.get('symbol', 'Unknown'))
                    self.timeframe_var.set(self.ocr_result.get('timeframe', 'Unknown'))
                    self.datetime_var.set(self.ocr_result.get('datetime', 'Not found'))
                    
                    self.status(f"‚úÖ OCR completed: {self.ocr_result.get('symbol')} {self.ocr_result.get('timeframe')}")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ (–∫–∞–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π)
                    self.after(100, self._analyze_pattern)
                else:
                    self.status("‚ùå OCR failed - could not extract data from image")
            else:
                self.status("‚ùå OCR engine not available")
                
        except Exception as e:
            self.status(f"‚ùå Error loading image: {e}")
            messagebox.showerror("Error", f"Failed to load image: {e}")
            
    def _analyze_pattern(self):
        """–ê–Ω–∞–ª–∏–∑ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        if not self.ocr_result:
            self.status("‚ùå No OCR data available for analysis")
            return
            
        try:
            self.status("üìä Loading market data...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            symbol = self.ocr_result.get('symbol')
            timeframe = self.ocr_result.get('timeframe') 
            target_datetime = self.ocr_result.get('datetime')
            
            if not all([symbol, timeframe, target_datetime]):
                self.status("‚ùå Incomplete OCR data")
                return
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            self.current_data = load_data_for_analysis(symbol, timeframe, target_datetime)
            
            if self.current_data is None or len(self.current_data) == 0:
                self.status("‚ùå No market data loaded")
                return
                
            self.status(f"‚úÖ Loaded {len(self.current_data)} candles")
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å OCR —Å–≤–µ—á–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º enumerate)
            ocr_candle_idx = self._find_ocr_candle_index(self.current_data, target_datetime)
            print(f"üéØ OCR candle index: {ocr_candle_idx} (–∏–∑ {len(self.current_data)} —Å–≤–µ—á–µ–π)")
            
            if ocr_candle_idx is not None and 0 <= ocr_candle_idx < len(self.current_data):
                ocr_row = self.current_data.iloc[ocr_candle_idx]
                ocr_dt = datetime.fromtimestamp(int(ocr_row['timestamp']) / 1000, tz=timezone.utc)
                print(f"üìÖ OCR candle time: {ocr_dt.strftime('%Y-%m-%d %H:%M:%S UTC')}")
                print(f"üí∞ OCR candle OHLC: O={ocr_row['open']:.2f} H={ocr_row['high']:.2f} L={ocr_row['low']:.2f} C={ocr_row['close']:.2f}")
            else:
                print(f"‚ùå Invalid OCR candle index: {ocr_candle_idx}")
            
            # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
            self._draw_chart()
            
            # FPF –∞–Ω–∞–ª–∏–∑
            if self.fpf_detector:
                self.status("üîç Analyzing FPF pattern...")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
                candles = []
                for pos_idx, (_, row) in enumerate(self.current_data.iterrows()):  # –ò–°–ü–†–ê–í–õ–ï–ù–û
                    candle = (
                        int(row['timestamp']),
                        float(row['open']),
                        float(row['high']), 
                        float(row['low']),
                        float(row['close']),
                        float(row.get('volume', 0))
                    )
                    candles.append(candle)
                    
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
                self.current_pattern = self.fpf_detector.detect_pattern(candles, ocr_candle_idx)
                
                if self.current_pattern:
                    self.pattern_status.set("‚úÖ Pattern Found")
                    self.confidence_var.set(f"{self.current_pattern.confidence:.1%}")
                    self.status(f"‚úÖ FPF Pattern detected with {self.current_pattern.confidence:.1%} confidence")
                    
                    # –†–∏—Å—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
                    self._draw_fpf_pattern()
                else:
                    # –î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å FIX –æ–±–ª–∞—Å—Ç—å
                    self._try_draw_partial_pattern(candles, ocr_candle_idx)
                    self.pattern_status.set("‚ùå No Pattern")
                    self.confidence_var.set("")
                    self.status("‚ùå No FPF pattern found, but showing partial analysis")
                    
        except Exception as e:
            self.status(f"‚ùå Analysis failed: {e}")
            print(f"Analysis error: {e}")
            import traceback
            traceback.print_exc()  # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
            
    def _find_ocr_candle_index(self, data, target_datetime):
        """–ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —Å–≤–µ—á–∏ –±–ª–∏–∂–∞–π—à–µ–π –∫ OCR –≤—Ä–µ–º–µ–Ω–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û + —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)"""
        try:
            # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            if isinstance(target_datetime, str):
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã datetime
                try:
                    target_dt = datetime.fromisoformat(target_datetime.replace('Z', '+00:00'))
                except ValueError:
                    # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                    import dateutil.parser
                    target_dt = dateutil.parser.parse(target_datetime)
            else:
                target_dt = target_datetime
            target_timestamp = int(target_dt.timestamp() * 1000)
            
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–µ—á—É (–ò–°–ü–†–ê–í–õ–ï–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º enumerate)
            min_diff = float('inf')
            closest_idx = None
            
            for pos_idx, (_, row) in enumerate(data.iterrows()):  # –ò–°–ü–†–ê–í–õ–ï–ù–û
                timestamp = int(row['timestamp'])
                diff = abs(timestamp - target_timestamp)
                
                if diff < min_diff:
                    min_diff = diff
                    closest_idx = pos_idx  # –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                    
            return closest_idx
            
        except Exception as e:
            print(f"Error finding OCR candle: {e}")
            return len(data) // 2  # —Ä–µ–∑–µ—Ä–≤ - —Å—Ä–µ–¥–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            
    def _draw_chart(self):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–≤–µ—á–µ–π (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)"""
        if self.current_data is None:
            return
            
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
        self._clear_chart()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º canvas –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        self.canvas.update()
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        
        print(f"üé® Canvas —Ä–∞–∑–º–µ—Ä—ã: {canvas_width}x{canvas_height}")
        
        if canvas_width <= 1 or canvas_height <= 1:
            print("‚è≥ Canvas –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 100ms...")
            self.after(100, self._draw_chart)  # –ü–µ—Ä–µ–¥–µ–ª–∞–µ–º –∫–æ–≥–¥–∞ canvas –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
            return
            
        # –û—Ç—Å—Ç—É–ø—ã
        margin_left = 60
        margin_right = 20
        margin_top = 20
        margin_bottom = 60
        
        chart_width = canvas_width - margin_left - margin_right
        chart_height = canvas_height - margin_top - margin_bottom
        
        if chart_width <= 0 or chart_height <= 0:
            return
            
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        data_len = len(self.current_data)
        
        # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        highs = self.current_data['high'].values
        lows = self.current_data['low'].values
        min_price = float(lows.min())
        max_price = float(highs.max())
        price_range = max_price - min_price
        
        if price_range == 0:
            price_range = max_price * 0.01  # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
            
        # –†–∏—Å—É–µ–º —Å–≤–µ—á–∏
        candle_width = max(1, chart_width // data_len - 1)
        
        for i in range(data_len):
            row = self.current_data.iloc[i]
            open_price = float(row['open'])
            high_price = float(row['high'])
            low_price = float(row['low'])
            close_price = float(row['close'])
            
            # –ü–æ–∑–∏—Ü–∏—è X
            x = margin_left + (i * chart_width / data_len)
            
            # –ü–æ–∑–∏—Ü–∏–∏ Y (–∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫ –∫–∞–∫ Y —Ä–∞—Å—Ç–µ—Ç –≤–Ω–∏–∑)
            high_y = margin_top + (max_price - high_price) * chart_height / price_range
            low_y = margin_top + (max_price - low_price) * chart_height / price_range
            open_y = margin_top + (max_price - open_price) * chart_height / price_range
            close_y = margin_top + (max_price - close_price) * chart_height / price_range
            
            # –¶–≤–µ—Ç —Å–≤–µ—á–∏ - –º–µ–Ω–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ
            color = "#40cc40" if close_price >= open_price else "#cc4040"  # –º–µ–Ω–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∑–µ–ª–µ–Ω–∞—è/–∫—Ä–∞—Å–Ω–∞—è
            
            # –§–∏—Ç–∏–ª—å (high-low –ª–∏–Ω–∏—è)
            wick_item = self.canvas.create_line(
                x + candle_width//2, high_y,
                x + candle_width//2, low_y,
                fill=color, width=1
            )
            self._series_items.append(wick_item)
            
            # –¢–µ–ª–æ —Å–≤–µ—á–∏
            body_top = min(open_y, close_y)
            body_bottom = max(open_y, close_y)
            body_height = max(1, body_bottom - body_top)
            
            body_item = self.canvas.create_rectangle(
                x, body_top,
                x + candle_width, body_bottom,
                fill=color, outline=color
            )
            self._series_items.append(body_item)
            
        # –†–∏—Å—É–µ–º –æ—Å–∏
        self._draw_axes(margin_left, margin_top, chart_width, chart_height, min_price, max_price)
        
        # –†–∏—Å—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ FIX —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
        if self._stored_fix_area is not None:
            self._draw_partial_fix_direct(self._stored_fix_area, margin_left, margin_top, chart_width, chart_height, min_price, max_price, data_len)
            
        # if self._stored_ocr_idx is not None:
        #     self._highlight_ocr_candle_direct(self._stored_ocr_idx, margin_left, margin_top, chart_width, chart_height, data_len)  # –£–ë–†–ê–ù–û: YOUR MARK
        
        print(f"‚úÖ Chart drawn: {data_len} candles")
        
    def _draw_axes(self, margin_left, margin_top, chart_width, chart_height, min_price, max_price):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –æ—Å–µ–π –∏ –ø–æ–¥–ø–∏—Å–µ–π (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π)"""
        
        # –û—Å—å Y (—Ü–µ–Ω—ã) - –ø—Ä–æ–∑—Ä–∞—á–Ω–µ–µ –Ω–∞ 15%
        y_axis = self.canvas.create_line(
            margin_left, margin_top,
            margin_left, margin_top + chart_height,
            fill="#595959", width=1  # —Å–µ—Ä—ã–π –Ω–∞ 15% –ø—Ä–æ–∑—Ä–∞—á–Ω–µ–µ
        )
        self._axis_items.append(y_axis)
        
        # –¶–µ–Ω–æ–≤—ã–µ –º–µ—Ç–∫–∏
        price_steps = 5
        price_step = (max_price - min_price) / price_steps
        
        for i in range(price_steps + 1):
            price = min_price + i * price_step
            y = margin_top + chart_height - (i * chart_height / price_steps)
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–µ—Ç–∫–∏ - –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–∞ 15%  
            grid_line = self.canvas.create_line(
                margin_left, y,
                margin_left + chart_width, y,
                fill="#595959", width=1, dash=(2, 2)  # —Å–µ—Ä—ã–π –Ω–∞ 15% –ø—Ä–æ–∑—Ä–∞—á–Ω–µ–µ
            )
            self._axis_items.append(grid_line)
            
            # –¶–µ–Ω–æ–≤–∞—è –º–µ—Ç–∫–∞
            price_label = self.canvas.create_text(
                margin_left - 5, y,
                text=f"{price:.2f}",
                fill="white", anchor="e", font=("Arial", 8)
            )
            self._axis_items.append(price_label)
            
        # –û—Å—å X (–≤—Ä–µ–º—è) - –ò–°–ü–†–ê–í–õ–ï–ù–û: –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–∑—Ä–∞—á–Ω–µ–µ –Ω–∞ 15%
        x_axis = self.canvas.create_line(
            margin_left, margin_top + chart_height,
            margin_left + chart_width, margin_top + chart_height,
            fill="#595959", width=1  # —Å–µ—Ä—ã–π –Ω–∞ 15% –ø—Ä–æ–∑—Ä–∞—á–Ω–µ–µ
        )
        self._axis_items.append(x_axis)
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ - –±–æ–ª—å—à–µ –º–µ—Ç–æ–∫ –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
        time_steps = 10  # —É–≤–µ–ª–∏—á–µ–Ω–æ —Å 5 –¥–æ 10 –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        data_len = len(self.current_data)
        
        for i in range(time_steps):
            idx = int(i * data_len / time_steps)
            if idx < data_len:
                row = self.current_data.iloc[idx]
                timestamp = int(row['timestamp'])
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
                dt = datetime.fromtimestamp(timestamp / 1000, tz=timezone.utc)
                moscow_dt = dt + timedelta(hours=3)  # –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤
                
                x = margin_left + (i * chart_width / time_steps)
                
                # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–µ—Ç–∫–∏ - –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–∞ 15%
                grid_line = self.canvas.create_line(
                    x, margin_top,
                    x, margin_top + chart_height,
                    fill="#595959", width=1, dash=(2, 2)  # —Å–µ—Ä—ã–π –Ω–∞ 15% –ø—Ä–æ–∑—Ä–∞—á–Ω–µ–µ
                )
                self._axis_items.append(grid_line)
                
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
                time_label = self.canvas.create_text(
                    x, margin_top + chart_height + 20,
                    text=moscow_dt.strftime('%H:%M\n%m/%d'),
                    fill="white", anchor="n", font=("Arial", 8)
                )
                self._axis_items.append(time_label)
                
    def _draw_fpf_pattern(self):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ"""
        if not self.current_pattern:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        margin_left = 60
        margin_right = 20
        margin_top = 20
        margin_bottom = 60
        chart_width = canvas_width - margin_left - margin_right
        chart_height = canvas_height - margin_top - margin_bottom
        
        data_len = len(self.current_data)
        
        # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        highs = self.current_data['high'].values
        lows = self.current_data['low'].values
        min_price = float(lows.min())
        max_price = float(highs.max())
        price_range = max_price - min_price
        
        if price_range == 0:
            price_range = max_price * 0.01
            
        def idx_to_x(idx):
            return margin_left + (idx * chart_width / data_len)
            
        def price_to_y(price):
            return margin_top + (max_price - price) * chart_height / price_range
            
        # 1. –†–∏—Å—É–µ–º FIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–π)
        fix_left = idx_to_x(self.current_pattern.fix_start_idx)
        fix_right = idx_to_x(self.current_pattern.fix_end_idx)
        fix_top = price_to_y(self.current_pattern.fix_high)
        fix_bottom = price_to_y(self.current_pattern.fix_low)
        
        fix_rect = self.canvas.create_rectangle(
            fix_left, fix_top, fix_right, fix_bottom,
            outline="#A56BFF", width=2, dash=(5, 3), fill=""
        )
        self._fix_items.append(fix_rect)
        
        fix_label = self.canvas.create_text(
            (fix_left + fix_right) / 2, fix_top - 10,
            text="FIX", fill="#A56BFF", font=("Arial", 10, "bold")
        )
        self._fix_items.append(fix_label)
        
        # 2. –†–∏—Å—É–µ–º LOY-FIX —Ç–æ—á–∫—É (–∫—Ä–∞—Å–Ω–∞—è)
        loy_x = idx_to_x(self.current_pattern.loy_fix_idx)
        loy_y = price_to_y(self.current_pattern.loy_fix_price)
        
        loy_point = self.canvas.create_oval(
            loy_x - 5, loy_y - 5, loy_x + 5, loy_y + 5,
            fill="#ff0000", outline="#ff0000", width=2
        )
        self._loy_fix_items.append(loy_point)
        
        loy_label = self.canvas.create_text(
            loy_x, loy_y - 15,
            text="LOY-FIX", fill="#ff0000", font=("Arial", 8, "bold")
        )
        self._loy_fix_items.append(loy_label)
        
        # 3. –†–∏—Å—É–µ–º HI-PATTERN —Ç–æ—á–∫—É (—Å–∏–Ω—è—è)
        hi_x = idx_to_x(self.current_pattern.hi_pattern_idx)
        hi_y = price_to_y(self.current_pattern.hi_pattern_price)
        
        hi_point = self.canvas.create_oval(
            hi_x - 5, hi_y - 5, hi_x + 5, hi_y + 5,
            fill="#2AA3FF", outline="#2AA3FF", width=2
        )
        self._hi_pattern_items.append(hi_point)
        
        hi_label = self.canvas.create_text(
            hi_x, hi_y - 15,
            text="HI-PATTERN", fill="#2AA3FF", font=("Arial", 8, "bold")
        )
        self._hi_pattern_items.append(hi_label)
        
        # 4. –†–∏—Å—É–µ–º RAY –ª–∏–Ω–∏—é (–∂–µ–ª—Ç–∞—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è)
        ray_y = price_to_y(self.current_pattern.ray_price)
        ray_start_x = fix_right
        ray_end_x = margin_left + chart_width
        
        ray_line = self.canvas.create_line(
            ray_start_x, ray_y, ray_end_x, ray_y,
            fill="#FFD700", width=2, dash=(8, 4)
        )
        self._ray_items.append(ray_line)
        
        ray_label = self.canvas.create_text(
            ray_end_x - 30, ray_y - 10,
            text="RAY", fill="#FFD700", font=("Arial", 10, "bold")
        )
        self._ray_items.append(ray_label)
        
        # 5. PREFIX —É–±—Ä–∞–Ω –∏–∑ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ - —Ñ–æ–∫—É—Å –Ω–∞ RAY
        
        print("‚úÖ FPF Pattern drawn on chart")
        
    def _try_draw_partial_pattern(self, candles, ocr_candle_idx):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ FIX –æ–±–ª–∞—Å—Ç—å)"""
        try:
            if not self.fpf_detector:
                return
                
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–ª—å–∫–æ FIX –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            candlesticks = []
            for pos_idx, candle_tuple in enumerate(candles):
                from core.ai_search_pattern.fpf_detector_new import CandleData
                candlesticks.append(CandleData.from_tuple(candle_tuple))
            
            # –ò—â–µ–º FIX –æ–±–ª–∞—Å—Ç—å —Ç–µ–º –∂–µ —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
            fix_area = self.fpf_detector._find_plateau_around_ocr(candlesticks, ocr_candle_idx)
            
            if fix_area:
                print(f"Drawing partial FIX area: {fix_area}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
                self._stored_fix_area = fix_area
                self._stored_ocr_idx = ocr_candle_idx
                self._draw_partial_fix(fix_area)
                
                # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ LOY-FIX –∏ HI-PATTERN –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
                loy_fix = self.fpf_detector._find_loy_fix(candlesticks, fix_area)
                hi_pattern = self.fpf_detector._find_hi_pattern(candlesticks, fix_area, loy_fix) if loy_fix else None
                
                if loy_fix:
                    self._draw_partial_loy_fix(loy_fix)
                    print(f"‚úÖ Found LOY-FIX at {loy_fix}")
                
                if hi_pattern:
                    self._draw_partial_hi_pattern(hi_pattern)  
                    print(f"‚úÖ Found HI-PATTERN at {hi_pattern}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é RAY –∏ —Ä–∏—Å—É–µ–º –µ–≥–æ
                    ray_validated_at = self._check_ray_validation_with_drawing(loy_fix, hi_pattern, candlesticks)
                    if ray_validated_at is not None:
                        self._draw_ray_validation(loy_fix, hi_pattern, candles)
                        # self._draw_prefix_area(fix_area, loy_fix, ray_validated_at)  # –£–±—Ä–∞–ª–∏ PREFIX
                        print(f"‚úÖ RAY validated at index {ray_validated_at}")
                
                # self._highlight_ocr_candle(ocr_candle_idx)  # –£–ë–†–ê–ù–û: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º YOUR MARK
                status_parts = ["üü£ FIX"]
                if loy_fix: status_parts.append("üî¥ LOY-FIX")
                if hi_pattern: status_parts.append("üü¢ HI-PATTERN")
                self.status(f"Showing: {' + '.join(status_parts)}")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ OCR —Å–≤–µ—á—É
                self._stored_fix_area = None
                self._stored_ocr_idx = ocr_candle_idx
                # self._highlight_ocr_candle(ocr_candle_idx)  # –£–ë–†–ê–ù–û: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º YOUR MARK
                self.status("‚ùå No FIX area found")
                
        except Exception as e:
            print(f"Error drawing partial pattern: {e}")
            
    def _draw_partial_fix(self, fix_area):
        """–†–∏—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ FIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫"""
        start_idx, end_idx, center_price, high_price, low_price = fix_area
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞ (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ _draw_fpf_pattern)
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        margin_left = 60
        margin_right = 20
        margin_top = 20
        margin_bottom = 60
        chart_width = canvas_width - margin_left - margin_right
        chart_height = canvas_height - margin_top - margin_bottom
        
        data_len = len(self.current_data)
        
        # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        highs = self.current_data['high'].values
        lows = self.current_data['low'].values
        min_price = float(lows.min())
        max_price = float(highs.max())
        price_range = max_price - min_price
        
        if price_range == 0:
            price_range = max_price * 0.01
            
        def idx_to_x(idx):
            return margin_left + (idx * chart_width / data_len)
            
        def price_to_y(price):
            return margin_top + (max_price - price) * chart_height / price_range
        
        # –†–∏—Å—É–µ–º FIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–π)
        fix_left = idx_to_x(start_idx)
        fix_right = idx_to_x(end_idx)
        fix_top = price_to_y(high_price)
        fix_bottom = price_to_y(low_price)
        
        fix_rect = self.canvas.create_rectangle(
            fix_left, fix_top, fix_right, fix_bottom,
            outline="#A56BFF", width=3, dash=(5, 3), fill=""
        )
        self._fix_items.append(fix_rect)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≥–ª–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (8x8 –ø–∏–∫—Å–µ–ª–µ–π)
        handle_size = 4
        
        # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        tl_handle = self.canvas.create_rectangle(
            fix_left - handle_size, fix_top - handle_size, 
            fix_left + handle_size, fix_top + handle_size,
            fill="#A56BFF", outline="white", width=1, tags="fix_handle"
        )
        self._fix_items.append(tl_handle)
        
        # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª  
        tr_handle = self.canvas.create_rectangle(
            fix_right - handle_size, fix_top - handle_size,
            fix_right + handle_size, fix_top + handle_size, 
            fill="#A56BFF", outline="white", width=1, tags="fix_handle"
        )
        self._fix_items.append(tr_handle)
        
        # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        bl_handle = self.canvas.create_rectangle(
            fix_left - handle_size, fix_bottom - handle_size,
            fix_left + handle_size, fix_bottom + handle_size,
            fill="#A56BFF", outline="white", width=1, tags="fix_handle" 
        )
        self._fix_items.append(bl_handle)
        
        # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
        br_handle = self.canvas.create_rectangle(
            fix_right - handle_size, fix_bottom - handle_size,
            fix_right + handle_size, fix_bottom + handle_size,
            fill="#A56BFF", outline="white", width=1, tags="fix_handle"
        )
        self._fix_items.append(br_handle)
        
        fix_label = self.canvas.create_text(
            (fix_left + fix_right) / 2, fix_top - 15,
            text="üü£ FIX", fill="#A56BFF", font=("Arial", 12, "bold")
        )
        self._fix_items.append(fix_label)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã FIX –æ–±–ª–∞—Å—Ç–∏ –∏ ID —É–≥–ª–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.fix_bounds = (fix_left, fix_top, fix_right, fix_bottom)
        self.fix_handles = [tl_handle, tr_handle, bl_handle, br_handle]
        
        print(f"‚úÖ Partial FIX drawn: {start_idx}-{end_idx} @ {low_price:.2f}-{high_price:.2f}")
        
    def _redraw_fix_area(self, left, top, right, bottom):
        """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç FIX –æ–±–ª–∞—Å—Ç—å —Å –Ω–æ–≤—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        fix_rect = self.canvas.create_rectangle(
            left, top, right, bottom,
            outline="#A56BFF", width=3, dash=(5, 3), fill="", tags="fix_rect"
        )
        self._fix_items.append(fix_rect)
        self.fix_rect_id = fix_rect  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        
        # –£–≥–ª–æ–≤—ã–µ —Ç–æ—á–∫–∏
        handle_size = 4
        
        # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        tl_handle = self.canvas.create_rectangle(
            left - handle_size, top - handle_size, 
            left + handle_size, top + handle_size,
            fill="#A56BFF", outline="white", width=1, tags="fix_handle"
        )
        self._fix_items.append(tl_handle)
        
        # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª  
        tr_handle = self.canvas.create_rectangle(
            right - handle_size, top - handle_size,
            right + handle_size, top + handle_size, 
            fill="#A56BFF", outline="white", width=1, tags="fix_handle"
        )
        self._fix_items.append(tr_handle)
        
        # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        bl_handle = self.canvas.create_rectangle(
            left - handle_size, bottom - handle_size,
            left + handle_size, bottom + handle_size,
            fill="#A56BFF", outline="white", width=1, tags="fix_handle" 
        )
        self._fix_items.append(bl_handle)
        
        # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
        br_handle = self.canvas.create_rectangle(
            right - handle_size, bottom - handle_size,
            right + handle_size, bottom + handle_size,
            fill="#A56BFF", outline="white", width=1, tags="fix_handle"
        )
        self._fix_items.append(br_handle)
        
        # –ü–æ–¥–ø–∏—Å—å
        fix_label = self.canvas.create_text(
            (left + right) / 2, top - 15,
            text="üü£ FIX", fill="#A56BFF", font=("Arial", 12, "bold")
        )
        self._fix_items.append(fix_label)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.fix_bounds = (left, top, right, bottom)
        self.fix_handles = [tl_handle, tr_handle, bl_handle, br_handle]
        
    def _draw_partial_loy_fix(self, loy_fix):
        """–†–∏—Å—É–µ—Ç LOY-FIX —Ç–æ—á–∫—É –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        if not loy_fix or self.current_data is None:
            return
            
        loy_idx, loy_price = loy_fix
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á—Ç–æ –∏ –¥–ª—è FIX
        margin_left = 40
        margin_top = 40
        chart_width = 2000
        chart_height = 800
        data_len = len(self.current_data)
        
        highs = self.current_data['high'].values
        lows = self.current_data['low'].values
        min_price = float(lows.min())
        max_price = float(highs.max())
        price_range = max_price - min_price
        
        if price_range == 0:
            price_range = max_price * 0.01
            
        def idx_to_x(idx):
            return margin_left + (idx * chart_width / data_len)
            
        def price_to_y(price):
            return margin_top + (max_price - price) * chart_height / price_range
        
        # –†–∏—Å—É–µ–º LOY-FIX —Ç–æ—á–∫—É (–∫—Ä–∞—Å–Ω–∞—è)
        loy_x = idx_to_x(loy_idx)
        loy_y = price_to_y(loy_price)
        
        loy_point = self.canvas.create_oval(
            loy_x - 3, loy_y - 3, loy_x + 3, loy_y + 3,
            fill="#FF4444", outline="white", width=1
        )
        self._loy_fix_items.append(loy_point)
        
        loy_label = self.canvas.create_text(
            loy_x, loy_y + 20,
            text="üî¥ LOY-FIX", fill="#FF4444", font=("Arial", 10, "bold")
        )
        self._loy_fix_items.append(loy_label)
        
    def _draw_partial_hi_pattern(self, hi_pattern):
        """–†–∏—Å—É–µ—Ç HI-PATTERN —Ç–æ—á–∫—É –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        if not hi_pattern or self.current_data is None:
            return
            
        hi_idx, hi_price = hi_pattern
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á—Ç–æ –∏ –¥–ª—è FIX
        margin_left = 40
        margin_top = 40
        chart_width = 2000
        chart_height = 800
        data_len = len(self.current_data)
        
        highs = self.current_data['high'].values
        lows = self.current_data['low'].values
        min_price = float(lows.min())
        max_price = float(highs.max())
        price_range = max_price - min_price
        
        if price_range == 0:
            price_range = max_price * 0.01
            
        def idx_to_x(idx):
            return margin_left + (idx * chart_width / data_len)
            
        def price_to_y(price):
            return margin_top + (max_price - price) * chart_height / price_range
        
        # –†–∏—Å—É–µ–º HI-PATTERN —Ç–æ—á–∫—É (–∑–µ–ª—ë–Ω–∞—è)
        hi_x = idx_to_x(hi_idx)
        hi_y = price_to_y(hi_price)
        
        hi_point = self.canvas.create_oval(
            hi_x - 6, hi_y - 6, hi_x + 6, hi_y + 6,
            fill="#44FF44", outline="white", width=2
        )
        self._hi_pattern_items.append(hi_point)
        
        hi_label = self.canvas.create_text(
            hi_x, hi_y - 20,
            text="üü¢ HI-PATTERN", fill="#44FF44", font=("Arial", 10, "bold")
        )
        self._hi_pattern_items.append(hi_label)
        
    def _draw_ray_validation(self, loy_fix, hi_pattern, candles_data):
        """–†–∏—Å—É–µ—Ç RAY - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç LOY-FIX"""
        if not loy_fix or not hi_pattern or not candles_data:
            return
            
        loy_idx, loy_price = loy_fix
        hi_idx, hi_price = hi_pattern
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á—Ç–æ –∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        margin_left = 40
        margin_top = 40
        chart_width = 2000
        chart_height = 800
        data_len = len(self.current_data)
        
        highs = self.current_data['high'].values
        lows = self.current_data['low'].values
        min_price = float(lows.min())
        max_price = float(highs.max())
        price_range = max_price - min_price
        
        if price_range == 0:
            price_range = max_price * 0.01
            
        def idx_to_x(idx):
            return margin_left + (idx * chart_width / data_len)
            
        def price_to_y(price):
            return margin_top + (max_price - price) * chart_height / price_range
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å–≤–µ—á—É –ø–æ—Å–ª–µ HI-PATTERN, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–±–∏–ª–∞ RAY –Ω–∞ 1-2 —Ç–∏–∫–∞
        ray_start_x = idx_to_x(loy_idx)
        ray_y = price_to_y(loy_price)
        ray_end_x = ray_start_x
        
        # –ò—â–µ–º –≥–¥–µ —Ü–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ RAY –≤–Ω–∏–∑
        for i in range(hi_idx + 1, min(len(candles_data), hi_idx + 50)):
            candle_low = candles_data[i][3]  # low price
            if candle_low < (loy_price - 0.02):  # –ø—Ä–æ–±–∏–ª–∏ –Ω–∞ 2 —Ç–∏–∫–∞ –≤–Ω–∏–∑
                ray_end_x = idx_to_x(i)
                break
        
        # –†–∏—Å—É–µ–º RAY –ª–∏–Ω–∏—é —Ç–æ–ª—å–∫–æ –≤–ø—Ä–∞–≤–æ –æ—Ç LOY-FIX
        if ray_end_x == ray_start_x:  # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–æ–±–æ–π, —Ä–∏—Å—É–µ–º –Ω–∞ 300 –ø–∏–∫—Å–µ–ª–µ–π –≤–ø—Ä–∞–≤–æ
            ray_end_x = min(ray_start_x + 300, chart_width + margin_left)
        
        ray_line = self.canvas.create_line(
            ray_start_x, ray_y, ray_end_x, ray_y,
            fill="#FFD700", width=2, dash=(5, 3)
        )
        self._ray_items.append(ray_line)
        
        ray_label = self.canvas.create_text(
            ray_end_x + 10, ray_y,
            text="RAY", fill="#FFD700", font=("Arial", 8, "bold")
        )
        self._ray_items.append(ray_label)
        
    def _draw_prefix_area(self, fix_area, loy_fix, ray_validated_at):
        """–†–∏—Å—É–µ—Ç PREFIX –æ–±–ª–∞—Å—Ç—å - —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –¥–ª—è —à–æ—Ä—Ç–∞ (–û–¢–ö–õ–Æ–ß–ï–ù–û - —Ñ–æ–∫—É—Å –Ω–∞ RAY)"""
        return  # –û—Ç–∫–ª—é—á–∏–ª–∏ PREFIX –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        if not fix_area or not loy_fix or ray_validated_at is None:
            return
            
        # PREFIX –ø–æ –≤—ã—Å–æ—Ç–µ —Ä–∞–≤–µ–Ω –æ–±–ª–∞—Å—Ç–∏ FIX
        fix_high = fix_area[3]
        fix_low = fix_area[4] 
        fix_height = fix_high - fix_low
        
        # PREFIX –æ–±–ª–∞—Å—Ç—å –ø–æ –≤—ã—Å–æ—Ç–µ —Ä–∞–≤–Ω–∞ FIX, —Ü–µ–Ω–∞ —á–∞—â–µ –∏–¥–µ—Ç –Ω–∏–∂–µ LOY-FIX
        loy_price = loy_fix[1]
        prefix_bottom = loy_price - fix_height * 0.5  # –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∏–∂–µ LOY-FIX
        prefix_top = prefix_bottom + fix_height
        
        # –ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ - –æ—Ç —Ç–æ—á–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ RAY –≤–ø—Ä–∞–≤–æ
        margin_left = 40
        chart_width = 2000
        data_len = len(self.current_data)
        
        def idx_to_x(idx):
            return margin_left + (idx * chart_width / data_len)
            
        highs = self.current_data['high'].values
        lows = self.current_data['low'].values
        min_price = float(lows.min())
        max_price = float(highs.max())
        price_range = max_price - min_price
        margin_top = 40
        chart_height = 800
        
        if price_range == 0:
            price_range = max_price * 0.01
            
        def price_to_y(price):
            return margin_top + (max_price - price) * chart_height / price_range
        
        prefix_left = idx_to_x(ray_validated_at)
        prefix_right = min(prefix_left + 200, chart_width + margin_left)  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
        prefix_top_y = price_to_y(prefix_top)
        prefix_bottom_y = price_to_y(prefix_bottom)
        
        # –†–∏—Å—É–µ–º PREFIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (–∑–µ–ª–µ–Ω—ã–π –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–π)
        prefix_rect = self.canvas.create_rectangle(
            prefix_left, prefix_top_y, prefix_right, prefix_bottom_y,
            outline="#00FF00", width=2, dash=(3, 3), fill="#00FF0020"
        )
        self._prefix_items.append(prefix_rect)
        
        prefix_label = self.canvas.create_text(
            prefix_left + 50, prefix_top_y - 15,
            text="üü¢ PREFIX", fill="#00FF00", font=("Arial", 10, "bold")
        )
        self._prefix_items.append(prefix_label)
        
    def _check_ray_validation_with_drawing(self, loy_fix, hi_pattern, candlesticks):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é RAY - –≥–¥–µ —Ü–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ —É—Ä–æ–≤–µ–Ω—å LOY-FIX –Ω–∞ 1-2 —Ç–∏–∫–∞ –≤–Ω–∏–∑"""
        if not loy_fix or not hi_pattern:
            return None
            
        loy_idx, loy_price = loy_fix
        hi_idx, hi_price = hi_pattern
        
        # –ò—â–µ–º –≥–¥–µ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ HI-PATTERN –ø—Ä–æ–±–∏–ª–∞ RAY —É—Ä–æ–≤–µ–Ω—å –≤–Ω–∏–∑
        for i in range(hi_idx + 1, min(len(candlesticks), hi_idx + 100)):
            candle_low = candlesticks[i].low
            if candle_low < (loy_price - 0.02):  # –ø—Ä–æ–±–∏–ª–∏ –Ω–∞ 2 —Ç–∏–∫–∞ (0.02) –≤–Ω–∏–∑
                print(f"RAY validation: candle {i} broke below {loy_price:.2f} at {candle_low:.2f}")
                return i  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
                
        return None  # RAY –Ω–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω
        
    def _highlight_ocr_candle(self, ocr_idx):
        """–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç OCR —Å–≤–µ—á—É (–∫–æ—Ç–æ—Ä—É—é –æ–±–æ–∑–Ω–∞—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"""
        if ocr_idx is None or self.current_data is None:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        margin_left = 60
        margin_right = 20
        margin_top = 20
        margin_bottom = 60
        chart_width = canvas_width - margin_left - margin_right
        chart_height = canvas_height - margin_top - margin_bottom
        
        data_len = len(self.current_data)
        
        # –ü–æ–∑–∏—Ü–∏—è OCR —Å–≤–µ—á–∏
        candle_width = max(1, chart_width // data_len - 1)
        x = margin_left + (ocr_idx * chart_width / data_len)
        
        # –†–∏—Å—É–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É OCR —Å–≤–µ—á–∏ (–æ—Ä–∞–Ω–∂–µ–≤–∞—è –æ–±–≤–æ–¥–∫–∞)
        highlight = self.canvas.create_rectangle(
            x - 2, margin_top - 2,
            x + candle_width + 2, margin_top + chart_height + 2,
            outline="#FF6600", width=2, dash=(3, 3), fill=""
        )
        self._fix_items.append(highlight)
        
        # –ü–æ–¥–ø–∏—Å—å
        ocr_label = self.canvas.create_text(
            x + candle_width//2, margin_top + chart_height + 40,
            text="üìç YOUR MARK", fill="#FF6600", font=("Arial", 9, "bold")
        )
        self._fix_items.append(ocr_label)
        
    def _draw_partial_fix_direct(self, fix_area, margin_left, margin_top, chart_width, chart_height, min_price, max_price, data_len):
        """–†–∏—Å—É–µ—Ç FIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞–ø—Ä—è–º—É—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        start_idx, end_idx, center_price, high_price, low_price = fix_area
        
        price_range = max_price - min_price
        if price_range == 0:
            price_range = max_price * 0.01
            
        def idx_to_x(idx):
            return margin_left + (idx * chart_width / data_len)
            
        def price_to_y(price):
            return margin_top + (max_price - price) * chart_height / price_range
        
        # –†–∏—Å—É–µ–º FIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–π)
        fix_left = idx_to_x(start_idx)
        fix_right = idx_to_x(end_idx)
        fix_top = price_to_y(high_price)
        fix_bottom = price_to_y(low_price)
        
        fix_rect = self.canvas.create_rectangle(
            fix_left, fix_top, fix_right, fix_bottom,
            outline="#A56BFF", width=3, dash=(5, 3), fill=""
        )
        self._fix_items.append(fix_rect)
        
        fix_label = self.canvas.create_text(
            (fix_left + fix_right) / 2, fix_top - 15,
            text="üü£ FIX", fill="#A56BFF", font=("Arial", 12, "bold")
        )
        self._fix_items.append(fix_label)
        
    def _highlight_ocr_candle_direct(self, ocr_idx, margin_left, margin_top, chart_width, chart_height, data_len):
        """–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç OCR —Å–≤–µ—á—É –Ω–∞–ø—Ä—è–º—É—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        candle_width = max(1, chart_width // data_len - 1)
        x = margin_left + (ocr_idx * chart_width / data_len)
        
        # –†–∏—Å—É–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É OCR —Å–≤–µ—á–∏ (–æ—Ä–∞–Ω–∂–µ–≤–∞—è –æ–±–≤–æ–¥–∫–∞)
        highlight = self.canvas.create_rectangle(
            x - 2, margin_top - 2,
            x + candle_width + 2, margin_top + chart_height + 2,
            outline="#FF6600", width=2, dash=(3, 3), fill=""
        )
        self._fix_items.append(highlight)
        
        # –ü–æ–¥–ø–∏—Å—å
        ocr_label = self.canvas.create_text(
            x + candle_width//2, margin_top + chart_height + 40,
            text="üìç YOUR MARK", fill="#FF6600", font=("Arial", 9, "bold")
        )
        self._fix_items.append(ocr_label)
        
    def _redraw_stored_elements(self):
        """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ FIX —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è canvas"""
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ FIX —ç–ª–µ–º–µ–Ω—Ç—ã —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        for item in self._fix_items:
            try:
                self.canvas.delete(item)
            except:
                pass
        self._fix_items.clear()
        
        # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if self._stored_fix_area is not None:
            self._draw_partial_fix(self._stored_fix_area)
            
        if self._stored_ocr_idx is not None:
            self._highlight_ocr_candle(self._stored_ocr_idx)
        
    def _clear_chart(self):
        """–û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä–∞—Ñ–∏–∫–∞
        for item in self._series_items + self._axis_items:
            self.canvas.delete(item)
        self._series_items.clear()
        self._axis_items.clear()
        
        # –£–¥–∞–ª—è–µ–º FPF —ç–ª–µ–º–µ–Ω—Ç—ã
        self._clear_fpf_pattern()
        
    def _clear_fpf_pattern(self):
        """–û—á–∏—Å—Ç–∫–∞ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞"""
        for items in [self._fix_items, self._ray_items,  # self._prefix_items, 
                     self._hi_pattern_items, self._loy_fix_items]:
            for item in items:
                self.canvas.delete(item)
            items.clear()
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._stored_fix_area = None
        self._stored_ocr_idx = None
            
    def _clear_all(self):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"""
        self._clear_chart()
        
        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
        self.current_data = None
        self.current_pattern = None
        self.ocr_result = None
        
        # –°–±—Ä–æ—Å UI
        self.symbol_var.set("")
        self.timeframe_var.set("")
        self.datetime_var.set("")
        self.pattern_status.set("Not analyzed")
        self.confidence_var.set("")
        
        self.status("üóëÔ∏è Cleared all data")
        
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Canvas –∏ –æ–∫–Ω–∞
    def _on_canvas_click(self, event):
        """–ö–ª–∏–∫ –ø–æ canvas - –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —É–≥–ª–æ–≤–æ–π —Ç–æ—á–∫–∏ –∏–ª–∏ –≤—Å–µ–≥–æ FIX"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–ª–∏–∫–Ω—É–ª–∏ –ª–∏ –º—ã –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç FIX
        clicked_item = self.canvas.find_closest(event.x, event.y)[0]
        item_tags = self.canvas.gettags(clicked_item)
        
        if "fix_handle" in item_tags:
            # –ö–ª–∏–∫ –ø–æ —É–≥–ª–æ–≤–æ–π —Ç–æ—á–∫–µ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            self.dragging_handle = clicked_item
            self.dragging_whole_fix = False
            self.drag_start_x = event.x
            self.drag_start_y = event.y
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if self.fix_bounds:
                self.original_fix_bounds = self.fix_bounds
            self.canvas.config(cursor="fleur")  # –ú–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä
            
        elif "fix_rect" in item_tags or clicked_item == self.fix_rect_id:
            # –ö–ª–∏–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫—É - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ–≥–æ FIX
            self.dragging_whole_fix = True
            self.dragging_handle = None
            self.drag_start_x = event.x
            self.drag_start_y = event.y
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            if self.fix_bounds:
                self.original_fix_bounds = self.fix_bounds
            self.canvas.config(cursor="move")  # –ö—É—Ä—Å–æ—Ä –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        
    def _on_canvas_drag(self, event):
        """–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø–æ canvas - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ"""
        if self.dragging_whole_fix and self.original_fix_bounds:
            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—Å–µ–≥–æ FIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
            dx = event.x - self.drag_start_x
            dy = event.y - self.drag_start_y
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∏ —Å–º–µ—â–∞–µ–º –∏—Ö
            left, top, right, bottom = self.original_fix_bounds
            new_left = left + dx
            new_top = top + dy
            new_right = right + dx
            new_bottom = bottom + dy
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            if self.preview_rect:
                self.canvas.delete(self.preview_rect)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–∑–µ–ª—ë–Ω—ã–π)
            self.preview_rect = self.canvas.create_rectangle(
                new_left, new_top, new_right, new_bottom,
                outline="#6BFF6B", width=2, dash=(3, 2), fill=""
            )
            
        elif self.dragging_handle and self.original_fix_bounds and self.fix_handles:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —É–≥–æ–ª —Ç–∞—â–∏–º
            handle_index = None
            for i, handle in enumerate(self.fix_handles):
                if handle == self.dragging_handle:
                    handle_index = i
                    break
            
            if handle_index is not None:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
                left, top, right, bottom = self.original_fix_bounds
                
                # –ò–∑–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–π —É–≥–æ–ª —Ç–∞—â–∏–º
                if handle_index == 0:  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
                    left = event.x
                    top = event.y
                elif handle_index == 1:  # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
                    right = event.x  
                    top = event.y
                elif handle_index == 2:  # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
                    left = event.x
                    bottom = event.y
                elif handle_index == 3:  # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
                    right = event.x
                    bottom = event.y
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
                if right > left and bottom > top:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                    if self.preview_rect:
                        self.canvas.delete(self.preview_rect)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (–±–æ–ª–µ–µ —è—Ä–∫–∏–π)
                    self.preview_rect = self.canvas.create_rectangle(
                        left, top, right, bottom,
                        outline="#FF6BFF", width=2, dash=(3, 2), fill=""
                    )
            
    def _on_canvas_release(self, event):
        """–û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if self.dragging_whole_fix and self.original_fix_bounds:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤—Å–µ–≥–æ FIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
            dx = event.x - self.drag_start_x
            dy = event.y - self.drag_start_y
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
            left, top, right, bottom = self.original_fix_bounds
            new_left = left + dx
            new_top = top + dy
            new_right = right + dx
            new_bottom = bottom + dy
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            if self.preview_rect:
                self.canvas.delete(self.preview_rect)
                self.preview_rect = None
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã FIX
            for item in self._fix_items:
                self.canvas.delete(item)
            self._fix_items.clear()
            
            # –†–∏—Å—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π FIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
            self._redraw_fix_area(new_left, new_top, new_right, new_bottom)
            
        elif self.dragging_handle and self.original_fix_bounds and self.fix_handles:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —É–≥–æ–ª —Ç–∞—â–∏–ª–∏
            handle_index = None
            for i, handle in enumerate(self.fix_handles):
                if handle == self.dragging_handle:
                    handle_index = i
                    break
            
            if handle_index is not None:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
                left, top, right, bottom = self.original_fix_bounds
                
                if handle_index == 0:  # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
                    left = event.x
                    top = event.y
                elif handle_index == 1:  # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
                    right = event.x  
                    top = event.y
                elif handle_index == 2:  # –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
                    left = event.x
                    bottom = event.y
                elif handle_index == 3:  # –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
                    right = event.x
                    bottom = event.y
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
                if right > left and bottom > top:
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                    if self.preview_rect:
                        self.canvas.delete(self.preview_rect)
                        self.preview_rect = None
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã FIX
                    for item in self._fix_items:
                        self.canvas.delete(item)
                    self._fix_items.clear()
                    
                    # –†–∏—Å—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π FIX –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
                    self._redraw_fix_area(left, top, right, bottom)
            
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self.dragging_handle = None
        self.dragging_whole_fix = False
        self.original_fix_bounds = None
        self.canvas.config(cursor="")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å–æ—Ä
        
    def _on_canvas_scroll(self, event):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ canvas"""
        pass
        
    def _on_canvas_enter(self, event):
        """–í—Ö–æ–¥ –º—ã—à–∏ –≤ –æ–±–ª–∞—Å—Ç—å canvas"""
        pass
        
    def _on_canvas_motion(self, event):
        """–î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –ø–æ canvas - –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —É–≥–ª–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        if not self.dragging_handle and not self.dragging_whole_fix:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ FIX
                closest_items = self.canvas.find_closest(event.x, event.y)
                if closest_items:
                    item_under_cursor = closest_items[0]
                    item_tags = self.canvas.gettags(item_under_cursor)
                    
                    if "fix_handle" in item_tags:
                        self.canvas.config(cursor="fleur")  # –ö—É—Ä—Å–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                    elif "fix_rect" in item_tags or item_under_cursor == self.fix_rect_id:
                        self.canvas.config(cursor="move")   # –ö—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                    else:
                        self.canvas.config(cursor="")       # –û–±—ã—á–Ω—ã–π –∫—É—Ä—Å–æ—Ä
            except (IndexError, tk.TclError):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                pass
        
    def _on_window_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫"""
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (–Ω–µ canvas)
        if hasattr(self, 'current_data') and self.current_data is not None and event.widget == self:
            self.after(100, self._draw_chart)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

    def _on_canvas_event(self, event):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π canvas"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —Ü–∏–∫–ª–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
        pass


def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        app = HybridTVIngest()
        app.status("üöÄ Ultimate FPF Bot ready!")
        app.mainloop()
    except Exception as e:
        print(f"‚ùå App failed to start: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()