"""
TV Ingest Refactored - –º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π tv_ingest_hybrid.py, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
"""
import sys
import pathlib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
_here = pathlib.Path(__file__).resolve()
_proj_root = _here.parent.parent
if str(_proj_root) not in sys.path:
    sys.path.insert(0, str(_proj_root))

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from ui.tv_ingest_window import TVIngestWindow
from ui.pattern_analyzer import PatternAnalyzer  
from visualization.pattern_drawer import FPFPatternDrawer
from visualization.chart_renderer import ChartRenderer


class TVIngestApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TV Ingest —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        print("üöÄ Starting Refactored FPF Bot...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.window = TVIngestWindow()
        self.analyzer = PatternAnalyzer()
        self.pattern_drawer = FPFPatternDrawer(self.window.canvas)
        self.chart_renderer = ChartRenderer(self.window.canvas)
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏ (–ø–∞—Ç—Ç–µ—Ä–Ω Observer)
        self._setup_callbacks()
        
        print("‚úÖ Refactored TV Ingest initialized")
        
    def _setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        # UI -> Analyzer (—Ä–∞–∑–¥–µ–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –∞–Ω–∞–ª–∏–∑)
        self.window.on_image_loaded = self._on_image_loaded
        self.window.on_pattern_analyze = self._manual_analyze
        
        # Analyzer -> UI
        self.analyzer.on_status_update = self.window.status
        self.analyzer.on_chart_draw = self._on_chart_draw
        self.analyzer.on_pattern_found = self._on_pattern_found
        
    def _on_image_loaded(self, image_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)"""
        self.window.status(f"üì∑ Image loaded. Click 'Analyze FPF' to start.")
        
    def _manual_analyze(self):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.window.current_image_path:
            self.analyzer.analyze_image(self.window.current_image_path)
        else:
            self.window.status("‚ùå No image loaded")
            
    def _on_chart_draw(self, data):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        self.chart_renderer.draw_chart(data)
        
    def _on_pattern_found(self, pattern, candlesticks, ocr_candle_idx):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        self.pattern_drawer.clear_pattern()
        
        # –†–∏—Å—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if hasattr(pattern, 'fix_area') and pattern.fix_area:
            self.pattern_drawer.draw_fix_area(pattern.fix_area, candlesticks)
            
        if hasattr(pattern, 'loy_fix') and pattern.loy_fix:
            self.pattern_drawer.draw_loy_fix(pattern.loy_fix, candlesticks)
            
        if hasattr(pattern, 'hi_pattern') and pattern.hi_pattern:
            self.pattern_drawer.draw_hi_pattern(pattern.hi_pattern, candlesticks)
            
        # –†–∏—Å—É–µ–º RAY –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–ª–Ω—ã–π
        if getattr(pattern, 'is_complete', True):
            if hasattr(pattern, 'loy_fix') and hasattr(pattern, 'hi_pattern'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é RAY
                ray_validated_at = self._check_ray_validation(
                    pattern.loy_fix, pattern.hi_pattern, candlesticks
                )
                self.pattern_drawer.draw_ray(
                    pattern.loy_fix, pattern.hi_pattern, candlesticks, ray_validated_at
                )
                
        # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º OCR —Å–≤–µ—á—É
        if ocr_candle_idx is not None:
            self.chart_renderer.highlight_candle(ocr_candle_idx, self.analyzer.current_data)
            
        self.window.status("‚úÖ Pattern visualization complete")
        
    def _check_ray_validation(self, loy_fix, hi_pattern, candlesticks):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ RAY"""
        if not loy_fix or not hi_pattern:
            return None
            
        loy_idx, loy_price = loy_fix
        hi_idx, hi_price = hi_pattern
        
        # –ò—â–µ–º –≥–¥–µ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ HI-PATTERN –ø—Ä–æ–±–∏–ª–∞ RAY —É—Ä–æ–≤–µ–Ω—å –≤–Ω–∏–∑
        for i in range(hi_idx + 1, min(len(candlesticks), hi_idx + 50)):
            candle_low = candlesticks[i].low
            if candle_low < (loy_price - 0.02):  # –ø—Ä–æ–±–∏–ª–∏ –Ω–∞ 2 —Ç–∏–∫–∞ –≤–Ω–∏–∑
                print(f"RAY validation: candle {i} broke below {loy_price:.2f} at {candle_low:.2f}")
                return i
                
        return None
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.window.mainloop()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    app = TVIngestApp()
    app.run()


if __name__ == "__main__":
    main()