"""
Snapp - –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä FPF –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ TradingView
Just snap, analyze, trade! üì∏
"""
import sys
import pathlib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
_here = pathlib.Path(__file__).resolve()
_proj_root = _here.parent.parent
if str(_proj_root) not in sys.path:
    sys.path.insert(0, str(_proj_root))

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from ui.tv_ingest_window import TVIngestWindow
from ui.pattern_analyzer import PatternAnalyzer  
from visualization.pattern_drawer import FPFPatternDrawer
from visualization.chart_renderer import ChartRenderer


class FPFSnapApp:
    """FPF Snap - –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    
    def __init__(self):
        print("üì∏ Starting FPF Snap...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.window = TVIngestWindow()
        self.analyzer = PatternAnalyzer()
        self.pattern_drawer = FPFPatternDrawer(self.window.canvas)
        self.chart_renderer = ChartRenderer(self.window.canvas)
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏ (–ø–∞—Ç—Ç–µ—Ä–Ω Observer)
        self._setup_callbacks()
        
        print("‚úÖ FPF Snap ready for pattern analysis")
        
    def _setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        # UI -> Analyzer (—Ä–∞–∑–¥–µ–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –∞–Ω–∞–ª–∏–∑)
        self.window.on_image_loaded = self._on_image_loaded
        self.window.on_pattern_analyze = self._manual_analyze
        self.window.on_canvas_resize = self._on_canvas_resize
        self.window.on_fix_area_changed = self._on_fix_area_changed
        self.window.on_take_profit_area_changed = self._on_take_profit_area_changed
        
        # Analyzer -> UI
        self.analyzer.on_status_update = self.window.status
        self.analyzer.on_chart_draw = self._on_chart_draw
        self.analyzer.on_pattern_found = self._on_pattern_found
        
    def _on_image_loaded(self, image_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        self.window.status("üì∑ Image loaded, starting automatic analysis...")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        self.analyzer.analyze_image(image_path)
        
    def _manual_analyze(self):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.window.current_image_path:
            self.analyzer.analyze_image(self.window.current_image_path)
        else:
            self.window.status("‚ùå No image loaded")
            
    def _on_canvas_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
        if hasattr(self.chart_renderer, 'current_data') and self.chart_renderer.current_data is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ PREFIX –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            prefix_was_drawn = getattr(self, '_prefix_drawn', False)
            
            # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º canvas –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            self.window.canvas.delete("all")
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ø–∏—Å–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.pattern_drawer.clear_pattern()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ PREFIX
            self._prefix_drawn = prefix_was_drawn
            
            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
            self.chart_renderer.draw_chart(self.chart_renderer.current_data)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
            if hasattr(self, '_last_pattern') and self._last_pattern:
                self._draw_fpf_pattern(self._last_pattern, self._last_candlesticks)
        
    def _on_chart_draw(self, data):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        self.chart_renderer.draw_chart(data)
        
    def _on_pattern_found(self, pattern, candlesticks, ocr_candle_idx):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        self._last_pattern = pattern
        self._last_candlesticks = candlesticks
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–µ
        self._prefix_drawn = False
        self._take_profit_drawn = False
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        self.pattern_drawer.clear_pattern()
        
        # –†–∏—Å—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        self._draw_fpf_pattern(pattern, candlesticks)
        
    def _draw_fpf_pattern(self, pattern, candlesticks):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ FPF –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        
        # –†–∏—Å—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        fix_area = None
        if hasattr(pattern, 'fix_area') and pattern.fix_area:
            fix_area = pattern.fix_area
            self.pattern_drawer.draw_fix_area(pattern.fix_area, candlesticks)
        elif hasattr(pattern, 'fix_start_idx') and hasattr(pattern, 'fix_end_idx'):
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è FIX –æ–±–ª–∞—Å—Ç–∏ –∏–∑ FpfPattern
            fix_area = (pattern.fix_start_idx, pattern.fix_end_idx, pattern.fix_low, pattern.fix_high)
            self.pattern_drawer.draw_fix_area(fix_area, candlesticks)
            
        # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –∏ —Ä–∏—Å—É–µ–º TAKE PROFIT –æ–±–ª–∞—Å—Ç—å (—Ñ–ª—ç—Ç –ø–µ—Ä–µ–¥ FIX)
        if fix_area:
            take_profit_area = self.pattern_drawer.detect_take_profit_area(candlesticks, fix_area)
            if take_profit_area:
                self.pattern_drawer.draw_take_profit_area(take_profit_area, candlesticks)
                self._last_take_profit_area = take_profit_area  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
                self._take_profit_drawn = True
                print(f"‚úÖ TAKE PROFIT –æ–±–ª–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            
        if hasattr(pattern, 'loy_fix') and pattern.loy_fix:
            self.pattern_drawer.draw_loy_fix(pattern.loy_fix, candlesticks)
        elif hasattr(pattern, 'loy_fix_idx') and hasattr(pattern, 'loy_fix_price'):
            # –ò–∑ FpfPattern –æ–±—ä–µ–∫—Ç–∞
            loy_fix = (pattern.loy_fix_idx, pattern.loy_fix_price)
            self.pattern_drawer.draw_loy_fix(loy_fix, candlesticks)
            
        if hasattr(pattern, 'hi_pattern') and pattern.hi_pattern:
            self.pattern_drawer.draw_hi_pattern(pattern.hi_pattern, candlesticks)
        elif hasattr(pattern, 'hi_pattern_idx') and hasattr(pattern, 'hi_pattern_price'):
            # –ò–∑ FpfPattern –æ–±—ä–µ–∫—Ç–∞
            hi_pattern = (pattern.hi_pattern_idx, pattern.hi_pattern_price)
            self.pattern_drawer.draw_hi_pattern(hi_pattern, candlesticks)
            
        # –†–∏—Å—É–µ–º RAY –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ—à–ª–∞ –≤–Ω–∏–∑ –æ—Ç HI-PATTERN (–ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π)
        if getattr(pattern, 'is_complete', True):
            if hasattr(pattern, 'loy_fix_idx') and hasattr(pattern, 'hi_pattern_idx'):
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è draw_ray
                loy_fix = (pattern.loy_fix_idx, pattern.loy_fix_price)
                hi_pattern = (pattern.hi_pattern_idx, pattern.hi_pattern_price)
                
                # –ü–†–û–í–ï–†–ö–ê –ü–û –ë–ê–ó–ï: RAY —Ä–∏—Å—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ "—Ü–µ–Ω–∞ –æ—Ç Hi-pattern –ø–æ—à–ª–∞ –≤–Ω–∏–∑"
                price_went_down = self._check_price_went_down_from_hi_pattern(
                    hi_pattern, candlesticks
                )
                
                if price_went_down:
                    print(f"‚úÖ –¶–µ–Ω–∞ –ø–æ—à–ª–∞ –≤–Ω–∏–∑ –æ—Ç HI-PATTERN - —Ä–∏—Å—É–µ–º RAY")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é RAY
                    ray_validated_at = self._check_ray_validation(
                        loy_fix, hi_pattern, candlesticks
                    )
                    print(f"üîç RAY: loy_fix={loy_fix}, hi_pattern={hi_pattern}")
                    self.pattern_drawer.draw_ray(
                        loy_fix, hi_pattern, candlesticks, ray_validated_at
                    )
                    print("‚úÖ RAY –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º - –µ—Å–ª–∏ RAY –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω, —Ä–∏—Å—É–µ–º PREFIX (–≤–∫–ª—é—á–∞—è –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ)
                    if ray_validated_at is not None and (not hasattr(self, '_prefix_drawn') or not getattr(self.pattern_drawer, '_prefix_items', [])):
                        # –ü–æ–ª—É—á–∞–µ–º FIX –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PREFIX  
                        fix_area = None
                        if hasattr(pattern, 'fix_area') and pattern.fix_area:
                            fix_area = pattern.fix_area
                        elif hasattr(pattern, 'fix_start_idx') and hasattr(pattern, 'fix_end_idx'):
                            fix_area = (pattern.fix_start_idx, pattern.fix_end_idx, pattern.fix_low, pattern.fix_high)
                        
                        if fix_area:
                            ray_level = pattern.loy_fix_price  # —É—Ä–æ–≤–µ–Ω—å RAY = LOY-FIX —Ü–µ–Ω–∞
                            self.pattern_drawer.draw_prefix_area(fix_area, ray_level, candlesticks, ray_validated_at)
                            print(f"‚úÖ PREFIX –æ–±–ª–∞—Å—Ç—å –ø–æ—è–≤–∏–ª–∞—Å—å –ü–û–°–õ–ï –≤–∞–ª–∏–¥–∞—Ü–∏–∏ RAY –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ {ray_validated_at}")
                            self._prefix_drawn = True  # —Ñ–ª–∞–≥ —á—Ç–æ PREFIX —É–∂–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω
                            self._ray_validated_at = ray_validated_at  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                else:
                    print(f"‚è≥ –¶–µ–Ω–∞ –µ—â–µ –Ω–µ –ø–æ—à–ª–∞ –≤–Ω–∏–∑ –æ—Ç HI-PATTERN - RAY –Ω–µ —Ä–∏—Å—É–µ–º")
            else:
                print(f"‚ùå RAY –Ω–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω - pattern attributes: {dir(pattern)}")
                
        # –£–±—Ä–∞–ª–∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É OCR —Å–≤–µ—á–∏ - –Ω–µ –Ω—É–∂–Ω–∞
            
        self.window.status("‚úÖ Pattern visualization complete")
    
    def _on_fix_area_changed(self, fix_coords):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è FIX –æ–±–ª–∞—Å—Ç–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º PREFIX"""
        print(f"üîÑ FIX –æ–±–ª–∞—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: {fix_coords}")
        
        # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω –∏ PREFIX –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω
        if hasattr(self, '_last_pattern') and self._last_pattern and hasattr(self, '_prefix_drawn') and self._prefix_drawn:
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º PREFIX –æ–±–ª–∞—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π FIX")
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º PREFIX —Å –Ω–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ FIX
            self._update_prefix_from_canvas_coords(fix_coords)
            
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é TAKE PROFIT –æ–±–ª–∞—Å—Ç—å –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self, '_take_profit_drawn') and self._take_profit_drawn:
                self._update_take_profit_relative_to_fix(fix_coords)
    
    def _update_prefix_from_canvas_coords(self, fix_coords):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç PREFIX –æ–±–ª–∞—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö canvas –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç FIX"""
        if not hasattr(self, '_last_candlesticks') or not self._last_candlesticks:
            return
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ü–µ–Ω–æ–≤—ã–µ
        pattern = self._last_pattern
        candlesticks = self._last_candlesticks
        
        # –ü–æ–ª—É—á–∞–µ–º canvas —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        canvas_width, canvas_height = self.window.get_canvas_size()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ü–µ–Ω—ã
        canvas_left, canvas_top, canvas_right, canvas_bottom = fix_coords['canvas']
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å chart_renderer)
        margin_left = 50  # –∏–∑ chart_renderer
        margin_top = 30
        chart_width = canvas_width - margin_left - 10
        chart_height = canvas_height - margin_top - 50
        
        # –ù–∞–π–¥–µ–º min/max —Ü–µ–Ω—ã –¥–ª—è scale
        all_prices = []
        for candle in candlesticks:
            all_prices.extend([candle.high, candle.low])
        min_price = min(all_prices)
        max_price = max(all_prices)
        price_range = max_price - min_price
        
        if price_range == 0:
            price_range = max_price * 0.01
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ü–µ–Ω—ã
        new_fix_high = max_price - (canvas_top - margin_top) * price_range / chart_height
        new_fix_low = max_price - (canvas_bottom - margin_top) * price_range / chart_height
        
        print(f"üîÑ –ù–æ–≤—ã–µ —Ü–µ–Ω—ã FIX: {new_fix_low:.2f} - {new_fix_high:.2f}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º pattern –æ–±—ä–µ–∫—Ç
        if hasattr(pattern, 'fix_high') and hasattr(pattern, 'fix_low'):
            pattern.fix_high = new_fix_high
            pattern.fix_low = new_fix_low
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é PREFIX –æ–±–ª–∞—Å—Ç—å
        if hasattr(self.pattern_drawer, '_prefix_items'):
            for item in self.pattern_drawer._prefix_items:
                self.window.canvas.delete(item)
            self.pattern_drawer._prefix_items.clear()
        
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º PREFIX —Å –Ω–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        if hasattr(pattern, 'loy_fix_price') and hasattr(self, '_ray_validated_at'):
            fix_area = (pattern.fix_start_idx, pattern.fix_end_idx, new_fix_low, new_fix_high)
            ray_level = pattern.loy_fix_price
            self.pattern_drawer.draw_prefix_area(fix_area, ray_level, candlesticks, self._ray_validated_at)
            print("‚úÖ PREFIX –æ–±–ª–∞—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π FIX –æ–±–ª–∞—Å—Ç–∏")
            
    def _on_take_profit_area_changed(self, tp_coords):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è TAKE PROFIT –æ–±–ª–∞—Å—Ç–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏"""
        print(f"üîÑ TAKE PROFIT –æ–±–ª–∞—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: {tp_coords}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã TAKE PROFIT
        if hasattr(self, '_last_take_profit_area'):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ canvas –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self._update_take_profit_from_canvas_coords(tp_coords)
            
    def _update_take_profit_relative_to_fix(self, fix_coords):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç TAKE PROFIT –æ–±–ª–∞—Å—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ FIX (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å)"""
        if not hasattr(self, '_last_take_profit_area') or not hasattr(self, '_last_candlesticks'):
            return
            
        # –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ TAKE PROFIT –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º –æ—Ç FIX
        # –ù–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print("üîó TAKE PROFIT –æ–±–ª–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π FIX")
        
    def _update_take_profit_from_canvas_coords(self, tp_coords):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç TAKE PROFIT –æ–±–ª–∞—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö canvas –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        if not hasattr(self, '_last_candlesticks') or not self._last_candlesticks:
            return
            
        candlesticks = self._last_candlesticks
        
        # –ü–æ–ª—É—á–∞–µ–º canvas —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        canvas_width, canvas_height = self.window.get_canvas_size()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ü–µ–Ω—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ PREFIX –ª–æ–≥–∏–∫–µ)
        canvas_left, canvas_top, canvas_right, canvas_bottom = tp_coords['canvas']
        
        margin_left = 50  # –∏–∑ chart_renderer
        margin_top = 30
        chart_width = canvas_width - margin_left - 10
        chart_height = canvas_height - margin_top - 50
        
        # –ù–∞–π–¥–µ–º min/max —Ü–µ–Ω—ã –¥–ª—è scale
        all_prices = []
        for candle in candlesticks:
            all_prices.extend([candle.high, candle.low])
        min_price = min(all_prices)
        max_price = max(all_prices)
        price_range = max_price - min_price
        
        if price_range == 0:
            price_range = max_price * 0.01
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ü–µ–Ω—ã
        new_tp_high = max_price - (canvas_top - margin_top) * price_range / chart_height
        new_tp_low = max_price - (canvas_bottom - margin_top) * price_range / chart_height
        
        print(f"üîÑ –ù–æ–≤—ã–µ —Ü–µ–Ω—ã TAKE PROFIT: {new_tp_low:.2f} - {new_tp_high:.2f}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        if hasattr(self, '_last_take_profit_area'):
            tp_start_idx, tp_end_idx = self._last_take_profit_area[0], self._last_take_profit_area[1]
            self._last_take_profit_area = (tp_start_idx, tp_end_idx, new_tp_low, new_tp_high)
            print("‚úÖ TAKE PROFIT –æ–±–ª–∞—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    def _check_price_went_down_from_hi_pattern(self, hi_pattern, candlesticks):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ü–µ–Ω–∞ –ø–æ—à–ª–∞ –≤–Ω–∏–∑ –æ—Ç HI-PATTERN (–ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π)
        –ë–∞–∑–∞: "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω–∞ –æ—Ç Hi-pattern –ø–æ—à–ª–∞ –≤–Ω–∏–∑, —Ä–∏—Å—É–µ–º RAY"
        """
        if not hi_pattern or not candlesticks:
            return False
            
        hi_idx, hi_price = hi_pattern
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤–µ—á–∏ –ø–æ—Å–ª–µ HI-PATTERN
        if hi_idx >= len(candlesticks) - 1:
            return False
            
        # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è –≤–Ω–∏–∑ –ø–æ—Å–ª–µ HI-PATTERN
        # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 1-2 —Å–≤–µ—á–µ–π —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –Ω–∏–∂–µ HI-PATTERN
        down_moves = 0
        for i in range(hi_idx + 1, min(len(candlesticks), hi_idx + 5)):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º 4 —Å–≤–µ—á–∏
            candle = candlesticks[i]
            
            # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ HI-PATTERN —Ü–µ–Ω—ã - —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑
            if candle.close < hi_price:
                down_moves += 1
                
            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã 2 —Å–≤–µ—á–∏ –∑–∞–∫—Ä—ã–ª–∏—Å—å –Ω–∏–∂–µ - —Ü–µ–Ω–∞ –ø–æ—à–ª–∞ –≤–Ω–∏–∑
            if down_moves >= 2:
                print(f"‚úÖ –¶–µ–Ω–∞ –ø–æ—à–ª–∞ –≤–Ω–∏–∑: —Å–≤–µ—á–∞ #{i} close={candle.close:.2f} < hi_price={hi_price:.2f}")
                return True
                
        print(f"‚è≥ –¶–µ–Ω–∞ –µ—â–µ –Ω–µ –ø–æ—à–ª–∞ –≤–Ω–∏–∑ –æ—Ç HI-PATTERN ({hi_price:.2f}), down_moves={down_moves}")
        return False

    def _check_ray_validation(self, loy_fix, hi_pattern, candlesticks):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ RAY"""
        if not loy_fix or not hi_pattern:
            return None
            
        loy_idx, loy_price = loy_fix
        hi_idx, hi_price = hi_pattern
        
        # –ò—â–µ–º –≥–¥–µ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ HI-PATTERN –ø—Ä–æ–±–∏–ª–∞ RAY —É—Ä–æ–≤–µ–Ω—å –≤–Ω–∏–∑
        for i in range(hi_idx + 1, min(len(candlesticks), hi_idx + 50)):
            candle_low = candlesticks[i].low
            if candle_low < (loy_price - 0.02):  # –ø—Ä–æ–±–∏–ª–∏ –Ω–∞ 2 —Ç–∏–∫–∞ –≤–Ω–∏–∑
                print(f"RAY validation: candle {i} broke below {loy_price:.2f} at {candle_low:.2f}")
                return i
                
        return None
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.window.mainloop()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    app = FPFSnapApp()
    app.run()


if __name__ == "__main__":
    main()