#!/usr/bin/env python3
"""
Debug script –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ FPF Snap –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
"""
import sys
import pathlib
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
_here = pathlib.Path(__file__).resolve()
_proj_root = _here.parent
if str(_proj_root) not in sys.path:
    sys.path.insert(0, str(_proj_root))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç Testing imports...")
    
    try:
        print("1. Testing UI imports...")
        from ui.tv_ingest_window import TVIngestWindow
        print("   ‚úÖ TVIngestWindow OK")
        
        from ui.pattern_analyzer import PatternAnalyzer
        print("   ‚úÖ PatternAnalyzer OK")
        
        print("2. Testing visualization imports...")
        from visualization.pattern_drawer import FPFPatternDrawer
        print("   ‚úÖ FPFPatternDrawer OK")
        
        from visualization.chart_renderer import ChartRenderer
        print("   ‚úÖ ChartRenderer OK")
        
        print("3. Testing core imports...")
        from core.ai_search_pattern.fpf_detector_new import FpfPatternDetector
        print("   ‚úÖ FpfPatternDetector OK")
        
        print("4. Testing main snapp import...")
        from tools.snapp import FPFSnapApp
        print("   ‚úÖ FPFSnapApp OK")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Import error: {e}")
        traceback.print_exc()
        return False

def test_components():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ GUI"""
    print("üîß Testing component initialization...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Pattern Analyzer
        from ui.pattern_analyzer import PatternAnalyzer
        analyzer = PatternAnalyzer()
        print("   ‚úÖ PatternAnalyzer created")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º FPF Detector
        from core.ai_search_pattern.fpf_detector_new import FpfPatternDetector
        detector = FpfPatternDetector(debug=True)
        print("   ‚úÖ FpfPatternDetector created")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Component error: {e}")
        traceback.print_exc()
        return False

def test_data_loader():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä Testing data loader...")
    
    try:
        from sync.simple_data_loader import load_data_for_analysis
        print("   ‚úÖ Data loader import OK")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        from datetime import datetime
        test_dt = datetime(2024, 8, 31, 12, 0)
        
        print(f"   üîç Testing data load for BTCUSDT 15m at {test_dt}")
        # –ù–µ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Data loader error: {e}")
        traceback.print_exc()
        return False

def test_ocr_engine():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –¥–≤–∏–∂–∫–∞"""
    print("üëÅÔ∏è Testing OCR engine...")
    
    try:
        from ai.ocr_engine_new import SimpleOCREngine
        ocr = SimpleOCREngine()
        print("   ‚úÖ SimpleOCREngine created")
        return True
        
    except Exception as e:
        print(f"   ‚ùå OCR engine error: {e}")
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üöÄ FPF Snap Debug Session")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
    tests = [
        ("Imports", test_imports),
        ("Components", test_components), 
        ("Data Loader", test_data_loader),
        ("OCR Engine", test_ocr_engine)
    ]
    
    results = {}
    for name, test_func in tests:
        print(f"\nüìã {name} Test:")
        results[name] = test_func()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 40)
    print("üéØ Debug Summary:")
    for name, success in results.items():
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"   {name}: {status}")
    
    all_passed = all(results.values())
    if all_passed:
        print("\nüéâ All tests passed! FPF Snap should work correctly.")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å GUI
        print("\nüí° Ready to test GUI? Run: python tools/snapp.py")
    else:
        print("\n‚ö†Ô∏è  Some tests failed. Fix issues before running GUI.")

if __name__ == "__main__":
    main()