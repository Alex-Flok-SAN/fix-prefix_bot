#!/usr/bin/env python3
"""
–†—É—á–Ω–æ–π —Ç–µ—Å—Ç FPF –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import sys
import os
import pandas as pd
from datetime import datetime

sys.path.append('/Users/sashaflok/fpf_bot')

from core.ai_search_pattern.fpf_detector_new import FpfPatternDetector
from sync.simple_data_loader import load_data_for_analysis

def test_fpf_detector():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FPF –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å –æ—Ç–ª–∞–¥–∫–æ–π
    detector = FpfPatternDetector(debug=True)
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞ –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
    test_date = datetime(2025, 7, 18, 8, 45)
    
    print("=" * 60)
    print("üß™ MANUAL FPF DETECTOR TEST")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"üìä Loading data for BNBUSDT 15m around {test_date}")
    data = load_data_for_analysis('BNBUSDT', '15m', test_date)
    
    if data is None or len(data) == 0:
        print("‚ùå No data loaded!")
        return
        
    print(f"‚úÖ Loaded {len(data)} candles")
    print(f"üìà Price range: {data['low'].min():.2f} - {data['high'].max():.2f}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    candles = []
    target_idx = None
    
    for i, row in data.iterrows():
        candle = (
            int(row['timestamp']),
            float(row['open']),
            float(row['high']),
            float(row['low']),
            float(row['close']),
            float(row.get('volume', 0))
        )
        candles.append(candle)
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–µ—á—É –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∞—Ç–µ
        if target_idx is None:
            candle_time = pd.to_datetime(row['timestamp'], unit='ms')
            if abs((candle_time - test_date).total_seconds()) < 900:  # 15 –º–∏–Ω—É—Ç
                target_idx = i
    
    print(f"üéØ Target candle index: {target_idx}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    print("\n" + "=" * 40)
    print("üîç RUNNING FPF DETECTION")
    print("=" * 40)
    
    pattern = detector.detect_pattern(candles, target_idx)
    
    print("\n" + "=" * 40)
    print("üìä RESULTS")
    print("=" * 40)
    
    if pattern:
        print("üéâ FPF PATTERN FOUND!")
        print(f"üü¢ FIX: {pattern.fix_start_idx}-{pattern.fix_end_idx} ({pattern.fix_low:.2f}-{pattern.fix_high:.2f})")
        print(f"üîª LOY-FIX: idx={pattern.loy_fix_idx}, price={pattern.loy_fix_price:.2f}")
        print(f"üî∫ HI-PATTERN: idx={pattern.hi_pattern_idx}, price={pattern.hi_pattern_price:.2f}")
        print(f"üìè RAY: {pattern.ray_price:.2f}, validated={pattern.ray_validated}")
        print(f"üéØ PREFIX: {pattern.prefix_end_price:.2f}-{pattern.prefix_start_price:.2f}")
        print(f"‚≠ê Confidence: {pattern.confidence:.1%}")
    else:
        print("‚ùå NO FPF PATTERN FOUND")
        
    return pattern

if __name__ == "__main__":
    test_fpf_detector()