#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ FIX –æ–±–ª–∞—Å—Ç–∏
"""

import sys
import pandas as pd
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from core.ai_search_pattern.fpf_detector_new import FpfPatternDetector, CandleData

def load_and_analyze_fix():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–µ—Ç–µ–∫—Ü–∏—é FIX –æ–±–ª–∞—Å—Ç–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_file = Path("data_dl/BNBUSDT_M15_2025-05.csv")
    df = pd.read_csv(data_file)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CandleData
    candlesticks = []
    for _, row in df.iterrows():
        candle = CandleData(
            timestamp=row['ts_open_ms'],
            open=row['open'],
            high=row['high'], 
            low=row['low'],
            close=row['close'],
            volume=row['volume']
        )
        candlesticks.append(candle)
    
    # OCR —Å–≤–µ—á–∞ (–Ω–∞–π–¥–µ–Ω–Ω–∞—è —Ä–∞–Ω–µ–µ)
    ocr_idx = 462  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—É
    
    print("üîç –ê–ù–ê–õ–ò–ó FIX –û–ë–õ–ê–°–¢–ò")
    print("=" * 50)
    
    # –î–µ—Ç–µ–∫—Ç–æ—Ä
    detector = FpfPatternDetector()
    pattern = detector.detect_pattern(candlesticks, ocr_candle_idx=ocr_idx)
    
    if pattern:
        print(f"\n‚úÖ –¢–ï–ö–£–©–ê–Ø FIX –û–ë–õ–ê–°–¢–¨:")
        print(f"   –ò–Ω–¥–µ–∫—Å—ã: {pattern.fix_start_idx} - {pattern.fix_end_idx}")
        print(f"   –†–∞–∑–º–µ—Ä: {pattern.fix_end_idx - pattern.fix_start_idx + 1} —Å–≤–µ—á–µ–π")
        print(f"   –¶–µ–Ω—ã: {pattern.fix_low:.2f} - {pattern.fix_high:.2f}")
        print(f"   –í—ã—Å–æ—Ç–∞: {pattern.fix_high - pattern.fix_low:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ OCR —Å–≤–µ—á–∏
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –û–ë–õ–ê–°–¢–ò –í–û–ö–†–£–ì OCR –°–í–ï–ß–ò ({ocr_idx}):")
        
        for offset in range(-10, 11):
            idx = ocr_idx + offset
            if 0 <= idx < len(candlesticks):
                candle = candlesticks[idx]
                is_in_fix = pattern.fix_start_idx <= idx <= pattern.fix_end_idx
                marker = "üü¶" if is_in_fix else "‚¨ú"
                
                print(f"   {marker} {idx}: O={candle.open:.2f} H={candle.high:.2f} L={candle.low:.2f} C={candle.close:.2f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        print(f"\nüí° –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê FIX:")
        fix_candles = candlesticks[pattern.fix_start_idx:pattern.fix_end_idx+1]
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å FIX –æ–±–ª–∞—Å—Ç–∏
        highs = [c.high for c in fix_candles]
        lows = [c.low for c in fix_candles]
        fix_volatility = (max(highs) - min(lows)) / min(lows) * 100
        
        print(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å FIX: {fix_volatility:.2f}%")
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {'‚úÖ –•–æ—Ä–æ—à–æ' if fix_volatility < 1.0 else '‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å'}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏  
        print(f"\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –° –°–û–°–ï–î–Ø–ú–ò:")
        
        # –û–±–ª–∞—Å—Ç—å —Å–ª–µ–≤–∞ –æ—Ç FIX
        left_start = max(0, pattern.fix_start_idx - 10)
        left_candles = candlesticks[left_start:pattern.fix_start_idx]
        if left_candles:
            left_highs = [c.high for c in left_candles]
            left_lows = [c.low for c in left_candles]
            left_vol = (max(left_highs) - min(left_lows)) / min(left_lows) * 100
            print(f"   –°–ª–µ–≤–∞ –æ—Ç FIX: –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {left_vol:.2f}%")
        
        # –û–±–ª–∞—Å—Ç—å —Å–ø—Ä–∞–≤–∞ –æ—Ç FIX  
        right_end = min(len(candlesticks), pattern.fix_end_idx + 11)
        right_candles = candlesticks[pattern.fix_end_idx+1:right_end]
        if right_candles:
            right_highs = [c.high for c in right_candles]
            right_lows = [c.low for c in right_candles]
            right_vol = (max(right_highs) - min(right_lows)) / min(right_lows) * 100
            print(f"   –°–ø—Ä–∞–≤–∞ –æ—Ç FIX: –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {right_vol:.2f}%")
    else:
        print("‚ùå FIX –æ–±–ª–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

if __name__ == "__main__":
    load_and_analyze_fix()