# FPF-БОТ: ПОЛНАЯ БАЗА ЗНАНИЙ
# Версия: 2.0 | Дата: 28.08.2025 | Статус: Структурировано

# =============================================================================
# СВЕРХЗАДАЧА
# =============================================================================

Создать полностью автоматизированную торговую экосистему, которая:
- Автономно находит высокодоходные паттерны Fix-Prefix-Fix на криптофьючерсах Binance
- Защищает капитал от непредсказуемых рыночных шоков через новостную аналитику
- Самообучается на основе результатов и обратной связи трейдера
- Работает в режиме 24/7 с минимальным участием человека
- Масштабируется на множество торговых пар и стратегий

# =============================================================================
# ОСНОВНАЯ ЗАДАЧА
# =============================================================================

Разработать и запустить FPF-бота — интеллектуальную торговую систему для автоматического поиска паттернов Fix-Prefix-Fix на Binance фьючерсах с интеграцией:
- Реального времени обработки данных (StreamCore)
- AI-детекции паттернов (FPFDetector) 
- Умного управления сигналами (SignalManager)
- **НОВОЕ**: Защиты от новостных рисков с автопереносом в безубыток
- Интерактивного пользовательского интерфейса

# =============================================================================
# ВВОДНЫЕ ДАННЫЕ
# =============================================================================

## Торговая логика: паттерн Fix-Prefix-Fix

FPF (Fix-Prefix-Impulse / Fix-Prefix-Fix) — паттерн автоматического распознавания рыночных движений на фьючерсных парах.

### Компоненты паттерна:

1. FIX - зона консолидации на экстремуме
   - Верхняя граница = хай области
   - Нижняя граница = минимум свечей в диапазоне  
   - Авто-построение при загрузке серии

2. RAY - луч поддержки/сопротивления
   - Рисуется от лоя после FIX
   - Останавливается при пересечении свечой
   - Snap к ключевым уровням

3. PREFIX - зона ретеста
   - Левый край = точка касания RAY
   - Вертикаль = границы FIX  
   - Правая граница = до конца серии

4. HI - пик импульса (апекс паттерна)
   - Хай между FIX и PREFIX
   - Метрика "высоты импульса"

5. BA25 - уровень безубытка 25%
   - Луч от лоя перед PREFIX
   - Ромбик при касании свечой
   - Точка выхода на +25%

6. TP-области
   - FLAT + Main TP связаны пунктиром
   - Low TP, TP1, TP2 — вызываемые вручную
   - Take 25% — отдельные зоны между BA25 и Main TP

## Архитектура системы

```
Binance API → StreamCore → LevelEngine → FPFDetector → SignalManager
                  ↓             ↓            ↓             ↓
            VolumeProfile → ContextFilters → UI/Panels → Database
                  ↓             ↓            ↓             ↓
              BacktestRunner → RiskHints → Telegram → Logs/CSV
```

### Основные модули бота:
- **StreamCore** — потоковый обработчик минутных данных
- **LevelEngine** — построение уровней (HOD/LOD, POC, динамические, VWAP, плотности объёмов)
- **FPFDetector** — детектор паттерна Fix–Prefix–Fix с фильтрами и проверкой импульса
- **ContextFilters** — набор весов и фильтров по ATR, сессиям, объёмам и др.
- **SignalManager** — управление сигналами, объединение по ТФ, логирование и обратная связь
- **Visualizer/UI** — панель сигналов с раскрывающимися карточками
- **BacktestRunner** — тестирование на исторических данных
- **RiskHints** — управление стопами, тейками и распределением риска

## Технический стек
- **Основа**: Python 3.9+, asyncio для потоков
- **UI**: PyQt (основной), Tkinter (tv_ingest_app)
- **Данные**: Binance REST/WebSocket, CSV/Parquet локально
- **AI**: Собственный модуль ai_search_pattern + inference
- **OCR**: PIL + regex для TradingView скриншотов
- **База**: SQLite для сигналов, CSV для логов

## Вспомогательные инструменты

### tv_ingest_app.py
GUI-приложение на Tkinter для загрузки скриншотов из TradingView и автоматической отрисовки паттерна.

Функционал:
- Drag&Drop PNG/JPEG скрина или CSV/Parquet минутных данных
- OCR через модуль ai/ocr_engine.py: извлечение символа, ТФ и времени с правой панели или нижнего тултипа
- Автоподтягивание локальных минутных данных (M1) и агрегация в ТФ скрина (M5, M15 и т.д.)
- Автоматическая отрисовка всей цепочки: FIX→RAY→PREFIX→HI→BA25
- Возможность ручного редактирования и перетаскивания объектов
- Синхронизация объектов между собой (например, вертикальные размеры PREFIX = FIX)

### ocr_engine.py  
OCR распознавание с TradingView: символ, TF, дата/время, цены. Использует PIL + regex для коррекции.

### ai_search_pattern.py + inference
Эвристики и AI-детектор коротких паттернов.

### local data (CSV/Parquet)
Минутные бары (M1) для агрегации и отрисовки. Обеспечивают точность выше OCR.

# =============================================================================
# ЧТО УЖЕ СДЕЛАНО
# =============================================================================

## Основные модули (100% готовы)

1. **StreamCore** - потоковый обработчик минутных данных
   - Агрегация по всем ТФ (M1, M5, M15, M30, H1, H4)
   - Event-система: candle.closed события

2. **LevelEngine** - построение ключевых уровней
   - HOD/LOD, Round numbers, POC, VWAP, Swing levels
   - Публикация в шину levels.update

3. **FPFDetector** - детектор паттернов FPF
   - Состояния: FIX_HIGH, FIX_LOW, RETURN, BREAK
   - Генерация signal.detected с полными метаданными
   - Поля: symbol, tf, direction, fix_high/low, timestamps, break_price, tv_url

4. **SignalManager** - управление сигналами
   - Прием signal.detected событий
   - Разделение: setup сигналы (в UI/лог) vs боевые (в БД)
   - Антидубликация по break_ts
   - Передача в ui.signal

5. **Visualizer/UI** - пользовательский интерфейс
   - MainWindow: безопасный pyqtSignal для передачи данных
   - SignalsPanel: таблица с сигналами + раскрывающиеся карточки
   - CSV логирование по датам: logs/fpf_signals_YYYY-MM-DD.csv

## Вспомогательные инструменты (100% готовы)

6. **tv_ingest_app.py** - GUI для TradingView скриншотов
   - Drag&Drop PNG/JPEG или CSV/Parquet
   - OCR через ai/ocr_engine.py: символ, ТФ, время
   - Автоподтягивание M1 данных и агрегация в нужный ТФ
   - Автоматическая отрисовка всей цепочки: FIX→RAY→PREFIX→HI→BA25

7. **ocr_engine.py** - распознавание TradingView
   - Извлечение из правой панели + нижнего тултипа
   - PIL + regex для коррекции данных
   - Обработка Date/Time без timezone конвертации

## Исправленные критические баги (100% решены)

- ✅ **Съезжание объектов**: привязка к OCR-центру вместо левого края
- ✅ **DateTime 00:00 проблема**: парсинг тултипа "Sun 18-05-2025 12:00"  
- ✅ **Неперетаскиваемые RAY/BA25**: добавлены hitbox'ы + cursor="hand2"
- ✅ **AI недоступен**: fallback на локальные эвристики + проверки
- ✅ **Resize ломал FIX**: синхронизация мета-данных при изменении окна
- ✅ **Overlay sync**: PREFIX следует за FIX, BA25 обновляется при drag

## Функциональность пайплайна (работает стабильно)

### Алгоритм работы
1. Загружается скрин (или CSV)
2. OCR вытаскивает мета (символ, TF, дата/время)  
3. Подгружаются минутные бары для месяца
4. Строится окно в ~300 баров вокруг OCR-времени
5. Рендерятся бары
6. Автоцепочка:
   - FIX (область хая до OCR-времени)
   - RAY (лой после FIX)
   - HI (апекс после FIX, до валидации RAY)
   - PREFIX (прямоугольник по FIX, горизонтально от RAY до конца)
   - BA25 (уровень закрытия 25% при первом касании PREFIX)
7. Пользователь может корректировать перетаскиванием

### Autopipeline (реализована последовательность)
- Построить FIX
- Построить RAY от ближайшего лоя  
- Найти HI
- Построить PREFIX (левый край = RAY.validation)
- Найти BA25 по первому касанию PREFIX

### AI Integration (частично работает)
- Возможность вызвать внешний модуль core.ai_search_pattern.inference.detect_short_pattern для подсказки FIX/RAY
- Если AI отработал — центр синхронизируется с правым краем FIX
- Fallback на эвристики при недоступности AI

### Debugging (полностью работает)  
- Статусы в консоль, логирование ошибок ([tv][dbg], [tv][err])
- Детальный вывод всех этапов построения паттерна

# =============================================================================
# ЧТО УЖЕ ОТТЕСТИРОВАНО
# =============================================================================

## Успешные тесты

1. **Первый тестовый скрин** ✅
   - Паттерн строится корректно (FIX, RAY, PREFIX, BA25 на местах)
   - Все объекты в правильных позициях
   - Метаданные извлекаются точно

2. **Автоматическая цепочка** ✅  
   - Последовательность FIX→RAY→HI→PREFIX→BA25 работает без сбоев
   - Логика связей между объектами корректна

3. **OCR извлечение** ✅
   - Символ, ТФ корректно распознаются  
   - Время извлекается из правой панели + тултипа

4. **Ручное управление** ✅
   - Drag&drop объектов функционирует плавно
   - Синхронизация при перемещении работает

5. **Подтягивание данных** ✅
   - M1 локальные данные корректно агрегируются в целевой ТФ
   - 300-баровое окно строится вокруг OCR-времени

## Выявленные и решенные проблемы

- ⚠️ **Второй скрин**: смещения объектов → **РЕШЕНО** изменением алгоритма FIX
- ⚠️ **OCR неточности**: время иногда неверное → **РЕШЕНО** через тултип-парсинг  
- ⚠️ **Падения UI**: NSWindow проблемы → **РЕШЕНО** через главный поток

# =============================================================================
# ЧТО ПРЕДСТОИТ
# =============================================================================

## ЭТАП 1: КРИТИЧЕСКАЯ СТАБИЛИЗАЦИЯ
# Срок: 1-2 недели | Приоритет: НЕМЕДЛЕННО

### 1.1 Устранение архитектурных проблем
- [ ] **Переход на timestamp логику**: заменить индексы баров на временные метки во всех модулях
- [ ] **OCR улучшения**: приоритет тултипа над правой панелью для точности времени  
- [ ] **Унификация FIX алгоритма**: один и тот же паттерн должен строиться одинаково на разных скринах
- [ ] **Стандартизация окна поиска**: всегда 300 баров вокруг OCR-времени

### 1.2 UI стабилизация  
- [ ] **Подсветка строк**: setup=серый, long=зеленый, short=красный
- [ ] **Двойной клик**: открытие TradingView по корректному URL
- [ ] **Payload хранение**: полные данные сигнала в строках таблицы
- [ ] **Горячие клавиши**: ← → для точного сдвига объектов
- [ ] **Снап к барам**: привязка объектов к OHLC данным

## ЭТАП 2: ЗАЩИТА ОТ РИСКОВ  
# Срок: 3-4 недели | Приоритет: КРИТИЧЕСКИЙ

### 2.1 Система защиты от новостей (НОВОЕ ТРЕБОВАНИЕ)

#### NewsCalendarAPI:
- Интеграция с календарем экономических событий
- Источники: ForexFactory, Investing.com, TradingEconomics
- Парсинг: NFP, Fed решения, CPI/PPI, GDP, криптособытия

#### NewsImpactClassifier:
- HIGH impact: Fed rate decisions, NFP, major CPI
- MEDIUM impact: региональные ЦБ, второстепенные данные  
- LOW impact: локальные события, минорные релизы

#### TradingLock: 
- Блокировка новых сделок за 1 час до значимых новостей
- Продление блокировки на 1 час после события
- Общая защитная зона: 2 часа вокруг HIGH impact событий

#### BreakevenModule:
- Автоматический перенос ВСЕХ активных позиций в безубыток
- Срабатывание за 1 час до HIGH impact события  
- Независимость от текущего P/L позиций

#### PositionManager:
- Мониторинг всех открытых сделок
- API интеграция с Binance для управления позициями
- Логирование всех действий по переносу стопов

### 2.2 Логика защитного режима
```python
def check_news_protection():
    current_time = datetime.now()
    upcoming_events = news_calendar.get_events(
        start=current_time, 
        end=current_time + timedelta(hours=1)
    )
    
    for event in upcoming_events:
        if event.impact == "HIGH":
            trading_lock.activate()
            position_manager.move_all_to_breakeven()
            logger.info(f"Protection mode: {event.title}")
            return True
    return False
```

## ЭТАП 3: РАСШИРЕННАЯ АНАЛИТИКА
# Срок: 5-8 недель | Приоритет: ВЫСОКИЙ

### 3.1 BacktestRunner (полная реализация)
- [ ] Прогон по 3 месяцам минутной истории
- [ ] Метрики: winrate, profit factor, MAE/MFE, время до TP/SL
- [ ] Отчеты по различным вариантам стопов (ручные vs актуальные)
- [ ] Сверка с эталонными паттернами для валидации

### 3.2 ContextFilters (контекстная фильтрация)
- [ ] **ATR-адаптивные параметры**: εtouch, k_wick, k_range динамически
- [ ] **VolumeProfile бонусы**: +score если уровень совпадает с POC/VA
- [ ] **Сессионные веса**: Лондон/Нью-Йорк/Азия по статистике эффективности
- [ ] **Мульти-ТФ подтверждения**: объединение сигналов с разных ТФ в одну карточку

### 3.3 VolumeProfileEngine (продвинутый анализ объемов)
- [ ] POC, VAH/VAL расчеты на дневном/сессионном окне
- [ ] Кластеризация и плотности объемов вокруг ключевых уровней
- [ ] Локальные профили в окне паттерна
- [ ] Привязка уровней к heat-зонам и аномалиям объема

## ЭТАП 4: AI И МАШИННОЕ ОБУЧЕНИЕ
# Срок: 9-12 недель | Приоритет: ВЫСОКИЙ

### 4.1 Активация AI-модуля
- [ ] Подключение core.ai_search_pattern.inference.detect_short_pattern
- [ ] AI-подсказки для FIX/RAY детекции с синхронизацией центра
- [ ] Fallback система: AI недоступен → локальные эвристики

### 4.2 Обучение модели на чистых данных
- [ ] Подготовка датасета: 3-6 месяцев M1 данных
- [ ] Разметка: FIX, RAY, HI, PREFIX, BA25 координаты
- [ ] Исключение OCR ошибок: использование CSV/Parquet вместо скриншотов
- [ ] **Цель**: модель выдает всю цепочку паттерна одним вызовом

### 4.3 Система обучения с обратной связью
- [ ] JSON-экспорт паттернов для дообучения на реальных скринах
- [ ] Walk-forward валидация
- [ ] Feedback loop: "принял/отклонил" → обновление весов фильтров
- [ ] Рекалибровка силы сигналов (Platt/isotonic) на истории

## ЭТАП 5: ПРОДВИНУТЫЙ UI/UX
# Срок: 13-16 недель | Приоритет: СРЕДНИЙ

### 5.1 Расширение интерфейса
- [ ] **История сигналов**: фильтрация по дате/паре/направлению/результату
- [ ] **Экспорт данных**: CSV, JSON, Parquet для аналитики  
- [ ] **Автопересчет BA25**: при изменении PREFIX параметров
- [ ] **Продвинутые карточки**: паспорт сигнала (P/F/I, уровни, DOM-срезы)

### 5.2 Narrator и визуализация
- [ ] **Текстовые описания**: "цена коснулась FIX... образовался ФПФ..."
- [ ] **Превью графика**: мини-график P→F→I в карточке сигнала
- [ ] **Поля комментариев**: обратная связь для обучения системы
- [ ] **Цветовые индикаторы**: сила сигнала 1-100% с цветовым бейджем

## ЭТАП 6: ИНТЕГРАЦИИ И АВТОМАТИЗАЦИЯ
# Срок: 17-20 недель | Приоритет: СРЕДНИЙ

### 6.1 Telegram бот
- [ ] Уведомления о новых сигналах с кратким описанием
- [ ] Обратная связь через команды /accept /reject
- [ ] Управление ботом: /start /stop /status /stats

### 6.2 Расширенное логирование
- [ ] **Форматы**: не только CSV, но и JSON/Parquet для аналитики  
- [ ] **Антидубль**: по group_id для мульти-ТФ сигналов
- [ ] **Система тестов**: автоматические прогоны истории с эталонными сверками

## ЭТАП 7: МОНИТОРИНГ И ПРОИЗВОДИТЕЛЬНОСТЬ
# Срок: 21-24 недели | Приоритет: НИЗКИЙ

### 7.1 Dashboard и метрики
- [ ] **Реального времени**: winrate, PF, MAE/MFE по неделям/месяцам
- [ ] **Режим обучения**: "только анализ" без реальной торговли
- [ ] **Автопауза**: при сбоях данных или потере соединения с Binance

### 7.2 PaperTrading система
- [ ] **Симуляция сделок**: полный демо-режим с виртуальным балансом
- [ ] **Отслеживание результатов**: MAE/MFE, время до TP/SL, финальные исходы  
- [ ] **Селекция пар**: работа только на инструментах, прошедших бэктест

# =============================================================================
# НА ЧТО СЛЕДУЕТ ОБРАТИТЬ ВНИМАНИЕ
# =============================================================================

## КРИТИЧЕСКИЕ УЯЗВИМОСТИ

### 1. Зависимость от OCR точности (ВЫСОКИЙ РИСК)
**Проблема**: Основной риск некорректного построения паттернов из-за ошибок распознавания
**Текущее состояние**: OCR иногда ошибается с временем → объекты "съезжают"
**Решение**: 
- Приоритет локальных минутных данных над OCR
- Кросс-проверка OCR результатов с реальными барами
- Использование тултипа как основного источника времени

### 2. Отсутствие защиты от новостей (КРИТИЧЕСКИЙ РИСК)
**Проблема**: Потенциальные большие убытки при неожиданной волатильности
**Решение**: Срочная реализация NewsCalendar + TradingLock системы (ЭТАП 2)

### 3. Несогласованность паттернов (СРЕДНИЙ РИСК)
**Проблема**: Один и тот же сигнал строится по-разному на разных скринах
**Причина**: FIX алгоритм использует индексы баров вместо timestamp
**Решение**: Полный переход на временные метки во всех модулях

## ТЕХНИЧЕСКИЕ РИСКИ

### 4. AI-модуль неактивен (СРЕДНИЙ РИСК)
**Состояние**: Работают только эвристики, что ограничивает качество детекции
**План**: Активация после стабилизации основной логики (ЭТАП 4)

### 5. Отсутствие бэктеста (ВЫСОКИЙ РИСК)
**Проблема**: Нет данных о реальной прибыльности стратегии
**План**: Полное тестирование на 3 месяцах истории (ЭТАП 3)

### 6. UI нестабильность на macOS (НИЗКИЙ РИСК)  
**Проблема**: NSWindow падения при интенсивной работе
**Решение**: Работа только через главный поток (уже реализовано)

## ОПЕРАЦИОННЫЕ РИСКИ

### 7. Rate limit Binance (СРЕДНИЙ РИСК)
**Состояние**: DataFetcher использует backoff/jitter - базовая защита есть
**Дополнительно**: Мониторинг лимитов и адаптивное снижение частоты запросов

### 8. Отсутствие системы мониторинга (ВЫСОКИЙ РИСК)
**Проблема**: Сбои могут проходить незамеченными в 24/7 режиме
**План**: Dashboard + автопауза при критических сбоях (ЭТАП 7)

## Существующие проблемы для устранения

### OCR проблемы
- OCR: часто ошибается с временем → объекты «съезжают»
- **Решение**: дополнять данными из тултипа снизу графика (он надёжнее)

### Алгоритмические проблемы  
- FIX: алгоритм берёт по индексам баров, не по timestamp → смещения
- **Решение**: использовать timestamp вместо индексов для построения объектов

### UI проблемы
- FIX и BA25 тяжело сдвигать, нет горячих клавиш
- **Решение**: снап к барам, горячие клавиши ← → для точного сдвига

### Консистентность
- Разные скрины: один и тот же паттерн строится по-разному (несогласованность)
- **Решение**: всегда строить окно в 300 баров вокруг OCR-времени

### AI интеграция
- AI-модуль: пока не активен, работают только эвристики
- **План**: делать основной упор на обучение по минутным данным, а OCR оставить только как запуск

# =============================================================================
# ЛИЧНЫЕ ПРЕДЛОЖЕНИЯ И РАЗМЫШЛЕНИЯ
# =============================================================================

## Архитектурные улучшения

### 1. Event-Driven Architecture 2.0
**Текущее состояние**: Базовая система событий работает (candle.closed → signal.detected → ui.signal)
**Предложение**: Расширить до полноценного EventBus:
- Централизованная типизация всех событий
- Retry-механизмы для критических событий
- Метрики производительности каждого модуля в реальном времени
- Возможность replay событий для debugging

### 2. Модульная независимость
**Проблема**: Модули тесно связаны, сложно тестировать изолированно
**Решение**: 
- Каждый модуль с собственной конфигурацией (config.yml)
- Hot-reload модулей без перезапуска системы
- Graceful degradation при сбое отдельных компонентов
- Dependency injection для тестирования

## Инновационные направления

### 3. Multi-Asset корреляционный анализ
**Идея**: FPF паттерны часто коррелируют между активами
**Реализация**:
- BTC влияние на альткоины (lead-lag анализ)
- Сектор-специфичные корреляции (DeFi tokens, GameFi, L1/L2)
- Макро-корреляции (SPY, DXY, золото, нефть)
- **Результат**: Повышение качества сигналов через кросс-подтверждения

### 4. Adaptive Learning с временным контекстом  
**Концепция**: Система адаптируется к изменениям рыночных режимов
**Компоненты**:
- Детекция рыночных режимов (бычий/медвежий/боковик)
- Временные паттерны (эффективность по часам/дням недели)
- Адаптация к индивидуальному стилю через пользовательский feedback
- Сезонные корректировки параметров

### 5. Многоуровневая система рисков (Risk Layering)
**Философия**: Риск должен контролироваться на всех уровнях
**Слои**:
- **Portfolio Level**: общий риск на весь счет (max drawdown %)
- **Position Level**: риск на отдельную сделку (% от депозита)  
- **Pattern Level**: качество конкретного FPF сигнала (AI confidence)
- **Macro Level**: новости, корреляции, волатильность режимы
- **Time Level**: внутридневные и недельные паттерны риска

## Предложения по приоритизации

### 6. "Новости прежде AI" принцип
**Обоснование**: Защита от новостей критичнее улучшения детекции паттернов
**План**: Реализовать всю новостную систему ДО активации продвинутого AI
**Результат**: Капитал защищен даже при несовершенной детекции

### 7. "Эвристики как фундамент"  
**Философия**: AI должен усиливать, а не заменять логические алгоритмы
**Подход**: Эвристические методы должны давать приемлемые результаты самостоятельно
**AI роль**: Улучшение качества, а не основа функционирования

### 8. "Тестируемость превыше всего"
**Принцип**: Каждый компонент должен допускать изолированное тестирование
**Реализация**:
- Unit тесты для каждого модуля с mock данными
- Integration тесты для цепочки модулей  
- End-to-end тесты на исторических данных
- Performance тесты для выявления узких мест

## Философские размышления о проекте

### 9. Баланс автоматизации и контроля
**Дилемма**: Полная автоматизация vs контроль трейдера
**Рекомендация**: Система должна быть "полуавтономной":
- Автоматическое принятие решений в стандартных ситуациях
- Эскалация к трейдеру в спорных/рискованных случаях
- Возможность manual override в любой момент
- Обучение на основе manual решений

### 10. Эволюция вместо революции
**Подход**: Не стремиться к "идеальной" системе сразу
**Стратегия**: Создать адаптивную систему, которая улучшается со временем
- Начать с "хорошей достаточности" 
- Непрерывное улучшение на основе реальных данных
- A/B тестирование новых алгоритмов параллельно со старыми
- Постепенное повышение автономности по мере роста доверия

### 11. Принцип "Fail Safe, Not Fail Proof"
**Концепция**: Система должна безопасно деградировать при сбоях
**Примеры**:
- OCR ошибка → fallback на ручное указание времени
- AI недоступен → эвристические алгоритмы  
- Новостной API сбой → консервативный режим (блокировка всей торговли)
- Binance API лимит → пауза и retry с exponential backoff

# =============================================================================
# ТЕХНИЧЕСКИЕ ДОЛГИ (устранить параллельно)
# =============================================================================

## Код качество
- [ ] Переход от индексов к timestamp во ВСЕХ модулях
- [ ] Унификация системы событий (единый формат, типизация)
- [ ] Стандартизация логирования: [module][level] формат везде
- [ ] Рефакторинг для избежания NSWindow падений
- [ ] Оптимизация производительности StreamCore (memory leaks?)

## Документация
- [ ] API документация для каждого модуля
- [ ] Диаграммы архитектуры (sequence diagrams)
- [ ] Troubleshooting guide для типовых проблем
- [ ] Deployment инструкции для продакшн

## Тестирование
- [ ] Unit тесты покрытие >80%
- [ ] Integration тесты для критических путей
- [ ] Load тесты для high-frequency режимов
- [ ] Security аудит для API ключей и данных

# =============================================================================
# КЛЮЧЕВЫЕ МЕТРИКИ УСПЕХА (KPI)
# =============================================================================

## Технические метрики
- **Точность детекции**: >85% корректно построенных паттернов
- **Latency**: <500ms от получения свечи до генерации сигнала  
- **Uptime**: >99.5% работы в 24/7 режиме
- **OCR точность**: >95% корректного распознавания времени

## Торговые метрики  
- **Win Rate**: >60% прибыльных сигналов
- **Profit Factor**: >1.5 общая прибыльность стратегии
- **Max Drawdown**: <15% максимальная просадка
- **Sharpe Ratio**: >1.0 риск-скорректированная доходность

## Операционные метрики
- **Signal Quality**: <5% ложно-позитивных сигналов после фильтров
- **News Protection**: 100% активация защиты при HIGH impact событиях
- **Response Time**: <60 секунд от сигнала до уведомления трейдера

# =============================================================================
# ФИНАЛЬНАЯ ЦЕЛЬ
# =============================================================================

**Через 6 месяцев получить**:
Полностью автономную торговую систему, которая:
- Работает 24/7 без участия человека в 95% случаев
- Защищает капитал лучше человека-трейдера  
- Адаптируется к изменениям рынка быстрее конкурентов
- Масштабируется на новые активы и стратегии
- Генерирует стабильную прибыль с контролируемыми рисками

**Критерий успеха**: Трейдер может уехать в отпуск на 2 недели, а система будет работать без его участия и покажет положительный результат.

# =============================================================================
# ИСТОРИЯ ВЕРСИЙ И ИЗМЕНЕНИЙ
# =============================================================================

## Версия 2.0 (28.08.2025) - Полная структуризация
- Реорганизация всей документации по логическим блокам
- Добавление системы защиты от новостей как критический приоритет
- Детализация всех этапов разработки с временными рамками
- Выделение технических долгов и рисков
- Определение KPI метрик для измерения прогресса

## Версия 1.x (предыдущие итерации)
- Базовая функциональность FPF детекции
- tv_ingest_app для работы со скриншотами
- Исправление критических багов OCR и UI
- Автоматическая цепочка построения паттернов

# =============================================================================
# ПОСТАНОВКА ЗАДАЧ ДЛЯ КОМАНДЫ
# =============================================================================

## Немедленные действия (1-2 недели)
1. **Завершить интеграцию UI-фич**:
   - Подсветка строк по направлению
   - Двойной клик для открытия графика
   - Хранение полного payload в строках

2. **Проверить и стабилизировать генерацию ссылок TradingView**

3. **Доработать логирование**: возможность выгружать не только CSV, но и JSON/Parquet для анализа

4. **Уточнить антидубль в SignalManager** (по group_id для мульти-ТФ сигналов)

5. **Подготовить систему тестов**: прогон истории свечей и сверка с эталонными паттернами

## Критический путь (следующие 4 недели)
1. **Реализовать полную систему защиты от новостей**
2. **Интегрировать календарь экономических событий**  
3. **Создать модуль автопереноса позиций в безубыток**
4. **Протестировать защитные механизмы на исторических данных**

---

# === СВЯЗЬ С CLAUDE CODE УСТАНОВЛЕНА ===
# [Thu Aug 28 11:44:39 MSK 2025] База данных обновлена и структурирована