#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ baza.txt —á–µ—Ä–µ–∑ GitHub Gist
–†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±–æ–π –≤–µ—Ä—Å–∏–µ–π Claude —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ raw —Å—Å—ã–ª–∫–∏ –∏ GitHub API
"""

import requests
import json
import time
import hashlib
from pathlib import Path
import logging
from datetime import datetime
import os

class GistBazaSync:
    def __init__(self, gist_id, github_token=None):
        self.gist_id = gist_id
        self.github_token = github_token
        # Project paths
        self.project_root = Path(__file__).parent.parent.parent
        self.local_file = self.project_root / "baza.txt"
        
        # GitHub API endpoints
        self.api_url = f"https://api.github.com/gists/{gist_id}"
        self.raw_url = f"https://gist.githubusercontent.com/Alex-Flok-SAN/{gist_id}/raw"
        
        # Headers –¥–ª—è API
        self.headers = {
            'Accept': 'application/vnd.github.v3+json',
            'User-Agent': 'FPF-Bot-Sync'
        }
        
        if github_token:
            self.headers['Authorization'] = f'token {github_token}'
        
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.last_remote_hash = ""
        self.last_local_hash = ""
        
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
    
    def get_gist_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Gist"""
        try:
            response = requests.get(self.api_url, headers=self.headers)
            if response.status_code == 200:
                return response.json()
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Gist: {response.text}")
                return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
            return None
    
    def read_remote_baza(self):
        """–ß–∏—Ç–∞–µ—Ç –±–∞–∑—É –∏–∑ Gist (—á–µ—Ä–µ–∑ raw URL)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw URL –¥–ª—è —á—Ç–µ–Ω–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
            response = requests.get(f"{self.raw_url}/gistfile1.txt")
            if response.status_code == 200:
                return response.text
            else:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ raw, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API
                gist_info = self.get_gist_info()
                if gist_info and 'files' in gist_info:
                    files = gist_info['files']
                    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                    for filename, file_data in files.items():
                        if file_data.get('content'):
                            return file_data['content']
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Gist")
                return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Gist: {e}")
            return None
    
    def read_local_baza(self):
        """–ß–∏—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É"""
        try:
            if self.local_file.exists():
                return self.local_file.read_text(encoding='utf-8')
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return ""
    
    def save_local_baza(self, content):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –ª–æ–∫–∞–ª—å–Ω–æ"""
        try:
            self.local_file.write_text(content, encoding='utf-8')
            self.logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {datetime.now()}")
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def update_gist(self, content, filename="gistfile1.txt"):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Gist –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
        if not self.github_token:
            self.logger.error("‚ùå –ù—É–∂–µ–Ω GitHub —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Gist")
            return False
        
        data = {
            "description": f"FPF Bot Knowledge Base - updated {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            "files": {
                filename: {
                    "content": content
                }
            }
        }
        
        try:
            response = requests.patch(self.api_url, 
                                    json=data, headers=self.headers)
            if response.status_code == 200:
                self.logger.info(f"‚úÖ Gist –æ–±–Ω–æ–≤–ª–µ–Ω: {datetime.now()}")
                return True
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Gist: {response.text}")
                return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Gist: {e}")
            return False
    
    def get_content_hash(self, content):
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        return hashlib.md5(content.encode('utf-8')).hexdigest() if content else ""
    
    def sync_remote_to_local(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Gist ‚Üí Local"""
        remote_content = self.read_remote_baza()
        if remote_content is None:
            return False
        
        local_content = self.read_local_baza()
        
        if remote_content != local_content:
            if self.save_local_baza(remote_content):
                self.logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: Gist ‚Üí Local")
                return True
        return False
    
    def sync_local_to_remote(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Local ‚Üí Gist"""
        local_content = self.read_local_baza()
        if not local_content:
            return False
        
        remote_content = self.read_remote_baza()
        
        if local_content != remote_content:
            if self.update_gist(local_content):
                self.logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: Local ‚Üí Gist")
                return True
        return False
    
    def auto_sync_daemon(self, interval=30):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥"""
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Gist (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")
        self.logger.info(f"üîó Gist URL: https://gist.github.com/Alex-Flok-SAN/{self.gist_id}")
        
        try:
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                remote_content = self.read_remote_baza()
                local_content = self.read_local_baza()
                
                if remote_content is not None:
                    remote_hash = self.get_content_hash(remote_content)
                    local_hash = self.get_content_hash(local_content)
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                    if remote_hash != self.last_remote_hash and remote_hash != local_hash:
                        self.sync_remote_to_local()
                        
                    if local_hash != self.last_local_hash and local_hash != remote_hash:
                        self.sync_local_to_remote()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à–∏
                    self.last_remote_hash = remote_hash
                    self.last_local_hash = local_hash
                
                time.sleep(interval)
                
        except KeyboardInterrupt:
            self.logger.info("üõë –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def get_public_urls(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞"""
        return {
            'raw_url': f"{self.raw_url}/gistfile1.txt",
            'gist_url': f"https://gist.github.com/Alex-Flok-SAN/{self.gist_id}",
            'gist_id': self.gist_id
        }

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
def load_gist_config():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Gist –∏–∑ .env"""
    env_path = Path(".env")
    config = {}
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
    if env_path.exists():
        for line in env_path.read_text().split('\n'):
            if line.startswith("GIST_ID="):
                config['gist_id'] = line.split('=', 1)[1].strip()
            elif line.startswith("GITHUB_TOKEN="):
                config['github_token'] = line.split('=', 1)[1].strip()
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config['gist_id'] = config.get('gist_id') or os.getenv('GIST_ID')
    config['github_token'] = config.get('github_token') or os.getenv('GITHUB_TOKEN')
    
    return config

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
if __name__ == "__main__":
    import sys
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_gist_config()
    
    GIST_ID = config.get('gist_id')
    GITHUB_TOKEN = config.get('github_token')
    
    if not GIST_ID:
        print("‚ùå GIST_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ: GIST_ID=your_gist_id")
        sys.exit(1)
    
    sync = GistBazaSync(GIST_ID, GITHUB_TOKEN)
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "pull":
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Gist –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            sync.sync_remote_to_local()
            
        elif command == "push":
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ Gist
            if not GITHUB_TOKEN:
                print("‚ùå –ù—É–∂–µ–Ω GITHUB_TOKEN –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Gist")
            else:
                sync.sync_local_to_remote()
                
        elif command == "daemon":
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            sync.auto_sync_daemon()
                
        elif command == "check":
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
            remote = sync.read_remote_baza()
            local = sync.read_local_baza()
            
            if remote is not None and local and remote != local:
                print("‚ö†Ô∏è –§–∞–π–ª—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
                print(f"Remote: '{remote[:50]}...'")
                print(f"Local: '{local[:50]}...'")
                print(f"Remote hash: {sync.get_content_hash(remote)}")
                print(f"Local hash: {sync.get_content_hash(local)}")
            else:
                print("‚úÖ –§–∞–π–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                    
        elif command == "info":
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Gist
            urls = sync.get_public_urls()
            print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Gist:")
            print(f"üÜî Gist ID: {GIST_ID}")
            print(f"üìÑ Raw URL: {urls['raw_url']}")
            print(f"üåê Gist URL: {urls['gist_url']}")
            
        elif command == "test":
            # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Gist
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Gist...")
            local_content = sync.read_local_baza()
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: '{local_content}'")
            
            if sync.update_gist(local_content):
                print("‚úÖ Gist —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                urls = sync.get_public_urls()
                print(f"üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: {urls['raw_url']}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Gist")
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python gist_sync.py pull    - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Gist")
        print("  python gist_sync.py push    - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Gist")
        print("  python gist_sync.py daemon  - –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
        print("  python gist_sync.py check   - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
        print("  python gist_sync.py info    - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Gist")
        print("  python gist_sync.py test    - —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Gist")