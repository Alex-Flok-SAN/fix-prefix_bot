#!/usr/bin/env python3
"""
GitHub Issues –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ Claude —á–µ—Ä–µ–∑ Issues API
"""

import requests
import json
from datetime import datetime
from pathlib import Path
import hashlib
import time

class GitHubBazaSync:
    def __init__(self, token, repo_owner, repo_name):
        self.token = token
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        self.base_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}"
        self.headers = {
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        # ID —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ Issue –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        self.baza_issue_id = None
        self.local_baza_path = Path("baza.txt")
    
    def find_or_create_baza_issue(self):
        """–ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π Issue –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        # –ò—â–µ–º Issue —Å –º–µ—Ç–∫–æ–π "baza-knowledge"
        url = f"{self.base_url}/issues"
        params = {"labels": "baza-knowledge", "state": "open"}
        
        response = requests.get(url, headers=self.headers, params=params)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub API: {response.status_code}")
            return None
            
        issues = response.json()
        
        if issues:
            self.baza_issue_id = issues[0]["number"]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Issue #{self.baza_issue_id} –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
            return issues[0]
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Issue
            return self.create_baza_issue()
    
    def create_baza_issue(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Issue –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        url = f"{self.base_url}/issues"
        
        initial_content = self.load_local_baza() or "# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FPF Bot\n\n*–§–∞–π–ª –ø—É—Å—Ç*"
        
        data = {
            "title": "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FPF Bot [AUTO-SYNC]",
            "body": f"""# ü§ñ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π

**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** –≠—Ç–æ—Ç Issue —Å–ª—É–∂–∏—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞.

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
- –õ—é–±–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
- Claude –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
- –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Claude:**
1. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –õ–û–ì–ò–ö–ò: –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –Ω–æ–≤—ã–º–∏ –∏–¥–µ—è–º–∏
2. –î–ª—è –ü–†–û–°–ú–û–¢–†–ê –±–∞–∑—ã: —á–∏—Ç–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –±–∞–∑–æ–π
3. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è

---

## üìÑ –¢–ï–ö–£–©–ê–Ø –í–ï–†–°–ò–Ø –ë–ê–ó–´:

```
{initial_content}
```

---

*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
""",
            "labels": ["baza-knowledge", "auto-sync", "documentation"]
        }
        
        response = requests.post(url, headers=self.headers, json=data)
        if response.status_code != 201:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Issue: {response.status_code}")
            return None
            
        issue = response.json()
        self.baza_issue_id = issue["number"]
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω Issue #{self.baza_issue_id} –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        return issue
    
    def load_local_baza(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        try:
            if self.local_baza_path.exists():
                return self.local_baza_path.read_text(encoding='utf-8')
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None
    
    def save_local_baza(self, content):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–æ"""
        try:
            self.local_baza_path.write_text(content, encoding='utf-8')
            print(f"üíæ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {self.local_baza_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def get_content_hash(self, content):
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        return hashlib.md5(content.encode('utf-8')).hexdigest()
    
    def update_issue_with_baza(self, new_content, source="local"):
        """–û–±–Ω–æ–≤–∏—Ç—å Issue –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –±–∞–∑—ã"""
        if not self.baza_issue_id:
            self.find_or_create_baza_issue()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        url = f"{self.base_url}/issues/{self.baza_issue_id}/comments"
        
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        content_hash = self.get_content_hash(new_content)
        
        comment_body = f"""## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π

**–ò—Å—Ç–æ—á–Ω–∏–∫:** {source}  
**–í—Ä–µ–º—è:** {timestamp}  
**–•–µ—à:** `{content_hash}`

```
{new_content}
```

---
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ*
"""
        
        data = {"body": comment_body}
        response = requests.post(url, headers=self.headers, json=data)
        
        if response.status_code == 201:
            print(f"‚úÖ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Issue #{self.baza_issue_id}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Issue: {response.status_code}")
            return False
    
    def get_latest_baza_from_issue(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –±–∞–∑—ã –∏–∑ Issue"""
        if not self.baza_issue_id:
            issue = self.find_or_create_baza_issue()
            if not issue:
                return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ Issue
        url = f"{self.base_url}/issues/{self.baza_issue_id}/comments"
        response = requests.get(url, headers=self.headers)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {response.status_code}")
            return None
            
        comments = response.json()
        
        if not comments:
            return None
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        for comment in reversed(comments):
            body = comment["body"]
            if "```" in body and "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π" in body:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ code block
                lines = body.split('\n')
                in_code_block = False
                content_lines = []
                
                for line in lines:
                    if line.strip() == "```" and not in_code_block:
                        in_code_block = True
                        continue
                    elif line.strip() == "```" and in_code_block:
                        break
                    elif in_code_block:
                        content_lines.append(line)
                
                if content_lines:
                    return '\n'.join(content_lines)
        
        return None
    
    def sync_from_issue_to_local(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∏–∑ Issue –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        print("üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Issue ‚Üí –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª...")
        latest_content = self.get_latest_baza_from_issue()
        
        if latest_content:
            local_content = self.load_local_baza()
            
            if latest_content != local_content:
                if self.save_local_baza(latest_content):
                    print("‚úÖ –ë–∞–∑–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ Issue –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
                    return True
            else:
                print("‚ÑπÔ∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Issue")
        
        return False
    
    def sync_from_local_to_issue(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ Issue"""
        print("üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª ‚Üí Issue...")
        local_content = self.load_local_baza()
        
        if local_content:
            latest_issue_content = self.get_latest_baza_from_issue()
            
            if local_content != latest_issue_content:
                if self.update_issue_with_baza(local_content, "local"):
                    print("‚úÖ –ë–∞–∑–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ Issue")
                    return True
            else:
                print("‚ÑπÔ∏è Issue —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –±–∞–∑—É")
        else:
            print("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return False
    
    def get_issue_url(self):
        """–ü–æ–ª—É—á–∏—Ç—å URL Issue —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
        if self.baza_issue_id:
            return f"https://github.com/{self.repo_owner}/{self.repo_name}/issues/{self.baza_issue_id}"
        return None

# –î–µ–º–æ–Ω –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
class GitHubBazaSyncDaemon:
    def __init__(self, sync_manager, check_interval=30):
        self.sync = sync_manager
        self.check_interval = check_interval
        self.last_local_hash = ""
        self.last_issue_hash = ""
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ GitHub —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval}—Å)")
        
        if not self.sync.find_or_create_baza_issue():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Issue –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            return
        
        print(f"üîó Issue URL: {self.sync.get_issue_url()}")
        
        try:
            while True:
                self.check_and_sync()
                time.sleep(self.check_interval)
                
        except KeyboardInterrupt:
            print("\nüõë –î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def check_and_sync(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        local_content = self.sync.load_local_baza()
        if local_content:
            current_local_hash = self.sync.get_content_hash(local_content)
            if current_local_hash != self.last_local_hash:
                print("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                self.sync.sync_from_local_to_issue()
                self.last_local_hash = current_local_hash
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Issue
        issue_content = self.sync.get_latest_baza_from_issue()
        if issue_content:
            current_issue_hash = self.sync.get_content_hash(issue_content)
            if current_issue_hash != self.last_issue_hash:
                print("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Issue")
                self.sync.sync_from_issue_to_local()
                self.last_issue_hash = current_issue_hash

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
def load_github_token():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å GitHub —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    import os
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
    env_path = Path(".env")
    if env_path.exists():
        for line in env_path.read_text().split('\n'):
            if line.startswith("GITHUB_TOKEN="):
                return line.split('=', 1)[1].strip()
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('GITHUB_TOKEN')
    if token:
        return token
    
    print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω: https://github.com/settings/tokens")
    print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª: GITHUB_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
    print("üí° –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python3 setup_github_sync.py")
    return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    GITHUB_TOKEN = load_github_token()
    if not GITHUB_TOKEN:
        print("‚ùå –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
        exit(1)
    
    REPO_OWNER = "Alex-Flok-SAN"
    REPO_NAME = "fpf-bot"
    
    sync = GitHubBazaSync(GITHUB_TOKEN, REPO_OWNER, REPO_NAME)
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
    
    # –ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    if not sync.find_or_create_baza_issue():
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Issue")
        exit(1)
    
    print(f"üîó Issue URL: {sync.get_issue_url()}")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    print("\nüì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã —Å Issue...")
    sync.sync_from_local_to_issue()  # –õ–æ–∫–∞–ª—å–Ω—ã–π ‚Üí Issue
    
    print("\nüì• –û–±—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    sync.sync_from_issue_to_local()  # Issue ‚Üí –õ–æ–∫–∞–ª—å–Ω—ã–π
    
    print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("   python3 -c \"from github_baza_sync import *; daemon = GitHubBazaSyncDaemon(GitHubBazaSync(load_github_token(), 'Alex-Flok-SAN', 'fpf-bot')); daemon.run()\"")
    print("üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python3 setup_github_sync.py")