#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GitHub —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
"""

import os
import sys
from pathlib import Path
from github_baza_sync import GitHubBazaSync, GitHubBazaSyncDaemon

def setup_token():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞"""
    print("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    print("\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω—É–∂–µ–Ω GitHub Personal Access Token:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ https://github.com/settings/tokens")
    print("2. –ù–∞–∂–º–∏—Ç–µ 'Generate new token (classic)'")
    print("3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:")
    print("   - repo (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º)")
    print("   - write:discussion (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Issues)")
    print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
    print()
    
    token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub —Ç–æ–∫–µ–Ω: ").strip()
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª
    env_path = Path(".env")
    env_content = ""
    
    if env_path.exists():
        env_content = env_path.read_text()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
    lines = env_content.split('\n')
    token_line = f"GITHUB_TOKEN={token}"
    
    token_found = False
    for i, line in enumerate(lines):
        if line.startswith("GITHUB_TOKEN="):
            lines[i] = token_line
            token_found = True
            break
    
    if not token_found:
        lines.append(token_line)
    
    env_path.write_text('\n'.join(lines))
    print("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª")
    return token

def load_token():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env"""
    env_path = Path(".env")
    if not env_path.exists():
        return None
    
    for line in env_path.read_text().split('\n'):
        if line.startswith("GITHUB_TOKEN="):
            return line.split('=', 1)[1].strip()
    return None

def test_sync_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
    token = load_token()
    if not token:
        token = setup_token()
        if not token:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return False
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync = GitHubBazaSync(token, "Alex-Flok-SAN", "fpf-bot")
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–∏—Å–∫ Issue
    print("\nüìã –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ Issue –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
    issue = sync.find_or_create_baza_issue()
    if not issue:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ Issue")
        return False
    
    print(f"üîó URL Issue: {sync.get_issue_url()}")
    
    # –¢–µ—Å—Ç 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ Issue
    print("\nüì§ –¢–µ—Å—Ç 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è baza.txt ‚Üí GitHub Issue...")
    if sync.sync_from_local_to_issue():
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ Issue")
    else:
        print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤ Issue")
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    print("\nüì• –¢–µ—Å—Ç 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è GitHub Issue ‚Üí –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª...")
    if sync.sync_from_issue_to_local():
        print("‚úÖ –ë–∞–∑–∞ –∏–∑ Issue —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ")
    else:
        print("‚ÑπÔ∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
    
    print("\nüéâ –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    print(f"üîó –í–∞—à Issue –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {sync.get_issue_url()}")
    
    return True

def start_daemon():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    
    token = load_token()
    if not token:
        print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    sync = GitHubBazaSync(token, "Alex-Flok-SAN", "fpf-bot")
    daemon = GitHubBazaSyncDaemon(sync, check_interval=30)
    
    try:
        daemon.run()
    except KeyboardInterrupt:
        print("\nüõë –î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("=" * 60)
    print("üöÄ GitHub –ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π - –°–∏—Å—Ç–µ–º–∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    print("=" * 60)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å GitHub —Ç–æ–∫–µ–Ω")
        print("2. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print("3. ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print("4. ‚ÑπÔ∏è  –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("5. üö™ –í—ã–π—Ç–∏")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()
        
        if choice == "1":
            setup_token()
        elif choice == "2":
            test_sync_system()
        elif choice == "3":
            start_daemon()
        elif choice == "4":
            show_status()
        elif choice == "5":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token = load_token()
    if token:
        print("‚úÖ GitHub —Ç–æ–∫–µ–Ω: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print("‚ùå GitHub —Ç–æ–∫–µ–Ω: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
    baza_path = Path("baza.txt")
    if baza_path.exists():
        size = len(baza_path.read_text(encoding='utf-8'))
        print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞: {size} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        print("‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub
    if token:
        try:
            sync = GitHubBazaSync(token, "Alex-Flok-SAN", "fpf-bot")
            issue = sync.find_or_create_baza_issue()
            if issue:
                print(f"‚úÖ GitHub Issue: #{sync.baza_issue_id}")
                print(f"üîó URL: {sync.get_issue_url()}")
            else:
                print("‚ùå GitHub Issue: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå GitHub –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    main()