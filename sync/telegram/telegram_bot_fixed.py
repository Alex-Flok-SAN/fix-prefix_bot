#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å event loop)
"""

import os
import re
import json
import logging
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import subprocess
import hashlib
import nest_asyncio

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å event loop
nest_asyncio.apply()

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class SmartBazaBot:
    def __init__(self, token, authorized_users):
        self.token = token
        self.authorized_users = set(authorized_users)
        self.baza_file = Path("baza.txt")
        self.gist_dir = Path("gist-baza")
        self.sections_cache = {}
        self.pending_updates = {}
        
    def is_authorized(self, user_id):
        return user_id in self.authorized_users
    
    def parse_sections(self, content: str) -> Dict[str, str]:
        """–†–∞–∑–±–∏—Ä–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–∞ —Å–µ–∫—Ü–∏–∏"""
        sections = {}
        current_section = "header"
        current_content = []
        
        lines = content.split('\n')
        
        for line in lines:
            if self.is_section_header(line):
                if current_content:
                    sections[current_section] = '\n'.join(current_content).strip()
                current_section = self.extract_section_name(line)
                current_content = [line]
            else:
                current_content.append(line)
        
        if current_content:
            sections[current_section] = '\n'.join(current_content).strip()
            
        return sections
    
    def is_section_header(self, line: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
        patterns = [
            r'^#{1,6}\s+',
            r'^=+\s*$',
            r'^\*\*[–ê-–Ø–Å\s]+\*\*',
            r'^\d+\.\s+[–ê-–Ø–Å]',
            r'^#\s*=+',
        ]
        
        for pattern in patterns:
            if re.match(pattern, line, re.IGNORECASE):
                return True
        return False
    
    def extract_section_name(self, line: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Å–µ–∫—Ü–∏–∏"""
        clean_line = re.sub(r'[#*=\d\.\s]+', '', line).strip()
        section_key = clean_line.lower().replace(' ', '_').replace('—ë', '–µ')
        section_key = re.sub(r'[^\w_]', '', section_key)
        return section_key[:30] if section_key else f"section_{hash(line) % 1000}"
    
    def get_section_summary(self, content: str) -> str:
        """–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏"""
        lines = [line.strip() for line in content.split('\n') if line.strip()][:3]
        summary = ' '.join(lines).strip()
        if len(summary) > 100:
            summary = summary[:97] + '...'
        return summary if summary else "–ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è"
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.is_authorized(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        keyboard = [
            [InlineKeyboardButton("üìñ –°–µ–∫—Ü–∏–∏", callback_data='show_sections')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data='status')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            """ü§ñ <b>Smart FPF Baza Bot v2.0</b>

üì± <b>JSON –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Claude iPhone:</b>

<code>{"action": "read_sections", "limit": 3}</code>

<code>{"action": "update_section", "section": "–æ—Å–Ω–æ–≤–Ω–∞—è_–∑–∞–¥–∞—á–∞", "changes": "–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"}</code>

<code>{"action": "add_section", "title": "–ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è", "content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ"}</code>

<code>{"action": "status"}</code>

<code>{"action": "backup"}</code>

üí¨ <b>–•—ç—à—Ç–µ–≥ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ #–∏–¥–µ—è - –¥–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é
‚Ä¢ #–∑–∞–¥–∞—á–∞ - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É  
‚Ä¢ #–ø—Ä–∞–≤–∫–∞ - –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏
‚Ä¢ #–±–∞–≥ - —Å–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ
‚Ä¢ #—Ä–µ—à–µ–Ω–∏–µ - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ

üìä <b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ö—ç—à—Ç–µ–≥–∏
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

‚úÖ <b>–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>""",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    async def handle_json_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –∫–æ–º–∞–Ω–¥"""
        if not self.is_authorized(update.effective_user.id):
            return
            
        text = update.message.text.strip()
        
        try:
            command = json.loads(text)
            action = command.get('action')
            
            if action == 'read_sections':
                await self.handle_read_sections(update, command)
            elif action == 'update_section':
                await self.handle_section_update(update, command)
            elif action == 'add_section':
                await self.handle_section_add(update, command)
            elif action == 'backup':
                await self.handle_backup_command(update, command)
            elif action == 'status':
                await self.handle_detailed_status(update, command)
            else:
                await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                
        except json.JSONDecodeError:
            await self.handle_text_command(update, context)
    
    async def handle_read_sections(self, update: Update, command: Dict):
        """–ß—Ç–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π"""
        limit = command.get('limit', 5)
        
        if not self.baza_file.exists():
            await update.message.reply_text("‚ùå –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        content = self.baza_file.read_text(encoding='utf-8')
        sections = self.parse_sections(content)
        
        if not sections:
            await update.message.reply_text("‚ùå –°–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        section_items = list(sections.items())[:limit]
        
        response = f"üìö <b>–°–µ–∫—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b> ({len(section_items)}):\n\n"
        
        for i, (key, content) in enumerate(section_items, 1):
            summary = self.get_section_summary(content)
            response += f"{i}. <code>{key}</code>\n   {summary}\n\n"
            
        if len(response) > 4000:
            response = response[:4000] + "\n\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
            
        await update.message.reply_text(response, parse_mode='HTML')
    
    async def handle_section_update(self, update: Update, command: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏"""
        section = command.get('section', '').lower()
        changes = command.get('changes', '')
        mode = command.get('mode', 'append')
        
        if not section or not changes:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ section –∏ changes")
            return
            
        if not self.baza_file.exists():
            await update.message.reply_text("‚ùå –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        content = self.baza_file.read_text(encoding='utf-8')
        sections = self.parse_sections(content)
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–∏
        found_section = None
        for sec_name in sections.keys():
            if section in sec_name.lower() or sec_name.lower() in section:
                found_section = sec_name
                break
        
        if not found_section:
            await update.message.reply_text(f"‚ùå –°–µ–∫—Ü–∏—è '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            available = ', '.join(list(sections.keys())[:3])
            await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {available}")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é
        old_content = sections[found_section]
        
        if mode == 'append':
            new_content = old_content + '\n' + changes
        elif mode == 'prepend':
            new_content = changes + '\n' + old_content
        else:
            new_content = old_content + '\n' + changes
        
        sections[found_section] = new_content
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await self.save_sections(sections)
        
        await update.message.reply_text(
            f"‚úÖ <b>–°–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìÇ –°–µ–∫—Ü–∏—è: <code>{found_section}</code>\n"
            f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(changes)} —Å–∏–º–≤–æ–ª–æ–≤",
            parse_mode='HTML'
        )
        
        await self.sync_to_gist(update, silent=True)
    
    async def handle_section_add(self, update: Update, command: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏"""
        title = command.get('title', '')
        content = command.get('content', '')
        
        if not title or not content:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ title –∏ content")
            return
            
        if self.baza_file.exists():
            existing_content = self.baza_file.read_text(encoding='utf-8')
        else:
            existing_content = ""
            
        section_header = f"## {title}" if not title.startswith('#') else title
        new_section = f"\n{section_header}\n\n{content}\n"
        all_content = existing_content + new_section
        
        self.baza_file.write_text(all_content, encoding='utf-8')
        
        await update.message.reply_text(
            f"‚úÖ <b>–ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìÇ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n"
            f"üìù –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤",
            parse_mode='HTML'
        )
        
        await self.sync_to_gist(update, silent=True)
    
    async def save_sections(self, sections: Dict[str, str]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        # –ë—ç–∫–∞–ø
        timestamp = int(datetime.now().timestamp())
        backup_file = Path(f"baza_backup_{timestamp}.txt")
        
        if self.baza_file.exists():
            backup_content = self.baza_file.read_text(encoding='utf-8')
            backup_file.write_text(backup_content, encoding='utf-8')
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–µ–∫—Ü–∏–∏
        content_parts = [section_content for section_content in sections.values()]
        full_content = '\n\n'.join(content_parts)
        
        self.baza_file.write_text(full_content, encoding='utf-8')
        logger.info(f"–ë–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –±—ç–∫–∞–ø: {backup_file}")
    
    async def sync_to_gist(self, update: Update, silent=False):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Gist"""
        try:
            if Path("gist_sync.py").exists():
                result = subprocess.run(['python3', 'gist_sync.py', 'push'], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    if not silent:
                        await update.message.reply_text("üîó ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å Gist!")
                    return
                    
        except Exception as e:
            if not silent:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            logger.error(f"Sync error: {e}")
    
    async def handle_backup_command(self, update: Update, command: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            if not self.baza_file.exists():
                await update.message.reply_text("‚ùå –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å timestamp
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_file = self.baza_file.parent / f"baza_backup_{timestamp}.txt"
            
            content = self.baza_file.read_text(encoding='utf-8')
            backup_file.write_text(content, encoding='utf-8')
            
            await update.message.reply_text(
                f"‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞</b>\n\n"
                f"üìÅ –§–∞–π–ª: <code>{backup_file.name}</code>\n"
                f"üìÑ –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                parse_mode='HTML'
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
    
    async def handle_detailed_status(self, update: Update, command: Dict):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            file_exists = self.baza_file.exists()
            gist_exists = self.gist_dir.exists()
            
            if file_exists:
                content = self.baza_file.read_text(encoding='utf-8')
                sections = self.parse_sections(content)
                file_size = len(content)
                sections_count = len(sections)
                lines_count = len(content.split('\n'))
                modified = datetime.fromtimestamp(self.baza_file.stat().st_mtime).strftime("%d.%m.%Y %H:%M:%S")
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                recent_lines = content.split('\n')[-5:]
                recent_preview = '\n'.join(recent_lines)[-150:] + "..." if len(recent_preview) > 150 else recent_preview
            else:
                file_size = 0
                sections_count = 0
                lines_count = 0
                modified = "–ù–µ –Ω–∞–π–¥–µ–Ω"
                recent_preview = "–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤
            backup_files = list(self.baza_file.parent.glob("baza_backup_*.txt"))
            backup_count = len(backup_files)
            
            status_text = f"""üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å FPF Bot</b>

üìÅ <b>–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:</b>
{'‚úÖ' if file_exists else '‚ùå'} <code>{self.baza_file.name}</code>
üìÑ –†–∞–∑–º–µ—Ä: {file_size} —Å–∏–º–≤–æ–ª–æ–≤
üìù –°—Ç—Ä–æ–∫: {lines_count}
üìö –°–µ–∫—Ü–∏–π: {sections_count}
üïí –ò–∑–º–µ–Ω–µ–Ω: {modified}

üíæ <b>–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:</b>
üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {backup_count} —Ñ–∞–π–ª–æ–≤

üîó <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b>
{'‚úÖ' if gist_exists else '‚ùå'} GitHub Gist –ø–æ–¥–∫–ª—é—á–µ–Ω
üÜî Gist ID: 63beb2b8d1fb3426dd5f064e79a0641f

üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>
<code>{recent_preview}</code>

ü§ñ <b>–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</b>"""
            
            await update.message.reply_text(status_text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def handle_text_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ö—ç—à—Ç–µ–≥–∏"""
        text = update.message.text
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        if any(tag in text_lower for tag in ['#–∏–¥–µ—è', '#–∑–∞–¥–∞—á–∞', '#–ø—Ä–∞–≤–∫–∞', '#–±–∞–≥', '#—Ä–µ—à–µ–Ω–∏–µ']):
            await self.handle_hashtag_message(update, context)
            return
        
        if '—Å–µ–∫—Ü–∏–∏' in text_lower or '—Å–ø–∏—Å–æ–∫' in text_lower:
            await self.show_sections(update)
        elif '—Å—Ç–∞—Ç—É—Å' in text_lower:
            await self.show_status(update)
        elif '–±—ç–∫–∞–ø' in text_lower or 'backup' in text_lower:
            command = {"action": "backup"}
            await self.handle_backup_command(update, command)
        else:
            await update.message.reply_text(
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON —Ñ–æ—Ä–º–∞—Ç:\n\n"
                '<code>{"action": "read_sections", "limit": 3}</code>\n\n'
                'üè∑Ô∏è –ò–ª–∏ —Ö—ç—à—Ç–µ–≥–∏: #–∏–¥–µ—è #–∑–∞–¥–∞—á–∞ #–ø—Ä–∞–≤–∫–∞ #–±–∞–≥ #—Ä–µ—à–µ–Ω–∏–µ',
                parse_mode='HTML'
            )
    
    async def handle_hashtag_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏"""
        text = update.message.text
        username = update.effective_user.username or update.effective_user.first_name
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
        entry_type = "üí° –ò–¥–µ—è"
        if "#–∑–∞–¥–∞—á–∞" in text.lower():
            entry_type = "üìã –ó–∞–¥–∞—á–∞"
        elif "#–ø—Ä–∞–≤–∫–∞" in text.lower():
            entry_type = "üîß –ü—Ä–∞–≤–∫–∞"
        elif "#–±–∞–≥" in text.lower():
            entry_type = "üêõ –ë–∞–≥"
        elif "#—Ä–µ—à–µ–Ω–∏–µ" in text.lower():
            entry_type = "‚úÖ –†–µ—à–µ–Ω–∏–µ"
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ö—ç—à—Ç–µ–≥–æ–≤
        import re
        clean_text = re.sub(r'#\w+\s*', '', text).strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
        timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')
        section_title = f"{entry_type} –æ—Ç {username}"
        section_content = f"""**–î–∞—Ç–∞:** {timestamp}  
**–ê–≤—Ç–æ—Ä:** @{username}  
**–û–ø–∏—Å–∞–Ω–∏–µ:** {clean_text}"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
        command = {
            "action": "add_section",
            "title": section_title,
            "content": section_content
        }
        
        await self.handle_section_add(update, command)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ç–∏–ø–æ–º
        await update.message.reply_text(
            f"‚úÖ <b>{entry_type} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É</b>\n"
            f"üìù –ê–≤—Ç–æ—Ä: @{username}\n"
            f"üïí –í—Ä–µ–º—è: {timestamp}",
            parse_mode='HTML'
        )
    
    async def show_sections(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏–∏"""
        if not self.baza_file.exists():
            await update.message.reply_text("‚ùå –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        content = self.baza_file.read_text(encoding='utf-8')
        sections = self.parse_sections(content)
        
        response = f"üìö <b>–°–µ–∫—Ü–∏–∏</b> ({len(sections)}):\n\n"
        
        for i, (key, content) in enumerate(sections.items(), 1):
            size = len(content)
            response += f"{i}. <code>{key}</code> ({size} —Å–∏–º–≤)\n"
            
        if len(response) > 4000:
            response = response[:4000] + "..."
            
        await update.message.reply_text(response, parse_mode='HTML')
    
    async def show_status(self, update: Update):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        file_exists = self.baza_file.exists()
        gist_exists = self.gist_dir.exists()
        
        if file_exists:
            content = self.baza_file.read_text(encoding='utf-8')
            sections = self.parse_sections(content)
            file_size = len(content)
            sections_count = len(sections)
        else:
            file_size = 0
            sections_count = 0
            
        status_text = f"""üìä <b>–°—Ç–∞—Ç—É—Å</b>

üìÅ baza.txt: {'‚úÖ' if file_exists else '‚ùå'}
üìÑ –†–∞–∑–º–µ—Ä: {file_size} —Å–∏–º–≤–æ–ª–æ–≤
üìö –°–µ–∫—Ü–∏–π: {sections_count}
üîó Gist: {'‚úÖ' if gist_exists else '‚ùå'}

ü§ñ <b>–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω</b>"""
        
        await update.message.reply_text(status_text, parse_mode='HTML')
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'show_sections':
            await self.show_sections(query)
        elif query.data == 'status':
            await self.show_status(query)

def main():
    BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    AUTHORIZED_USERS = os.getenv("AUTHORIZED_USER_IDS", "").split(",")
    
    if not BOT_TOKEN or not AUTHORIZED_USERS[0]:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return
    
    authorized_ids = [int(uid.strip()) for uid in AUTHORIZED_USERS if uid.strip()]
    
    bot = SmartBazaBot(BOT_TOKEN, authorized_ids)
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_json_command))
    application.add_handler(CallbackQueryHandler(bot.handle_callback_query))
    
    print("üöÄ Smart Baza Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ù–∞–π–¥–∏—Ç–µ @fixprefix_bot –≤ Telegram")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    try:
        application.run_polling(drop_pending_updates=True)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()