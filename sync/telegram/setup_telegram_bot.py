#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
"""

import os
from pathlib import Path

def create_env_template():
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞ –¥–ª—è –±–æ—Ç–∞"""
    env_path = Path(".env")
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
    existing_vars = {}
    if env_path.exists():
        for line in env_path.read_text().split('\n'):
            if '=' in line and not line.startswith('#'):
                key, value = line.split('=', 1)
                existing_vars[key] = value
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    new_vars = {}
    
    if 'TELEGRAM_BOT_TOKEN' not in existing_vars:
        print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —É @BotFather –≤ Telegram")
        print("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        bot_token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞: ").strip()
        if bot_token:
            new_vars['TELEGRAM_BOT_TOKEN'] = bot_token
    
    if 'AUTHORIZED_USER_IDS' not in existing_vars:
        print("\nüë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("–ù–∞–π–¥–∏—Ç–µ –≤–∞—à User ID:")
        print("- –ù–∞–ø–∏—à–∏—Ç–µ @userinfobot –≤ Telegram")
        print("- –ò–ª–∏ @raw_data_bot")
        user_ids = input("–í–≤–µ–¥–∏—Ç–µ User ID (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ): ").strip()
        if user_ids:
            new_vars['AUTHORIZED_USER_IDS'] = user_ids
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env
    if new_vars:
        all_vars = {**existing_vars, **new_vars}
        
        env_content = []
        for key, value in all_vars.items():
            env_content.append(f"{key}={value}")
        
        env_path.write_text('\n'.join(env_content) + '\n')
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {env_path}")
        
        print("\nüìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for key, value in new_vars.items():
            masked_value = value[:10] + "..." if len(value) > 10 else value
            print(f"  {key}={masked_value}")
    else:
        print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

def install_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã"""
    requirements = [
        'python-telegram-bot==20.3',
        'requests',
        'pathlib',
    ]
    
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    for package in requirements:
        print(f"Installing {package}...")
        os.system(f"pip3 install {package}")
    
    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def create_gist_clone_dir():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–ª–æ–Ω–∞ Gist"""
    gist_dir = Path("gist-baza")
    
    if gist_dir.exists():
        print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è gist-baza —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è Gist...")
    
    # –ß–∏—Ç–∞–µ–º GIST_ID –∏–∑ .env
    env_path = Path(".env")
    gist_id = None
    
    if env_path.exists():
        for line in env_path.read_text().split('\n'):
            if line.startswith("GIST_ID="):
                gist_id = line.split('=', 1)[1].strip()
                break
    
    if gist_id:
        gist_url = f"https://gist.github.com/{gist_id}.git"
        print(f"üîó –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Gist: {gist_url}")
        
        result = os.system(f"git clone {gist_url} gist-baza")
        if result == 0:
            print("‚úÖ Gist —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ gist-baza/")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Gist")
    else:
        print("‚ö†Ô∏è GIST_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        gist_dir.mkdir()
        print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è gist-baza/")

def test_bot_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
    env_path = Path(".env")
    
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    required_vars = ['TELEGRAM_BOT_TOKEN', 'AUTHORIZED_USER_IDS']
    missing_vars = []
    
    env_content = env_path.read_text()
    
    for var in required_vars:
        if f"{var}=" not in env_content:
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

def main():
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Smart Telegram Bot –¥–ª—è FPF Baza")
    print("=" * 50)
    
    # –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_requirements()
    
    # –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    create_env_template()
    
    # –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_gist_clone_dir()
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if test_bot_config():
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python3 smart_telegram_bot.py")
        print("2. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start –≤ Telegram")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        
        print("\nüí° JSON –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Claude iPhone:")
        print('{"action": "read_sections", "limit": 5}')
        print('{"action": "update_section", "section": "—Å–µ–∫—Ü–∏—è", "changes": "–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"}')
        print('{"action": "add_section", "title": "–ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è", "content": "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"}')
        
    else:
        print("‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")

if __name__ == "__main__":
    main()