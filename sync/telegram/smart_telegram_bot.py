#!/usr/bin/env python3
"""
–£–º–Ω—ã–π Telegram Bot –¥–ª—è —Ç–æ—á–µ—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π FPF
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏, —É–º–µ–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
"""

import os
import re
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import subprocess
import hashlib

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class SmartBazaBot:
    def __init__(self, token, authorized_users):
        self.token = token
        self.authorized_users = set(authorized_users)
        self.baza_file = Path("baza.txt")
        self.gist_dir = Path("gist-baza")
        self.sections_cache = {}
        self.pending_updates = {}  # –•—Ä–∞–Ω–∏—Ç —á–∞—Å—Ç–∏—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
    def is_authorized(self, user_id):
        return user_id in self.authorized_users
    
    def parse_sections(self, content: str) -> Dict[str, str]:
        """–†–∞–∑–±–∏—Ä–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–∞ —Å–µ–∫—Ü–∏–∏"""
        sections = {}
        current_section = "header"
        current_content = []
        
        lines = content.split('\n')
        
        for line in lines:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
            if self.is_section_header(line):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
                if current_content:
                    sections[current_section] = '\n'.join(current_content).strip()
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                current_section = self.extract_section_name(line)
                current_content = [line]
            else:
                current_content.append(line)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
        if current_content:
            sections[current_section] = '\n'.join(current_content).strip()
            
        return sections
    
    def is_section_header(self, line: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å–µ–∫—Ü–∏–∏"""
        patterns = [
            r'^#{1,6}\s+',  # Markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏
            r'^=+\s*$',     # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ===== (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
            r'^\*\*[–ê-–Ø–Å\s]+\*\*',  # **–ó–ê–ì–û–õ–û–í–û–ö**
            r'^\d+\.\s+[–ê-–Ø–Å]',     # 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫
            r'^##\s+[–ê-–Ø–Å]',        # ## –ó–∞–≥–æ–ª–æ–≤–æ–∫
            r'^#\s*=+',             # # ====== —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        ]
        
        for pattern in patterns:
            if re.match(pattern, line, re.IGNORECASE):
                return True
        return False
    
    def extract_section_name(self, line: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Å–µ–∫—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        # –£–±–∏—Ä–∞–µ–º markdown —Å–∏–º–≤–æ–ª—ã –∏ –æ—á–∏—â–∞–µ–º
        clean_line = re.sub(r'[#*=\d\.\s]+', '', line).strip()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–ª—é—á
        section_key = clean_line.lower().replace(' ', '_').replace('—ë', '–µ')
        
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª—ã
        section_key = re.sub(r'[^\w_]', '', section_key)
        
        return section_key[:30] if section_key else f"section_{hash(line) % 1000}"
    
    def get_section_summary(self, content: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        lines = [line.strip() for line in content.split('\n') if line.strip()][:3]
        summary = ' '.join(lines).strip()
        
        if len(summary) > 100:
            summary = summary[:97] + '...'
            
        return summary if summary else "–ü—É—Å—Ç–∞—è —Å–µ–∫—Ü–∏—è"
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.is_authorized(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        keyboard = [
            [
                InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏–∏", callback_data='show_sections'),
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é", callback_data='add_section')
            ],
            [
                InlineKeyboardButton("‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é", callback_data='update_section'),
                InlineKeyboardButton("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data='apply_changes')
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data='status'),
                InlineKeyboardButton("üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data='sync_gist')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            """ü§ñ <b>Smart FPF Baza Bot</b>

üîç <b>–£–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–µ–∫—Ü–∏—è–º–∏ –±–∞–∑—ã:</b>
‚Ä¢ –¢–æ—á–µ—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ–∫—Ü–∏–π  
‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–∞—Å—Ç—è–º–∏
‚Ä¢ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub Gist

üì± <b>–î–ª—è Claude iPhone:</b>
–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

<code>
{
  "action": "update_section",
  "section": "—ç—Ç–∞–ø_1_—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è", 
  "changes": "- [x] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ timestamp –ª–æ–≥–∏–∫—É"
}
</code>

<code>
{
  "action": "add_section",
  "title": "–ù–æ–≤—ã–µ –∏–¥–µ–∏",
  "content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏"
}
</code>""",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    async def handle_json_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –∫–æ–º–∞–Ω–¥ –æ—Ç Claude iPhone"""
        if not self.is_authorized(update.effective_user.id):
            return
            
        text = update.message.text.strip()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            command = json.loads(text)
            
            action = command.get('action')
            
            if action == 'update_section':
                await self.handle_section_update(update, command)
            elif action == 'add_section':
                await self.handle_section_add(update, command)
            elif action == 'replace_section':
                await self.handle_section_replace(update, command)
            elif action == 'delete_section':
                await self.handle_section_delete(update, command)
            elif action == 'read_sections':
                await self.handle_read_sections(update, command)
            else:
                await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                
        except json.JSONDecodeError:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É
            await self.handle_text_command(update, context)
    
    async def handle_section_update(self, update: Update, command: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏"""
        section = command.get('section', '').lower()
        changes = command.get('changes', '')
        mode = command.get('mode', 'append')  # append, prepend, replace
        
        if not section or not changes:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ section –∏ changes")
            return
            
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É
        if not self.baza_file.exists():
            await update.message.reply_text("‚ùå –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        content = self.baza_file.read_text(encoding='utf-8')
        sections = self.parse_sections(content)
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é (–Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫)
        found_section = self.find_section_fuzzy(section, sections.keys())
        
        if not found_section:
            await update.message.reply_text(f"‚ùå –°–µ–∫—Ü–∏—è '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            available = ', '.join(list(sections.keys())[:5])
            await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–∫—Ü–∏–∏: {available}")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        old_content = sections[found_section]
        
        if mode == 'append':
            new_content = old_content + '\n' + changes
        elif mode == 'prepend':
            new_content = changes + '\n' + old_content
        elif mode == 'replace':
            new_content = changes
        else:
            new_content = old_content + '\n' + changes
        
        sections[found_section] = new_content
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É
        await self.save_sections(sections)
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        await update.message.reply_text(
            f"‚úÖ <b>–°–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìÇ –°–µ–∫—Ü–∏—è: <code>{found_section}</code>\n"
            f"üîÑ –†–µ–∂–∏–º: <code>{mode}</code>\n"
            f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(changes)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚è∞ –í—Ä–µ–º—è: {timestamp}",
            parse_mode='HTML'
        )
        
        # –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        await self.sync_to_gist(update, silent=True)
    
    def find_section_fuzzy(self, target: str, sections: List[str]) -> Optional[str]:
        """–ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–∏"""
        target = target.lower()
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for section in sections:
            if section.lower() == target:
                return section
                
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for section in sections:
            if target in section.lower() or section.lower() in target:
                return section
                
        return None
    
    async def handle_section_add(self, update: Update, command: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏"""
        title = command.get('title', '')
        content = command.get('content', '')
        position = command.get('position', 'end')  # end, start, after:section_name
        
        if not title or not content:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ title –∏ content")
            return
            
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É
        if self.baza_file.exists():
            existing_content = self.baza_file.read_text(encoding='utf-8')
        else:
            existing_content = ""
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
        section_header = f"# {title}" if not title.startswith('#') else title
        new_section = f"\n{section_header}\n\n{content}\n"
        
        if position == 'start':
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
            all_content = new_section + '\n' + existing_content
        elif position.startswith('after:'):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
            target_section = position.split(':', 1)[1]
            sections = self.parse_sections(existing_content)
            found_section = self.find_section_fuzzy(target_section, sections.keys())
            
            if found_section:
                # –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≤—Å—Ç–∞–≤–∫–æ–π
                all_content = self.insert_section_after(existing_content, found_section, new_section)
            else:
                all_content = existing_content + new_section
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            all_content = existing_content + new_section
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self.baza_file.write_text(all_content, encoding='utf-8')
        
        section_key = self.extract_section_name(title)
        await update.message.reply_text(
            f"‚úÖ <b>–ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìÇ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n"
            f"üîë –ö–ª—é—á: <code>{section_key}</code>\n"
            f"üìù –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"üìç –ü–æ–∑–∏—Ü–∏—è: {position}",
            parse_mode='HTML'
        )
        
        await self.sync_to_gist(update, silent=True)
    
    def insert_section_after(self, content: str, target_section: str, new_section: str) -> str:
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π"""
        sections = self.parse_sections(content)
        result_parts = []
        
        for section_name, section_content in sections.items():
            result_parts.append(section_content)
            if section_name == target_section:
                result_parts.append(new_section)
        
        return '\n\n'.join(result_parts)
    
    async def handle_section_replace(self, update: Update, command: Dict):
        """–ó–∞–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏"""
        section = command.get('section', '').lower()
        content = command.get('content', '')
        
        if not section or not content:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ section –∏ content")
            return
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º handle_section_update —Å —Ä–µ–∂–∏–º–æ–º replace
        command['mode'] = 'replace'
        command['changes'] = content
        await self.handle_section_update(update, command)
    
    async def handle_section_delete(self, update: Update, command: Dict):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏"""
        section = command.get('section', '').lower()
        
        if not section:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ section")
            return
            
        if not self.baza_file.exists():
            await update.message.reply_text("‚ùå –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        content = self.baza_file.read_text(encoding='utf-8')
        sections = self.parse_sections(content)
        
        found_section = self.find_section_fuzzy(section, sections.keys())
        
        if not found_section:
            await update.message.reply_text(f"‚ùå –°–µ–∫—Ü–∏—è '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏—é
        del sections[found_section]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await self.save_sections(sections)
        
        await update.message.reply_text(
            f"‚úÖ <b>–°–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!</b>\n\n"
            f"üìÇ –£–¥–∞–ª–µ–Ω–∞: <code>{found_section}</code>",
            parse_mode='HTML'
        )
        
        await self.sync_to_gist(update, silent=True)
    
    async def handle_read_sections(self, update: Update, command: Dict):
        """–ß—Ç–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π –±–∞–∑—ã"""
        filter_pattern = command.get('filter', '')
        limit = command.get('limit', 10)
        detailed = command.get('detailed', False)
        
        if not self.baza_file.exists():
            await update.message.reply_text("‚ùå –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        content = self.baza_file.read_text(encoding='utf-8')
        sections = self.parse_sections(content)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–π
        if filter_pattern:
            filtered_sections = {k: v for k, v in sections.items() 
                               if filter_pattern.lower() in k.lower()}
        else:
            filtered_sections = sections
            
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        section_items = list(filtered_sections.items())[:limit]
        
        if not section_items:
            await update.message.reply_text("‚ùå –°–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if detailed:
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ —á–∞—Å—Ç—è–º
            for i, (key, section_content) in enumerate(section_items, 1):
                header = f"üìö <b>–°–µ–∫—Ü–∏—è {i}: {key}</b>\n" + "="*40 + "\n"
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–æ–π
                if len(section_content) > 3000:
                    parts = self.split_content(section_content, 3000)
                    for part_num, part in enumerate(parts, 1):
                        part_header = f"{header}–ß–∞—Å—Ç—å {part_num}/{len(parts)}:\n\n" if part_num == 1 else f"–ß–∞—Å—Ç—å {part_num}/{len(parts)} (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n\n"
                        await update.message.reply_text(part_header + part, parse_mode='HTML')
                else:
                    await update.message.reply_text(header + section_content, parse_mode='HTML')
        else:
            # –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä
            response = f"üìö <b>–°–µ–∫—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b> ({len(section_items)}):\n\n"
            
            for i, (key, content) in enumerate(section_items, 1):
                summary = self.get_section_summary(content)
                response += f"{i}. <b>{key}</b>\n   {summary}\n\n"
                
            # Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
            if len(response) > 4000:
                response = response[:4000] + "\n\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
                
            await update.message.reply_text(response, parse_mode='HTML')
    
    def split_content(self, content: str, max_length: int) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –ª–∏–º–∏—Ç—É —Å–∏–º–≤–æ–ª–æ–≤"""
        if len(content) <= max_length:
            return [content]
            
        parts = []
        lines = content.split('\n')
        current_part = []
        current_length = 0
        
        for line in lines:
            if current_length + len(line) + 1 > max_length and current_part:
                parts.append('\n'.join(current_part))
                current_part = [line]
                current_length = len(line)
            else:
                current_part.append(line)
                current_length += len(line) + 1
        
        if current_part:
            parts.append('\n'.join(current_part))
            
        return parts
    
    async def save_sections(self, sections: Dict[str, str]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª"""
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        timestamp = int(datetime.now().timestamp())
        backup_file = Path(f"baza_backup_{timestamp}.txt")
        
        if self.baza_file.exists():
            backup_content = self.baza_file.read_text(encoding='utf-8')
            backup_file.write_text(backup_content, encoding='utf-8')
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–µ–∫—Ü–∏–∏ –≤ –µ–¥–∏–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_parts = []
        
        for section_name, section_content in sections.items():
            content_parts.append(section_content)
            
        full_content = '\n\n'.join(content_parts)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        self.baza_file.write_text(full_content, encoding='utf-8')
        
        logger.info(f"–ë–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –±—ç–∫–∞–ø: {backup_file}")
    
    async def sync_to_gist(self, update: Update, silent=False):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub Gist"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à gist_sync.py
            if Path("gist_sync.py").exists():
                result = subprocess.run(['python3', 'gist_sync.py', 'push'], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    if not silent:
                        await update.message.reply_text("üîó ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ gist_sync.py!")
                    return
            
            # Fallback –∫ git –æ–ø–µ—Ä–∞—Ü–∏—è–º –µ—Å–ª–∏ –µ—Å—Ç—å gist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            if self.gist_dir.exists() and self.baza_file.exists():
                # –ö–æ–ø–∏—Ä—É–µ–º –≤ gist –ø–∞–ø–∫—É
                gist_file = self.gist_dir / "gistfile1.txt"
                content = self.baza_file.read_text(encoding='utf-8')
                gist_file.write_text(content, encoding='utf-8')
                
                # Git –æ–ø–µ—Ä–∞—Ü–∏–∏
                original_cwd = os.getcwd()
                os.chdir(self.gist_dir)
                
                subprocess.run(['git', 'add', '.'], check=True, capture_output=True)
                subprocess.run(['git', 'commit', '-m', f'Smart Bot Update - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'], 
                             check=True, capture_output=True)
                subprocess.run(['git', 'push'], check=True, capture_output=True)
                
                os.chdir(original_cwd)
                
                if not silent:
                    await update.message.reply_text("üîó ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å GitHub Gist!")
                    
        except Exception as e:
            if not silent:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            logger.error(f"Sync error: {e}")
    
    async def handle_text_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        text = update.message.text.lower()
        
        if '–ø–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏–∏' in text or '—Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π' in text:
            await self.show_sections(update)
        elif '—Å—Ç–∞—Ç—É—Å' in text:
            await self.show_status(update)
        elif text.startswith('–¥–æ–±–∞–≤—å –≤ —Å–µ–∫—Ü–∏—é'):
            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            await update.message.reply_text(
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON —Ñ–æ—Ä–º–∞—Ç:\n\n"
                "<code>{\n"
                '  "action": "update_section",\n'
                '  "section": "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–µ–∫—Ü–∏–∏",\n'
                '  "changes": "–Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"\n'
                "}</code>",
                parse_mode='HTML'
            )
    
    async def show_sections(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π"""
        if not self.baza_file.exists():
            await update.message.reply_text("‚ùå –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        content = self.baza_file.read_text(encoding='utf-8')
        sections = self.parse_sections(content)
        
        if not sections:
            await update.message.reply_text("‚ùå –°–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        response = f"üìö <b>–°–µ–∫—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b> ({len(sections)}):\n\n"
        
        for i, (key, content) in enumerate(sections.items(), 1):
            size = len(content)
            lines = len(content.split('\n'))
            response += f"{i}. <code>{key}</code> ({size} —Å–∏–º–≤, {lines} —Å—Ç—Ä–æ–∫)\n"
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4000:
            parts = self.split_content(response, 4000)
            for part in parts:
                await update.message.reply_text(part, parse_mode='HTML')
        else:
            await update.message.reply_text(response, parse_mode='HTML')
    
    async def show_status(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        file_exists = self.baza_file.exists()
        gist_exists = self.gist_dir.exists()
        gist_sync_exists = Path("gist_sync.py").exists()
        
        if file_exists:
            content = self.baza_file.read_text(encoding='utf-8')
            sections = self.parse_sections(content)
            file_size = len(content)
            sections_count = len(sections)
            modified = datetime.fromtimestamp(self.baza_file.stat().st_mtime).strftime("%Y-%m-%d %H:%M:%S")
        else:
            file_size = 0
            sections_count = 0
            modified = "–ù–µ –Ω–∞–π–¥–µ–Ω"
            
        status_text = f"""üìä <b>–°—Ç–∞—Ç—É—Å Smart Baza Bot</b>

üìÅ <b>–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:</b>
{'‚úÖ' if file_exists else '‚ùå'} baza.txt
üìÑ –†–∞–∑–º–µ—Ä: {file_size} —Å–∏–º–≤–æ–ª–æ–≤
üìö –°–µ–∫—Ü–∏–π: {sections_count}
üïí –ò–∑–º–µ–Ω–µ–Ω: {modified}

üîó <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b>
{'‚úÖ' if gist_sync_exists else '‚ùå'} gist_sync.py
{'‚úÖ' if gist_exists else '‚ùå'} –ü–∞–ø–∫–∞ gist-baza

ü§ñ <b>–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</b>
üë• –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã: {len(self.authorized_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
        
        await update.message.reply_text(status_text, parse_mode='HTML')
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'show_sections':
            await self.show_sections(query)
        elif query.data == 'status':
            await self.show_status(query)
        elif query.data == 'sync_gist':
            await self.sync_to_gist(query, silent=False)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    AUTHORIZED_USERS = os.getenv("AUTHORIZED_USER_IDS", "").split(",")
    
    if not BOT_TOKEN or not AUTHORIZED_USERS[0]:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        print("AUTHORIZED_USER_IDS=user_id1,user_id2")
        return
    
    authorized_ids = [int(uid.strip()) for uid in AUTHORIZED_USERS if uid.strip()]
    
    bot = SmartBazaBot(BOT_TOKEN, authorized_ids)
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_json_command))
    application.add_handler(CallbackQueryHandler(bot.handle_callback_query))
    
    print("üöÄ Smart Baza Bot –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())