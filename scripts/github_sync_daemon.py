#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîÑ GitHub Sync Daemon
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π —Å GitHub –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ Claude
"""

import os
import time
import json
import requests
import subprocess
from datetime import datetime
from pathlib import Path

class GitHubSyncDaemon:
    def __init__(self):
        self.repo_owner = "Alex-Flok-SAN"
        self.repo_name = "fix-prefix_bot"
        self.sync_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.last_sync = None
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.watched_files = [
            "ULTIMATE_KNOWLEDGE_BASE_GUIDE_FOR_AI_TRAINING.md",
            "baza/01_fpf_pattern.txt",
            "baza/02_philosophy.txt", 
            "core/ai_search_pattern/inference.py",
            "ai/ocr_engine.py"
        ]
        
        self.log_file = Path("logs/github_sync.log")
        self.log_file.parent.mkdir(exist_ok=True)
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
        
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(log_entry + "\n")
    
    def get_repo_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ GitHub API"""
        try:
            url = f"https://api.github.com/repos/{self.repo_owner}/{self.repo_name}"
            response = requests.get(url)
            
            if response.status_code == 200:
                return response.json()
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ: {response.status_code}")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GitHub API: {e}")
            return None
    
    def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç —á–µ—Ä–µ–∑ Git
            result = subprocess.run(
                ["git", "rev-parse", "HEAD"],
                capture_output=True,
                text=True,
                cwd=Path.cwd()
            )
            
            if result.returncode == 0:
                current_commit = result.stdout.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–º–º–∏—Ç
                commit_file = Path("logs/last_commit.txt")
                last_known_commit = ""
                
                if commit_file.exists():
                    last_known_commit = commit_file.read_text().strip()
                
                if current_commit != last_known_commit:
                    self.log(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: {current_commit[:8]}")
                    commit_file.write_text(current_commit)
                    return True
                
            return False
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return False
    
    def generate_claude_context(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Claude"""
        try:
            subprocess.run(["python3", "scripts/generate_claude_context.py"], check=True)
            self.log("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Claude –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    def notify_changes(self):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
        changes_file = Path("claude_prompts/latest_changes.txt")
        
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ
        try:
            result = subprocess.run(
                ["git", "log", "-1", "--pretty=format:%h - %s (%an, %ar)"],
                capture_output=True,
                text=True,
                cwd=Path.cwd()
            )
            
            last_commit_info = result.stdout.strip() if result.returncode == 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        except Exception:
            last_commit_info = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–µ"
        
        notification = f"""# üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPF Bot - {timestamp}

## üì• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
{last_commit_info}

## üåê –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ Claude:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:

```
–û–±–Ω–æ–≤–∏—Å—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º FPF Bot:
https://raw.githubusercontent.com/{self.repo_owner}/{self.repo_name}/main/ULTIMATE_KNOWLEDGE_BASE_GUIDE_FOR_AI_TRAINING.md

–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ?
```

## ‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {timestamp}
## üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/{self.repo_owner}/{self.repo_name}

---
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ GitHub Sync Daemon*
"""
        
        changes_file.write_text(notification, encoding="utf-8")
        self.log(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {changes_file}")
    
    def sync_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.log("üîÑ –ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        
        if self.check_for_updates():
            self.log("üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç...")
            
            if self.generate_claude_context():
                self.notify_changes()
                self.log("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        else:
            self.log("üìä –ù–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    def run_daemon(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.log(f"üöÄ –ó–∞–ø—É—Å–∫ GitHub Sync Daemon –¥–ª—è {self.repo_owner}/{self.repo_name}")
        self.log(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {self.sync_interval} —Å–µ–∫—É–Ω–¥")
        
        try:
            while True:
                self.sync_cycle()
                time.sleep(self.sync_interval)
                
        except KeyboardInterrupt:
            self.log("üõë –î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            self.log(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω–∞: {e}")
    
    def run_once(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        self.log("üéØ –†–∞–∑–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...")
        self.sync_cycle()

def create_daemon_control_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ–Ω–æ–º"""
    
    control_script = """#!/bin/bash

# üîÑ GitHub Sync Daemon Control Script

DAEMON_PID_FILE=".github_sync_daemon.pid"
DAEMON_SCRIPT="scripts/github_sync_daemon.py"

case "$1" in
    start)
        if [ -f "$DAEMON_PID_FILE" ]; then
            PID=$(cat $DAEMON_PID_FILE)
            if ps -p $PID > /dev/null 2>&1; then
                echo "üü° –î–µ–º–æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $PID)"
                exit 1
            else
                rm -f $DAEMON_PID_FILE
            fi
        fi
        
        echo "üöÄ –ó–∞–ø—É—Å–∫ GitHub Sync Daemon..."
        nohup python3 $DAEMON_SCRIPT > logs/github_sync_daemon.out 2>&1 &
        echo $! > $DAEMON_PID_FILE
        echo "‚úÖ –î–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω (PID: $!)"
        ;;
        
    stop)
        if [ -f "$DAEMON_PID_FILE" ]; then
            PID=$(cat $DAEMON_PID_FILE)
            if ps -p $PID > /dev/null 2>&1; then
                kill $PID
                rm -f $DAEMON_PID_FILE
                echo "üõë –î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            else
                rm -f $DAEMON_PID_FILE
                echo "‚ö†Ô∏è  –î–µ–º–æ–Ω –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
            fi
        else
            echo "‚ùå PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        ;;
        
    status)
        if [ -f "$DAEMON_PID_FILE" ]; then
            PID=$(cat $DAEMON_PID_FILE)
            if ps -p $PID > /dev/null 2>&1; then
                echo "üü¢ –î–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω (PID: $PID)"
            else
                echo "üî¥ –î–µ–º–æ–Ω –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (PID —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω)"
                rm -f $DAEMON_PID_FILE
            fi
        else
            echo "üî¥ –î–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
        ;;
        
    sync)
        echo "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è..."
        python3 $DAEMON_SCRIPT --once
        ;;
        
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|status|sync}"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  start  - –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
        echo "  stop   - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω"  
        echo "  status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–º–æ–Ω–∞"
        echo "  sync   - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
        exit 1
        ;;
esac
"""
    
    control_path = Path("scripts/github_sync_control.sh")
    control_path.write_text(control_script, encoding="utf-8")
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    subprocess.run(["chmod", "+x", str(control_path)])
    
    print(f"‚úÖ –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {control_path}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--once":
        # –†–∞–∑–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        daemon = GitHubSyncDaemon()
        daemon.run_once()
    else:
        # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–µ–º–æ–Ω
        daemon = GitHubSyncDaemon() 
        daemon.run_daemon()