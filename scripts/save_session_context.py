#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üíæ Session Context Saver
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏ Claude Code –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
"""

import os
import json
import subprocess
from datetime import datetime
from pathlib import Path

class SessionContextSaver:
    def __init__(self):
        self.backup_file = Path("SESSION_CONTEXT_BACKUP.md")
        self.context_dir = Path("session_context")
        self.context_dir.mkdir(exist_ok=True)
        
    def get_git_status(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Git"""
        try:
            # Git status
            status_result = subprocess.run(
                ["git", "status", "--porcelain"], 
                capture_output=True, text=True
            )
            
            # Git log - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–º–∏—Ç–æ–≤
            log_result = subprocess.run(
                ["git", "log", "--oneline", "-5"], 
                capture_output=True, text=True
            )
            
            # Current branch
            branch_result = subprocess.run(
                ["git", "rev-parse", "--abbrev-ref", "HEAD"],
                capture_output=True, text=True
            )
            
            # Uncommitted changes
            diff_result = subprocess.run(
                ["git", "diff", "--name-only"],
                capture_output=True, text=True
            )
            
            return {
                "status": status_result.stdout.strip(),
                "recent_commits": log_result.stdout.strip(),
                "current_branch": branch_result.stdout.strip(),
                "uncommitted_files": diff_result.stdout.strip()
            }
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Git —Å—Ç–∞—Ç—É—Å–∞: {e}"}
    
    def get_project_structure(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ (–∏—Å–∫–ª—é—á–∞—è .git, __pycache__, logs)
            tree_result = subprocess.run([
                "find", ".", 
                "-type", "f",
                "-not", "-path", "./.git/*",
                "-not", "-path", "./__pycache__/*", 
                "-not", "-path", "./logs/*",
                "-not", "-path", "./*.pyc",
                "-not", "-name", "*.log"
            ], capture_output=True, text=True)
            
            return tree_result.stdout.strip().split('\n')
            
        except Exception as e:
            return [f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}"]
    
    def get_running_processes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–µ–º–æ–Ω–æ–≤"""
        processes = {}
        
        # GitHub Sync Daemon
        try:
            pid_file = Path(".github_sync_daemon.pid")
            if pid_file.exists():
                pid = pid_file.read_text().strip()
                check_result = subprocess.run(
                    ["ps", "-p", pid], 
                    capture_output=True, text=True
                )
                processes["github_sync_daemon"] = {
                    "pid": pid,
                    "running": check_result.returncode == 0
                }
        except Exception:
            processes["github_sync_daemon"] = {"status": "unknown"}
        
        return processes
    
    def get_key_files_content(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        key_files = [
            "SYNC_GUIDELINES.md",
            "CLAUDE_WEB_INTEGRATION.md", 
            ".vscode/settings.json",
            "claude_prompts/main_context.txt",
            "requirements.txt"
        ]
        
        files_content = {}
        
        for file_path in key_files:
            try:
                path = Path(file_path)
                if path.exists():
                    # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫
                    with open(path, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        if len(lines) > 50:
                            content = ''.join(lines[:50]) + f"\n... (–µ—â–µ {len(lines)-50} —Å—Ç—Ä–æ–∫)"
                        else:
                            content = ''.join(lines)
                    
                    files_content[file_path] = {
                        "size": len(content),
                        "lines": len(lines),
                        "content_preview": content
                    }
                else:
                    files_content[file_path] = {"status": "not_found"}
                    
            except Exception as e:
                files_content[file_path] = {"error": str(e)}
        
        return files_content
    
    def generate_terminal_command_summary(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        
        commands = {
            "üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞": [
                "git add . && git commit -m 'üîß Work in progress'",
                "./scripts/approved_sync.sh stable 'Feature ready'",
                "python3 scripts/generate_claude_context.py"
            ],
            "ü§ñ –î–µ–º–æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏": [
                "./scripts/github_sync_control.sh start",
                "./scripts/github_sync_control.sh status", 
                "./scripts/github_sync_control.sh sync",
                "./scripts/github_sync_control.sh stop"
            ],
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": [
                "git status",
                "git log --oneline -5",
                "ls claude_prompts/",
                "tail -f logs/github_sync.log"
            ],
            "üåê –í–µ–±-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è": [
                "cat claude_prompts/main_context.txt",
                "python3 scripts/github_sync_daemon.py --once",
                "ls -la claude_prompts/"
            ]
        }
        
        return commands
    
    def update_backup_file(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        git_info = self.get_git_status()
        project_structure = self.get_project_structure()
        running_processes = self.get_running_processes()
        key_files = self.get_key_files_content()
        terminal_commands = self.generate_terminal_command_summary()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        updated_content = f"""# üîÑ Session Context Backup - FPF Bot Project

## üìÖ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {timestamp}

---

## üéØ **–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–û–ï–ö–¢–ê**

### ‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:**
1. **–°–æ–∑–¥–∞–Ω–∞ –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub** - —Ç–æ–ª—å–∫–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
2. **–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–µ–±-–≤–µ—Ä—Å–∏–µ–π Claude** - –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ GitHub
3. **–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞** - –ø—Ä–æ–º–ø—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
4. **GitHub Sync Daemon** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç
5. **Session Context Backup** - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π

### üîß **Git Status:**
```
–í–µ—Ç–∫–∞: {git_info.get('current_branch', 'unknown')}

–°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤:
{git_info.get('status', '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π')}

–ù–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
{git_info.get('uncommitted_files', '–ù–µ—Ç')}

–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:
{git_info.get('recent_commits', '–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤')}
```

### ü§ñ **–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:**
```json
{json.dumps(running_processes, indent=2, ensure_ascii=False)}
```

---

## üíª **–ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–ï–†–ú–ò–ù–ê–õ–ê**

### üîß **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:**
```bash
{chr(10).join(terminal_commands.get('üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', []))}
```

### ü§ñ **–î–µ–º–æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:**
```bash
{chr(10).join(terminal_commands.get('ü§ñ –î–µ–º–æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', []))}
```

### üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
```bash
{chr(10).join(terminal_commands.get('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', []))}
```

### üåê **–í–µ–±-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:**
```bash
{chr(10).join(terminal_commands.get('üåê –í–µ–±-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', []))}
```

---

## üìÅ **–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê**

### üìÇ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(project_structure)} —Ñ–∞–π–ª–æ–≤):**
```
{chr(10).join(project_structure[:30])}
{f"... –∏ –µ—â–µ {len(project_structure)-30} —Ñ–∞–π–ª–æ–≤" if len(project_structure) > 30 else ""}
```

---

## üîó **–ö–õ–Æ–ß–ï–í–´–ï –°–°–´–õ–ö–ò**

### üåê **GitHub Repository:**
https://github.com/Alex-Flok-SAN/fix-prefix_bot

### üì± **–î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ Claude:**
```
–ó–∞–≥—Ä—É–∑–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç FPF Bot –ø—Ä–æ–µ–∫—Ç–∞:
https://raw.githubusercontent.com/Alex-Flok-SAN/fix-prefix_bot/main/SESSION_CONTEXT_BACKUP.md

–ò –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:
https://raw.githubusercontent.com/Alex-Flok-SAN/fix-prefix_bot/main/ULTIMATE_KNOWLEDGE_BASE_GUIDE_FOR_AI_TRAINING.md

–¢–µ–ø–µ—Ä—å –ø—Ä–æ–¥–æ–ª–∂–∞–π —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å!
```

---

## ‚ö° **–ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò**

### 1Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:**
```bash
git status
./scripts/github_sync_control.sh status
ls claude_prompts/
```

### 2Ô∏è‚É£ **–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:**
```bash
python3 scripts/generate_claude_context.py
./scripts/approved_sync.sh stable "Session restored"
```

### 3Ô∏è‚É£ **–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ (–µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω):**
```bash
./scripts/github_sync_control.sh start
```

---

## üéØ **FPF BOT –ü–†–û–ï–ö–¢ - –ö–†–ê–¢–ö–ê–Ø –°–ü–†–ê–í–ö–ê**

### üîç **–ß—Ç–æ —ç—Ç–æ:**
- **–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç** –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ **FIX-PREFIX-FIX**
- **AI-–¥–µ—Ç–µ–∫—Ü–∏—è** –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —á–µ—Ä–µ–∑ OCR —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
- **–í–µ–±-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** —Å Claude –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- **–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è** - —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥ –≤ GitHub

### ‚öôÔ∏è **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
- `core/ai_search_pattern/` - AI –¥–≤–∏–∂–æ–∫ –ø–æ–∏—Å–∫–∞
- `ai/ocr_engine.py` - OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
- `visualization/` - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
- `baza/` - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (22 —Ñ–∞–π–ª–∞)
- `scripts/` - –°–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

### üéØ **–ü–∞—Ç—Ç–µ—Ä–Ω FIX-PREFIX-FIX:**
**–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** FIX ‚Üí LOY-FIX ‚Üí HI-PATTERN ‚Üí RAY ‚Üí PREFIX
**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** Reversal trading pattern
**–¢–æ—á–Ω–æ—Å—Ç—å:** ~75% –¥–µ—Ç–µ–∫—Ü–∏–∏

---

## üìû **–î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø –†–ê–ë–û–¢–´:**

### üîÑ **–í –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ Claude Code:**
1. –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Git —Å—Ç–∞—Ç—É—Å  
3. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å

### üì± **–í –≤–µ–±-–≤–µ—Ä—Å–∏–∏ Claude:**
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤—ã—à–µ
2. Claude –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
3. –ú–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π

---

*üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π: python3 scripts/save_session_context.py*  
*üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {timestamp}*  
*üîó GitHub: https://github.com/Alex-Flok-SAN/fix-prefix_bot*"""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        self.backup_file.write_text(updated_content, encoding='utf-8')
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON-–≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context_data = {
            "timestamp": timestamp,
            "git_info": git_info,
            "project_structure": project_structure,
            "running_processes": running_processes,
            "key_files": key_files,
            "terminal_commands": terminal_commands
        }
        
        json_backup = self.context_dir / f"context_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(json_backup, 'w', encoding='utf-8') as f:
            json.dump(context_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:")
        print(f"üìÑ Markdown: {self.backup_file}")
        print(f"üìã JSON: {json_backup}")
        
    def create_terminal_alias(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–ª–∏–∞—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        
        alias_script = f"""#!/bin/bash

# üíæ Quick Session Save
# –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏

echo "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏..."
python3 {Path.cwd()}/scripts/save_session_context.py

echo ""
echo "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ SESSION_CONTEXT_BACKUP.md"
echo "üîó GitHub: https://github.com/Alex-Flok-SAN/fix-prefix_bot"
echo ""
echo "üì± –î–ª—è –≤–µ–±-Claude –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "https://raw.githubusercontent.com/Alex-Flok-SAN/fix-prefix_bot/main/SESSION_CONTEXT_BACKUP.md"
"""
        
        alias_path = Path("scripts/save_context.sh")
        alias_path.write_text(alias_script, encoding='utf-8')
        
        # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        subprocess.run(["chmod", "+x", str(alias_path)])
        
        print(f"üîó –°–æ–∑–¥–∞–Ω –±—ã—Å—Ç—Ä—ã–π –∞–ª–∏–∞—Å: {alias_path}")
        print("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/save_context.sh")

if __name__ == "__main__":
    saver = SessionContextSaver()
    saver.update_backup_file()
    saver.create_terminal_alias()
    
    print("")
    print("üéØ –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≥–æ—Ç–æ–≤–∞!")
    print("üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ./scripts/save_context.sh –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")